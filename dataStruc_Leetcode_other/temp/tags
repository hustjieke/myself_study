!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	study/dada/abstract/destructor.cpp	/^		A() { cout << "A()" << endl; }$/;"	f	class:A
A	study/dada/abstract/destructor.cpp	/^class A {$/;"	c	file:
A	study/dada/noname_obj/const_obj.h	/^		A():data(0){$/;"	f	class:A
A	study/dada/noname_obj/const_obj.h	/^		A(int d):data(d){$/;"	f	class:A
A	study/dada/noname_obj/const_obj.h	/^class 	A{$/;"	c
A	study/dada/noname_obj/noname_obj.h	/^		A():data(0){$/;"	f	class:A
A	study/dada/noname_obj/noname_obj.h	/^		A(int d):data(d){$/;"	f	class:A
A	study/dada/noname_obj/noname_obj.h	/^class 	A{$/;"	c
A	study/dada/overload/copy_constructor.cpp	/^		A() : data(100) {$/;"	f	class:A
A	study/dada/overload/copy_constructor.cpp	/^		A(bool b) : data(b ? 123 : 456) {$/;"	f	class:A
A	study/dada/overload/copy_constructor.cpp	/^		A(char c) : data((int) c) {$/;"	f	class:A
A	study/dada/overload/copy_constructor.cpp	/^		A(const A& o) : data(o.data) {$/;"	f	class:A
A	study/dada/overload/copy_constructor.cpp	/^		A(int d) : data(d) {$/;"	f	class:A
A	study/dada/overload/copy_constructor.cpp	/^class A {$/;"	c	file:
A	study/dada/overload/custom_copy.cpp	/^		A() : data(100) {$/;"	f	class:A
A	study/dada/overload/custom_copy.cpp	/^		A(const A& o) : data(o.data) {$/;"	f	class:A
A	study/dada/overload/custom_copy.cpp	/^class A {$/;"	c	file:
A	study/dada/overload/friend.cpp	/^		A(const A& obj) {$/;"	f	class:A
A	study/dada/overload/friend.cpp	/^		A(int d = 0):data(d) {$/;"	f	class:A
A	study/dada/overload/friend.cpp	/^class A {$/;"	c	file:
A	study/dada/overload/reference.cpp	/^		A() : data(100) {$/;"	f	class:A
A	study/dada/overload/reference.cpp	/^		A(bool b) : data(b ? 123 : 456) {$/;"	f	class:A
A	study/dada/overload/reference.cpp	/^		A(char c) : data((int) c) {$/;"	f	class:A
A	study/dada/overload/reference.cpp	/^		A(const A& o) : data(o.data) {$/;"	f	class:A
A	study/dada/overload/reference.cpp	/^		A(int d) : data(d) {$/;"	f	class:A
A	study/dada/overload/reference.cpp	/^class A {$/;"	c	file:
A	study/test/test1.cpp	/^class A : public Y, public Z { };$/;"	c	file:
AINMAL_H_	study/dada/animal/animal.h	4;"	d
AR	github/leveldb-1.18/Makefile	/^AR=xcrun ar$/;"	m
ARCH_CPU_ARM_FAMILY	github/leveldb-1.18/port/atomic_pointer.h	217;"	d
ARCH_CPU_ARM_FAMILY	github/leveldb-1.18/port/atomic_pointer.h	37;"	d
ARCH_CPU_PPC_FAMILY	github/leveldb-1.18/port/atomic_pointer.h	218;"	d
ARCH_CPU_PPC_FAMILY	github/leveldb-1.18/port/atomic_pointer.h	39;"	d
ARCH_CPU_X86_FAMILY	github/leveldb-1.18/port/atomic_pointer.h	216;"	d
ARCH_CPU_X86_FAMILY	github/leveldb-1.18/port/atomic_pointer.h	33;"	d
ARCH_CPU_X86_FAMILY	github/leveldb-1.18/port/atomic_pointer.h	35;"	d
ASC	work/test_job/day17/data_packet/include/BakPacket.h	/^enum Enumcmp{ ASC, DESC };$/;"	e	enum:Enumcmp
ASSERT_EQ	github/leveldb-1.18/util/testharness.h	107;"	d
ASSERT_GE	github/leveldb-1.18/util/testharness.h	109;"	d
ASSERT_GT	github/leveldb-1.18/util/testharness.h	110;"	d
ASSERT_LE	github/leveldb-1.18/util/testharness.h	111;"	d
ASSERT_LT	github/leveldb-1.18/util/testharness.h	112;"	d
ASSERT_NE	github/leveldb-1.18/util/testharness.h	108;"	d
ASSERT_OK	github/leveldb-1.18/util/testharness.h	106;"	d
ASSERT_TRUE	github/leveldb-1.18/util/testharness.h	105;"	d
Abandon	github/leveldb-1.18/table/table_builder.cc	/^void TableBuilder::Abandon() {$/;"	f	class:leveldb::TableBuilder
Acquire	github/leveldb-1.18/util/env_posix.cc	/^  bool Acquire() {$/;"	f	class:leveldb::__anon32::MmapLimiter
AcquireLoad	github/leveldb-1.18/db/db_bench.cc	/^  void AcquireLoad(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Acquire_Load	github/leveldb-1.18/port/atomic_pointer.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Add	github/leveldb-1.18/db/db_impl.h	/^    void Add(const CompactionStats& c) {$/;"	f	struct:leveldb::DBImpl::CompactionStats
Add	github/leveldb-1.18/db/memtable.cc	/^void MemTable::Add(SequenceNumber s, ValueType type,$/;"	f	class:leveldb::MemTable
Add	github/leveldb-1.18/db/version_set_test.cc	/^  void Add(const char* smallest, const char* largest,$/;"	f	class:leveldb::FindFileTest
Add	github/leveldb-1.18/table/block_builder.cc	/^void BlockBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::BlockBuilder
Add	github/leveldb-1.18/table/table_builder.cc	/^void TableBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::TableBuilder
Add	github/leveldb-1.18/table/table_test.cc	/^  void Add(const std::string& key, const Slice& value) {$/;"	f	class:leveldb::Constructor
Add	github/leveldb-1.18/table/table_test.cc	/^  void Add(const std::string& key, const std::string& value) {$/;"	f	class:leveldb::Harness
Add	github/leveldb-1.18/util/bloom_test.cc	/^  void Add(const Slice& s) {$/;"	f	class:leveldb::BloomTest
Add	github/leveldb-1.18/util/histogram.cc	/^void Histogram::Add(double value) {$/;"	f	class:leveldb::Histogram
AddBytes	github/leveldb-1.18/db/db_bench.cc	/^  void AddBytes(int64_t n) {$/;"	f	class:leveldb::__anon7::Stats
AddFile	github/leveldb-1.18/db/version_edit.h	/^  void AddFile(int level, uint64_t file,$/;"	f	class:leveldb::VersionEdit
AddInputDeletions	github/leveldb-1.18/db/version_set.cc	/^void Compaction::AddInputDeletions(VersionEdit* edit) {$/;"	f	class:leveldb::Compaction
AddInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline void AddInterval(FunctionContext* context, int64_t interval, ptime* datetime) {$/;"	f	namespace:impala
AddInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline void AddInterval<Hours>(FunctionContext* context, int64_t interval,$/;"	f	namespace:impala
AddInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline void AddInterval<Microseconds>(FunctionContext* context, int64_t interval,$/;"	f	namespace:impala
AddInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline void AddInterval<Minutes>(FunctionContext* context, int64_t interval,$/;"	f	namespace:impala
AddInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline void AddInterval<Months>(FunctionContext* context, int64_t interval,$/;"	f	namespace:impala
AddInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline void AddInterval<Nanoseconds>(FunctionContext* context, int64_t interval,$/;"	f	namespace:impala
AddInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline void AddInterval<Seconds>(FunctionContext* context, int64_t interval,$/;"	f	namespace:impala
AddInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline void AddInterval<Years>(FunctionContext* context, int64_t interval,$/;"	f	namespace:impala
AddIterators	github/leveldb-1.18/db/version_set.cc	/^void Version::AddIterators(const ReadOptions& options,$/;"	f	class:leveldb::Version
AddKey	github/leveldb-1.18/table/filter_block.cc	/^void FilterBlockBuilder::AddKey(const Slice& key) {$/;"	f	class:leveldb::FilterBlockBuilder
AddLiveFiles	github/leveldb-1.18/db/version_set.cc	/^void VersionSet::AddLiveFiles(std::set<uint64_t>* live) {$/;"	f	class:leveldb::VersionSet
AddMessage	github/leveldb-1.18/db/db_bench.cc	/^  void AddMessage(Slice msg) {$/;"	f	class:leveldb::__anon7::Stats
AddMonths	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline void AddMonths(FunctionContext* context, int64_t months, bool keep_max_day,$/;"	f	namespace:impala
AddRecord	github/leveldb-1.18/db/log_writer.cc	/^Status Writer::AddRecord(const Slice& slice) {$/;"	f	class:leveldb::log::Writer
AddSub	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^TimestampVal TimestampFunctions::AddSub(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
AfterFile	github/leveldb-1.18/db/version_set.cc	/^static bool AfterFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
AllEntriesFor	github/leveldb-1.18/db/db_test.cc	/^  std::string AllEntriesFor(const Slice& user_key) {$/;"	f	class:leveldb::DBTest
Allocate	github/leveldb-1.18/util/arena.h	/^inline char* Arena::Allocate(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateAligned	github/leveldb-1.18/util/arena.cc	/^char* Arena::AllocateAligned(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFallback	github/leveldb-1.18/util/arena.cc	/^char* Arena::AllocateFallback(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateNewBlock	github/leveldb-1.18/util/arena.cc	/^char* Arena::AllocateNewBlock(size_t block_bytes) {$/;"	f	class:leveldb::Arena
Animal	study/dada/abstract/abstract.cpp	/^class Animal{$/;"	c	file:
Animal	study/dada/animal/animal.h	/^		Animal(){};$/;"	f	class:Animal
Animal	study/dada/animal/animal.h	/^		Animal(string name_t, int age_t)$/;"	f	class:Animal
Animal	study/dada/animal/animal.h	/^class Animal{$/;"	c
Animal	study/dada/fenshu/virtual.cpp	/^class Animal{$/;"	c	file:
Append	github/leveldb-1.18/db/leveldb_main.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon17::StdoutPrinter
Append	github/leveldb-1.18/db/log_test.cc	/^    virtual Status Append(const Slice& slice) {$/;"	f	class:leveldb::log::LogTest::StringDest
Append	github/leveldb-1.18/db/write_batch.cc	/^void WriteBatchInternal::Append(WriteBatch* dst, const WriteBatch* src) {$/;"	f	class:leveldb::WriteBatchInternal
Append	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon25::FileState
Append	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon25::WritableFileImpl
Append	github/leveldb-1.18/table/table_test.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::StringSink
Append	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon32::PosixWritableFile
AppendEscapedStringTo	github/leveldb-1.18/util/logging.cc	/^void AppendEscapedStringTo(std::string* str, const Slice& value) {$/;"	f	namespace:leveldb
AppendInternalKey	github/leveldb-1.18/db/dbformat.cc	/^void AppendInternalKey(std::string* result, const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
AppendNumberTo	github/leveldb-1.18/util/logging.cc	/^void AppendNumberTo(std::string* str, uint64_t num) {$/;"	f	namespace:leveldb
AppendVersion	github/leveldb-1.18/db/version_set.cc	/^void VersionSet::AppendVersion(Version* v) {$/;"	f	class:leveldb::VersionSet
AppendWithSpace	github/leveldb-1.18/db/db_bench.cc	/^static void AppendWithSpace(std::string* str, Slice msg) {$/;"	f	namespace:leveldb::__anon7
Apply	github/leveldb-1.18/db/version_set.cc	/^  void Apply(VersionEdit* edit) {$/;"	f	class:leveldb::VersionSet::Builder
ApproximateMemoryUsage	github/leveldb-1.18/db/memtable.cc	/^size_t MemTable::ApproximateMemoryUsage() { return arena_.MemoryUsage(); }$/;"	f	class:leveldb::MemTable
ApproximateOffsetOf	github/leveldb-1.18/db/version_set.cc	/^uint64_t VersionSet::ApproximateOffsetOf(Version* v, const InternalKey& ikey) {$/;"	f	class:leveldb::VersionSet
ApproximateOffsetOf	github/leveldb-1.18/table/table.cc	/^uint64_t Table::ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::Table
ApproximateOffsetOf	github/leveldb-1.18/table/table_test.cc	/^  uint64_t ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::TableConstructor
ArchiveFile	github/leveldb-1.18/db/repair.cc	/^  void ArchiveFile(const std::string& fname) {$/;"	f	class:leveldb::__anon5::Repairer	file:
Arena	github/leveldb-1.18/util/arena.cc	/^Arena::Arena() {$/;"	f	class:leveldb::Arena
Arena	github/leveldb-1.18/util/arena.h	/^class Arena {$/;"	c	namespace:leveldb
ArenaTest	github/leveldb-1.18/util/arena_test.cc	/^class ArenaTest { };$/;"	c	namespace:leveldb	file:
Array	study/dada/overload/array.cpp	/^		Array(int n) : len(n), p(NULL) {$/;"	f	class:Array
Array	study/dada/overload/array.cpp	/^class Array {$/;"	c	file:
Array	study/dada/overload/array_another.cpp	/^		Array(const Array& o):len(o.len) {$/;"	f	class:Array
Array	study/dada/overload/array_another.cpp	/^		Array(int n) : len(n), p(new char[n]) {$/;"	f	class:Array
Array	study/dada/overload/array_another.cpp	/^class Array {$/;"	c	file:
ArrayCpy	work/test_job/day10/SortTime.cpp	/^void SortTime::ArrayCpy()$/;"	f	class:SortTime
ArrayCpy	work/test_job/sort/src/SortTime.cpp	/^void SortTime::ArrayCpy()$/;"	f	class:SortTime
ArrayCpy	work/test_job/sort_job/SortTime.cpp	/^void SortTime::ArrayCpy()$/;"	f	class:SortTime
AssertHeld	github/leveldb-1.18/port/port_posix.h	/^  void AssertHeld() { }$/;"	f	class:leveldb::port::Mutex
Athlete	work/person_design/include/athletes.h	/^        Athlete() {}$/;"	f	class:Athlete
Athlete	work/person_design/include/athletes.h	/^        Athlete(const Athlete& obj) : Human(obj) {$/;"	f	class:Athlete
Athlete	work/person_design/include/athletes.h	/^        Athlete(string name_t, int age_t, string ID_t, bool gender_t,$/;"	f	class:Athlete
Athlete	work/person_design/include/athletes.h	/^class Athlete : public Human {$/;"	c
AtomicCounter	github/leveldb-1.18/db/db_test.cc	/^  AtomicCounter() : count_(0) { }$/;"	f	class:leveldb::__anon14::AtomicCounter
AtomicCounter	github/leveldb-1.18/db/db_test.cc	/^class AtomicCounter {$/;"	c	namespace:leveldb::__anon14	file:
AtomicPointer	github/leveldb-1.18/port/atomic_pointer.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	github/leveldb-1.18/port/atomic_pointer.h	/^  explicit AtomicPointer(void* p) : rep_(p) {}$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	github/leveldb-1.18/port/atomic_pointer.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	github/leveldb-1.18/port/port_example.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	github/leveldb-1.18/port/port_example.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AutoCompactTest	github/leveldb-1.18/db/autocompact_test.cc	/^  AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
AutoCompactTest	github/leveldb-1.18/db/autocompact_test.cc	/^class AutoCompactTest {$/;"	c	namespace:leveldb	file:
Average	github/leveldb-1.18/util/histogram.cc	/^double Histogram::Average() const {$/;"	f	class:leveldb::Histogram
B	study/dada/abstract/destructor.cpp	/^		B() { cout << "B()" << endl; }$/;"	f	class:B
B	study/dada/abstract/destructor.cpp	/^class B : public A {$/;"	c	file:
BAKPACKET_H_	work/test_job/day12/data_packet/include/BakPacket.h	12;"	d
BAKPACKET_H_	work/test_job/day16/data_packet/include/BakPacket.h	12;"	d
BAKPACKET_H_	work/test_job/day17/data_packet/include/BakPacket.h	12;"	d
BENCHMARKS	github/leveldb-1.18/Makefile	/^BENCHMARKS = db_bench_sqlite3 db_bench_tree_db$/;"	m
BGItem	github/leveldb-1.18/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	s	class:leveldb::__anon32::PosixEnv	file:
BGQueue	github/leveldb-1.18/util/env_posix.cc	/^  typedef std::deque<BGItem> BGQueue;$/;"	t	class:leveldb::__anon32::PosixEnv	file:
BGThread	github/leveldb-1.18/util/env_posix.cc	/^void PosixEnv::BGThread() {$/;"	f	class:leveldb::__anon32::PosixEnv
BGThreadWrapper	github/leveldb-1.18/util/env_posix.cc	/^  static void* BGThreadWrapper(void* arg) {$/;"	f	class:leveldb::__anon32::PosixEnv	file:
BGWork	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::BGWork(void* db) {$/;"	f	class:leveldb::DBImpl
BINARY_OP	github/leveldb-1.18/util/testharness.h	77;"	d
BINARY_OP	github/leveldb-1.18/util/testharness.h	93;"	d
BLOCK_TEST	github/leveldb-1.18/table/table_test.cc	/^  BLOCK_TEST,$/;"	e	enum:leveldb::TestType	file:
BM_LogAndApply	github/leveldb-1.18/db/db_test.cc	/^void BM_LogAndApply(int iters, int num_base_files) {$/;"	f	namespace:leveldb
BackgroundCall	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::BackgroundCall() {$/;"	f	class:leveldb::DBImpl
BackgroundCompaction	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::BackgroundCompaction() {$/;"	f	class:leveldb::DBImpl
BakPacket	work/test_job/day12/data_packet/include/BakPacket.h	/^	BakPacket(){}$/;"	f	struct:BakPacket
BakPacket	work/test_job/day12/data_packet/include/BakPacket.h	/^struct BakPacket$/;"	s
BakPacket	work/test_job/day16/data_packet/include/BakPacket.h	/^		BakPacket(){}$/;"	f	class:BakPacket
BakPacket	work/test_job/day16/data_packet/include/BakPacket.h	/^class BakPacket$/;"	c
BakPacket	work/test_job/day17/data_packet/include/BakPacket.h	/^} BakPacket;$/;"	t	typeref:struct:BakPacket_
BakPacket_	work/test_job/day17/data_packet/include/BakPacket.h	/^typedef struct BakPacket_$/;"	s
BasketballPlayer	work/person_design/include/basketball_player.h	/^		BasketballPlayer() {}$/;"	f	class:BasketballPlayer
BasketballPlayer	work/person_design/include/basketball_player.h	/^		BasketballPlayer(const BasketballPlayer& obj) : Athlete(obj) {$/;"	f	class:BasketballPlayer
BasketballPlayer	work/person_design/include/basketball_player.h	/^		BasketballPlayer(string name_t, int age_t, string ID_t, bool gender_t,$/;"	f	class:BasketballPlayer
BasketballPlayer	work/person_design/include/basketball_player.h	/^class BasketballPlayer : public Athlete {$/;"	c
BeforeFile	github/leveldb-1.18/db/version_set.cc	/^static bool BeforeFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
Benchmark	github/leveldb-1.18/db/db_bench.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	github/leveldb-1.18/db/db_bench.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Between	github/leveldb-1.18/db/db_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
Between	github/leveldb-1.18/table/table_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
BigString	github/leveldb-1.18/db/log_test.cc	/^static std::string BigString(const std::string& partial_string, size_t n) {$/;"	f	namespace:leveldb::log
Bird	study/dada/animal/animal.h	/^class Bird:public Animal{$/;"	c
Block	github/leveldb-1.18/table/block.cc	/^Block::Block(const BlockContents& contents)$/;"	f	class:leveldb::Block
Block	github/leveldb-1.18/table/block.h	/^class Block {$/;"	c	namespace:leveldb
Block	test_vec.cpp	/^    explicit Block(int size) : m_data(size), m_size(size) {$/;"	f	struct:Block
Block	test_vec.cpp	/^struct Block {$/;"	s	file:
BlockBuilder	github/leveldb-1.18/table/block_builder.cc	/^BlockBuilder::BlockBuilder(const Options* options)$/;"	f	class:leveldb::BlockBuilder
BlockBuilder	github/leveldb-1.18/table/block_builder.h	/^class BlockBuilder {$/;"	c	namespace:leveldb
BlockConstructor	github/leveldb-1.18/table/table_test.cc	/^  explicit BlockConstructor(const Comparator* cmp)$/;"	f	class:leveldb::BlockConstructor
BlockConstructor	github/leveldb-1.18/table/table_test.cc	/^class BlockConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
BlockContents	github/leveldb-1.18/table/format.h	/^struct BlockContents {$/;"	s	namespace:leveldb
BlockFunction	github/leveldb-1.18/table/two_level_iterator.cc	/^typedef Iterator* (*BlockFunction)(void*, const ReadOptions&, const Slice&);$/;"	t	namespace:leveldb::__anon19	file:
BlockHandle	github/leveldb-1.18/table/format.h	/^class BlockHandle {$/;"	c	namespace:leveldb
BlockHandle	github/leveldb-1.18/table/format.h	/^inline BlockHandle::BlockHandle()$/;"	f	class:leveldb::BlockHandle
BlockReader	github/leveldb-1.18/table/table.cc	/^Iterator* Table::BlockReader(void* arg,$/;"	f	class:leveldb::Table
BloomFilterPolicy	github/leveldb-1.18/util/bloom.cc	/^  explicit BloomFilterPolicy(int bits_per_key)$/;"	f	class:leveldb::__anon31::BloomFilterPolicy
BloomFilterPolicy	github/leveldb-1.18/util/bloom.cc	/^class BloomFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb::__anon31	file:
BloomHash	github/leveldb-1.18/util/bloom.cc	/^static uint32_t BloomHash(const Slice& key) {$/;"	f	namespace:leveldb::__anon31
BloomTest	github/leveldb-1.18/util/bloom_test.cc	/^  BloomTest() : policy_(NewBloomFilterPolicy(10)) { }$/;"	f	class:leveldb::BloomTest
BloomTest	github/leveldb-1.18/util/bloom_test.cc	/^class BloomTest {$/;"	c	namespace:leveldb	file:
BubbleSort	work/test_job/day10/SortTime.cpp	/^void SortTime::BubbleSort()$/;"	f	class:SortTime
BubbleSort	work/test_job/sort/src/SortTime.cpp	/^void SortTime::BubbleSort()$/;"	f	class:SortTime
BubbleSort	work/test_job/sort_job/SortTime.cpp	/^void SortTime::BubbleSort()$/;"	f	class:SortTime
Build	github/leveldb-1.18/db/corruption_test.cc	/^  void Build(int n) {$/;"	f	class:leveldb::CorruptionTest
Build	github/leveldb-1.18/util/bloom_test.cc	/^  void Build() {$/;"	f	class:leveldb::BloomTest
BuildBatchGroup	github/leveldb-1.18/db/db_impl.cc	/^WriteBatch* DBImpl::BuildBatchGroup(Writer** last_writer) {$/;"	f	class:leveldb::DBImpl
BuildTable	github/leveldb-1.18/db/builder.cc	/^Status BuildTable(const std::string& dbname,$/;"	f	namespace:leveldb
Builder	github/leveldb-1.18/db/version_set.cc	/^  Builder(VersionSet* vset, Version* base)$/;"	f	class:leveldb::VersionSet::Builder
Builder	github/leveldb-1.18/db/version_set.cc	/^class VersionSet::Builder {$/;"	c	class:leveldb::VersionSet	file:
BySmallestKey	github/leveldb-1.18/db/version_set.cc	/^  struct BySmallestKey {$/;"	s	class:leveldb::VersionSet::Builder	file:
ByteSize	github/leveldb-1.18/db/write_batch_internal.h	/^  static size_t ByteSize(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
BytewiseComparator	github/leveldb-1.18/util/comparator.cc	/^const Comparator* BytewiseComparator() {$/;"	f	namespace:leveldb
BytewiseComparatorImpl	github/leveldb-1.18/util/comparator.cc	/^  BytewiseComparatorImpl() { }$/;"	f	class:leveldb::__anon30::BytewiseComparatorImpl
BytewiseComparatorImpl	github/leveldb-1.18/util/comparator.cc	/^class BytewiseComparatorImpl : public Comparator {$/;"	c	namespace:leveldb::__anon30	file:
CC	github/leveldb-1.18/build_config.mk	/^CC=cc$/;"	m
CLOCK_H_	study/dada/clock_struct/clock.h	2;"	d
CRC	github/leveldb-1.18/util/crc32c_test.cc	/^class CRC { };$/;"	c	namespace:leveldb::crc32c	file:
CStash	study/CppDesign/C06/CLib.h	/^} CStash;$/;"	t	typeref:struct:CStashTag
CStashTag	study/CppDesign/C06/CLib.h	/^typedef struct CStashTag {$/;"	s
CXX	github/leveldb-1.18/build_config.mk	/^CXX=g++$/;"	m
CXX	work/person_design/makefile	/^CXX=g++$/;"	m
CXX	work/test_job/day12/data_packet/makefile	/^CXX=g++$/;"	m
CXX	work/test_job/day16/data_packet/makefile	/^CXX=g++$/;"	m
CXX	work/test_job/day17/data_packet/makefile	/^CXX=g++$/;"	m
CXX	work/test_job/sort/makefile	/^CXX=g++$/;"	m
CXXFLAGS	work/person_design/makefile	/^CXXFLAGS=-O0 -g -Wall -fmessage-length=0 -Iperson_job -Iinclude$/;"	m
CXXFLAGS	work/test_job/day12/data_packet/makefile	/^CXXFLAGS=-O0 -g -Wall -fmessage-length=0 $/;"	m
CXXFLAGS	work/test_job/day16/data_packet/makefile	/^CXXFLAGS=-O0 -g -Wall -fmessage-length=0 $/;"	m
CXXFLAGS	work/test_job/day17/data_packet/makefile	/^CXXFLAGS=-O0 -g -Wall -fmessage-length=0 $/;"	m
CXXFLAGS	work/test_job/sort/makefile	/^CXXFLAGS=-O0 -g -Wall -fmessage-length=0 $/;"	m
Cache	github/leveldb-1.18/include/leveldb/cache.h	/^  Cache() { }$/;"	f	class:leveldb::Cache
Cache	github/leveldb-1.18/include/leveldb/cache.h	/^class Cache {$/;"	c	namespace:leveldb
CacheTest	github/leveldb-1.18/util/cache_test.cc	/^  CacheTest() : cache_(NewLRUCache(kCacheSize)) {$/;"	f	class:leveldb::CacheTest
CacheTest	github/leveldb-1.18/util/cache_test.cc	/^class CacheTest {$/;"	c	namespace:leveldb	file:
Cat	study/dada/fenshu/virtual.cpp	/^class Cat : public Animal{$/;"	c	file:
Cat	study/dada/static/statics.cpp	/^		Cat(int age):itsAge(age) { HowManyCats++; }$/;"	f	class:Cat
Cat	study/dada/static/statics.cpp	/^class Cat {$/;"	c	file:
Change	github/leveldb-1.18/db/skiplist_test.cc	/^  void Change(ReaderState s) {$/;"	f	class:leveldb::TestState
ChangeOptions	github/leveldb-1.18/db/db_test.cc	/^  bool ChangeOptions() {$/;"	f	class:leveldb::DBTest
ChangeOptions	github/leveldb-1.18/table/table_builder.cc	/^Status TableBuilder::ChangeOptions(const Options& options) {$/;"	f	class:leveldb::TableBuilder
Check	github/leveldb-1.18/db/corruption_test.cc	/^  void Check(int min_expected, int max_expected) {$/;"	f	class:leveldb::CorruptionTest
CheckCondition	github/leveldb-1.18/db/c_test.c	35;"	d	file:
CheckDel	github/leveldb-1.18/db/c_test.c	/^static void CheckDel(void* ptr, const char* k, size_t klen) {$/;"	f	file:
CheckEqual	github/leveldb-1.18/db/c_test.c	/^static void CheckEqual(const char* expected, const char* v, size_t n) {$/;"	f	file:
CheckGet	github/leveldb-1.18/db/c_test.c	/^static void CheckGet($/;"	f	file:
CheckInitialOffsetRecord	github/leveldb-1.18/db/log_test.cc	/^  void CheckInitialOffsetRecord(uint64_t initial_offset,$/;"	f	class:leveldb::log::LogTest
CheckIter	github/leveldb-1.18/db/c_test.c	/^static void CheckIter(leveldb_iterator_t* iter,$/;"	f	file:
CheckNoError	github/leveldb-1.18/db/c_test.c	29;"	d	file:
CheckOffsetPastEndReturnsNoRecords	github/leveldb-1.18/db/log_test.cc	/^  void CheckOffsetPastEndReturnsNoRecords(uint64_t offset_past_end) {$/;"	f	class:leveldb::log::LogTest
CheckPut	github/leveldb-1.18/db/c_test.c	/^static void CheckPut(void* ptr,$/;"	f	file:
Child	study/dada/father_son_cons_destroy/father_son.h	/^		Child():mc(0.0){$/;"	f	class:Child
Child	study/dada/father_son_cons_destroy/father_son.h	/^		Child(double d):mc(d){$/;"	f	class:Child
Child	study/dada/father_son_cons_destroy/father_son.h	/^class Child:public Parent{$/;"	c
Cleanup	github/leveldb-1.18/include/leveldb/iterator.h	/^  struct Cleanup {$/;"	s	class:leveldb::Iterator
CleanupCompaction	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::CleanupCompaction(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
CleanupFunction	github/leveldb-1.18/include/leveldb/iterator.h	/^  typedef void (*CleanupFunction)(void* arg1, void* arg2);$/;"	t	class:leveldb::Iterator
CleanupIteratorState	github/leveldb-1.18/db/db_impl.cc	/^static void CleanupIteratorState(void* arg1, void* arg2) {$/;"	f	namespace:leveldb::__anon8
Clear	github/leveldb-1.18/db/dbformat.h	/^  void Clear() { rep_.clear(); }$/;"	f	class:leveldb::InternalKey
Clear	github/leveldb-1.18/db/version_edit.cc	/^void VersionEdit::Clear() {$/;"	f	class:leveldb::VersionEdit
Clear	github/leveldb-1.18/db/write_batch.cc	/^void WriteBatch::Clear() {$/;"	f	class:leveldb::WriteBatch
Clear	github/leveldb-1.18/util/histogram.cc	/^void Histogram::Clear() {$/;"	f	class:leveldb::Histogram
ClearSavedValue	github/leveldb-1.18/db/db_iter.cc	/^  inline void ClearSavedValue() {$/;"	f	class:leveldb::__anon10::DBIter	file:
ClipToRange	github/leveldb-1.18/db/db_impl.cc	/^static void ClipToRange(T* ptr, V minvalue, V maxvalue) {$/;"	f	namespace:leveldb
Close	github/leveldb-1.18/db/db_test.cc	/^  void Close() {$/;"	f	class:leveldb::DBTest
Close	github/leveldb-1.18/db/leveldb_main.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon17::StdoutPrinter
Close	github/leveldb-1.18/db/log_test.cc	/^    virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Close	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon25::WritableFileImpl
Close	github/leveldb-1.18/table/table_test.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Close	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status Close() {$/;"	f	class:leveldb::__anon32::PosixWritableFile
CmpCompare	github/leveldb-1.18/db/c_test.c	/^static int CmpCompare(void* arg, const char* a, size_t alen,$/;"	f	file:
CmpDestroy	github/leveldb-1.18/db/c_test.c	/^static void CmpDestroy(void* arg) { }$/;"	f	file:
CmpName	github/leveldb-1.18/db/c_test.c	/^static const char* CmpName(void* arg) {$/;"	f	file:
Code	github/leveldb-1.18/include/leveldb/status.h	/^  enum Code {$/;"	g	class:leveldb::Status
Coding	github/leveldb-1.18/util/coding_test.cc	/^class Coding { };$/;"	c	namespace:leveldb	file:
Compact	github/leveldb-1.18/db/db_bench.cc	/^  void Compact(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Compact	github/leveldb-1.18/db/db_test.cc	/^  void Compact(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
CompactMemTable	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::CompactMemTable() {$/;"	f	class:leveldb::DBImpl
CompactRange	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::CompactRange(const Slice* begin, const Slice* end) {$/;"	f	class:leveldb::DBImpl
CompactRange	github/leveldb-1.18/db/db_test.cc	/^  virtual void CompactRange(const Slice* start, const Slice* end) {$/;"	f	class:leveldb::ModelDB
CompactRange	github/leveldb-1.18/db/version_set.cc	/^Compaction* VersionSet::CompactRange($/;"	f	class:leveldb::VersionSet
Compaction	github/leveldb-1.18/db/version_set.cc	/^Compaction::Compaction(int level)$/;"	f	class:leveldb::Compaction
Compaction	github/leveldb-1.18/db/version_set.h	/^class Compaction {$/;"	c	namespace:leveldb
CompactionState	github/leveldb-1.18/db/db_impl.cc	/^  explicit CompactionState(Compaction* c)$/;"	f	struct:leveldb::DBImpl::CompactionState
CompactionState	github/leveldb-1.18/db/db_impl.cc	/^struct DBImpl::CompactionState {$/;"	s	class:leveldb::DBImpl	file:
CompactionStats	github/leveldb-1.18/db/db_impl.h	/^    CompactionStats() : micros(0), bytes_read(0), bytes_written(0) { }$/;"	f	struct:leveldb::DBImpl::CompactionStats
CompactionStats	github/leveldb-1.18/db/db_impl.h	/^  struct CompactionStats {$/;"	s	class:leveldb::DBImpl
Comparator	github/leveldb-1.18/db/skiplist_test.cc	/^struct Comparator {$/;"	s	namespace:leveldb	file:
Comparator	github/leveldb-1.18/include/leveldb/comparator.h	/^class Comparator {$/;"	c	namespace:leveldb
Compare	github/leveldb-1.18/db/c.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	struct:leveldb_comparator_t
Compare	github/leveldb-1.18/db/dbformat.cc	/^int InternalKeyComparator::Compare(const Slice& akey, const Slice& bkey) const {$/;"	f	class:leveldb::InternalKeyComparator
Compare	github/leveldb-1.18/db/dbformat.h	/^inline int InternalKeyComparator::Compare($/;"	f	class:leveldb::InternalKeyComparator
Compare	github/leveldb-1.18/table/block.cc	/^  inline int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::Block::Iter	file:
Compare	github/leveldb-1.18/table/table_test.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon21::ReverseKeyComparator
Compare	github/leveldb-1.18/util/comparator.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon30::BytewiseComparatorImpl
CompareIterators	github/leveldb-1.18/db/db_test.cc	/^static bool CompareIterators(int step,$/;"	f	namespace:leveldb
CompressibleString	github/leveldb-1.18/util/testutil.cc	/^extern Slice CompressibleString(Random* rnd, double compressed_fraction,$/;"	f	namespace:leveldb::test
CompressionType	github/leveldb-1.18/include/leveldb/options.h	/^enum CompressionType {$/;"	g	namespace:leveldb
ConcurrentReader	github/leveldb-1.18/db/skiplist_test.cc	/^static void ConcurrentReader(void* arg) {$/;"	f	namespace:leveldb
ConcurrentTest	github/leveldb-1.18/db/skiplist_test.cc	/^  ConcurrentTest() : list_(Comparator(), &arena_) { }$/;"	f	class:leveldb::ConcurrentTest
ConcurrentTest	github/leveldb-1.18/db/skiplist_test.cc	/^class ConcurrentTest {$/;"	c	namespace:leveldb	file:
CondVar	github/leveldb-1.18/port/port_example.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	github/leveldb-1.18/port/port_posix.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	github/leveldb-1.18/port/port_posix.h	/^class CondVar {$/;"	c	namespace:leveldb::port
Constructor	github/leveldb-1.18/table/table_test.cc	/^  explicit Constructor(const Comparator* cmp) : data_(STLLessThan(cmp)) { }$/;"	f	class:leveldb::Constructor
Constructor	github/leveldb-1.18/table/table_test.cc	/^class Constructor {$/;"	c	namespace:leveldb	file:
ConsumeDecimalNumber	github/leveldb-1.18/util/logging.cc	/^bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {$/;"	f	namespace:leveldb
Contains	github/leveldb-1.18/db/skiplist.h	/^bool SkipList<Key,Comparator>::Contains(const Key& key) const {$/;"	f	class:leveldb::SkipList
Contents	github/leveldb-1.18/db/db_test.cc	/^  std::string Contents() {$/;"	f	class:leveldb::DBTest
Contents	github/leveldb-1.18/db/write_batch_internal.h	/^  static Slice Contents(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
ConvertLogFilesToTables	github/leveldb-1.18/db/repair.cc	/^  void ConvertLogFilesToTables() {$/;"	f	class:leveldb::__anon5::Repairer	file:
ConvertLogToTable	github/leveldb-1.18/db/repair.cc	/^  Status ConvertLogToTable(uint64_t log) {$/;"	f	class:leveldb::__anon5::Repairer	file:
CopyState	github/leveldb-1.18/util/status.cc	/^const char* Status::CopyState(const char* state) {$/;"	f	class:leveldb::Status
CopyString	github/leveldb-1.18/db/c.cc	/^static char* CopyString(const std::string& str) {$/;"	f	file:
Corrupt	github/leveldb-1.18/db/corruption_test.cc	/^  void Corrupt(FileType filetype, int offset, int bytes_to_corrupt) {$/;"	f	class:leveldb::CorruptionTest
Corruption	github/leveldb-1.18/db/dumpfile.cc	/^  virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::__anon12::CorruptionReporter
Corruption	github/leveldb-1.18/db/log_test.cc	/^    virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::log::LogTest::ReportCollector
Corruption	github/leveldb-1.18/include/leveldb/status.h	/^  static Status Corruption(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
CorruptionError	github/leveldb-1.18/table/block.cc	/^  void CorruptionError() {$/;"	f	class:leveldb::Block::Iter	file:
CorruptionReporter	github/leveldb-1.18/db/dumpfile.cc	/^class CorruptionReporter : public log::Reader::Reporter {$/;"	c	namespace:leveldb::__anon12	file:
CorruptionTest	github/leveldb-1.18/db/corruption_test.cc	/^  CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
CorruptionTest	github/leveldb-1.18/db/corruption_test.cc	/^class CorruptionTest {$/;"	c	namespace:leveldb	file:
Count	github/leveldb-1.18/db/write_batch.cc	/^int WriteBatchInternal::Count(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
CountFiles	github/leveldb-1.18/db/db_test.cc	/^  int CountFiles() {$/;"	f	class:leveldb::DBTest
Crc32c	github/leveldb-1.18/db/db_bench.cc	/^  void Crc32c(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
CreateDir	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status CreateDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon25::InMemoryEnv
CreateDir	github/leveldb-1.18/include/leveldb/env.h	/^  Status CreateDir(const std::string& d) { return target_->CreateDir(d); }$/;"	f	class:leveldb::EnvWrapper
CreateDir	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status CreateDir(const std::string& name) {$/;"	f	class:leveldb::__anon32::PosixEnv
CreateFilter	github/leveldb-1.18/db/c.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	struct:leveldb_filterpolicy_t
CreateFilter	github/leveldb-1.18/db/dbformat.cc	/^void InternalFilterPolicy::CreateFilter(const Slice* keys, int n,$/;"	f	class:leveldb::InternalFilterPolicy
CreateFilter	github/leveldb-1.18/table/filter_block_test.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::TestHashFilter
CreateFilter	github/leveldb-1.18/util/bloom.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::__anon31::BloomFilterPolicy
CurrentFileName	github/leveldb-1.18/db/filename.cc	/^std::string CurrentFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
CurrentOptions	github/leveldb-1.18/db/db_test.cc	/^  Options CurrentOptions() {$/;"	f	class:leveldb::DBTest
CurrentSizeEstimate	github/leveldb-1.18/table/block_builder.cc	/^size_t BlockBuilder::CurrentSizeEstimate() const {$/;"	f	class:leveldb::BlockBuilder
DATAPACKET_H_	work/test_job/day12/data_packet/include/DataPacket.h	12;"	d
DATAPACKET_H_	work/test_job/day16/data_packet/include/DataPacket.h	12;"	d
DATAPACKET_H_	work/test_job/day17/data_packet/include/DataPacket.h	12;"	d
DATA_SIZE	work/test_job/day12/data_packet/include/DataPacket.h	16;"	d
DATA_SIZE	work/test_job/day16/data_packet/include/DataPacket.h	16;"	d
DATA_SIZE	work/test_job/day17/data_packet/include/DataPacket.h	16;"	d
DAY_IN_MONTH	study/Impala/runtime/timestamp-parse-util.h	/^        DAY_IN_MONTH,$/;"	e	enum:impala::DateTimeFormatTokenType
DB	github/leveldb-1.18/include/leveldb/db.h	/^  DB() { }$/;"	f	class:leveldb::DB
DB	github/leveldb-1.18/include/leveldb/db.h	/^class DB {$/;"	c	namespace:leveldb
DBConstructor	github/leveldb-1.18/table/table_test.cc	/^  explicit DBConstructor(const Comparator* cmp)$/;"	f	class:leveldb::DBConstructor
DBConstructor	github/leveldb-1.18/table/table_test.cc	/^class DBConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
DBImpl	github/leveldb-1.18/db/db_impl.cc	/^DBImpl::DBImpl(const Options& raw_options, const std::string& dbname)$/;"	f	class:leveldb::DBImpl
DBImpl	github/leveldb-1.18/db/db_impl.h	/^class DBImpl : public DB {$/;"	c	namespace:leveldb
DBIter	github/leveldb-1.18/db/db_iter.cc	/^  DBIter(DBImpl* db, const Comparator* cmp, Iterator* iter, SequenceNumber s,$/;"	f	class:leveldb::__anon10::DBIter
DBIter	github/leveldb-1.18/db/db_iter.cc	/^class DBIter: public Iterator {$/;"	c	namespace:leveldb::__anon10	file:
DBState	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBState	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBSynchronize	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static void DBSynchronize(kyotocabinet::TreeDB* db_)$/;"	f	file:
DBTest	github/leveldb-1.18/db/db_test.cc	/^  DBTest() : option_config_(kDefault),$/;"	f	class:leveldb::DBTest
DBTest	github/leveldb-1.18/db/db_test.cc	/^class DBTest {$/;"	c	namespace:leveldb	file:
DB_TEST	github/leveldb-1.18/table/table_test.cc	/^  DB_TEST$/;"	e	enum:leveldb::TestType	file:
DEFAULT_DATE_CTX	study/Impala/runtime/timestamp-parse-util.cpp	/^DateTimeFormatContext TimestampParser::DEFAULT_DATE_CTX;$/;"	m	class:impala::TimestampParser	file:
DEFAULT_DATE_CTX	study/Impala/runtime/timestamp-parse-util.h	/^            static DateTimeFormatContext DEFAULT_DATE_CTX;$/;"	m	class:impala::TimestampParser
DEFAULT_DATE_FMT_LEN	study/Impala/runtime/timestamp-parse-util.h	/^            static const int DEFAULT_DATE_FMT_LEN = 10;$/;"	m	class:impala::TimestampParser
DEFAULT_DATE_TIME_CTX	study/Impala/runtime/timestamp-parse-util.cpp	/^DateTimeFormatContext TimestampParser::DEFAULT_DATE_TIME_CTX[10];$/;"	m	class:impala::TimestampParser	file:
DEFAULT_DATE_TIME_CTX	study/Impala/runtime/timestamp-parse-util.h	/^            static DateTimeFormatContext DEFAULT_DATE_TIME_CTX[10];$/;"	m	class:impala::TimestampParser
DEFAULT_DATE_TIME_FMT_LEN	study/Impala/runtime/timestamp-parse-util.h	/^            static const int DEFAULT_DATE_TIME_FMT_LEN = 29;$/;"	m	class:impala::TimestampParser
DEFAULT_ISO_DATE_TIME_CTX	study/Impala/runtime/timestamp-parse-util.cpp	/^DateTimeFormatContext TimestampParser::DEFAULT_ISO_DATE_TIME_CTX[10];$/;"	m	class:impala::TimestampParser	file:
DEFAULT_ISO_DATE_TIME_CTX	study/Impala/runtime/timestamp-parse-util.h	/^            static DateTimeFormatContext DEFAULT_ISO_DATE_TIME_CTX[10];$/;"	m	class:impala::TimestampParser
DEFAULT_SHORT_DATE_TIME_CTX	study/Impala/runtime/timestamp-parse-util.cpp	/^DateTimeFormatContext TimestampParser::DEFAULT_SHORT_DATE_TIME_CTX;$/;"	m	class:impala::TimestampParser	file:
DEFAULT_SHORT_DATE_TIME_CTX	study/Impala/runtime/timestamp-parse-util.h	/^            static DateTimeFormatContext DEFAULT_SHORT_DATE_TIME_CTX;$/;"	m	class:impala::TimestampParser
DEFAULT_SHORT_DATE_TIME_FMT_LEN	study/Impala/runtime/timestamp-parse-util.h	/^            static const int DEFAULT_SHORT_DATE_TIME_FMT_LEN = 19;$/;"	m	class:impala::TimestampParser
DEFAULT_SHORT_ISO_DATE_TIME_CTX	study/Impala/runtime/timestamp-parse-util.cpp	/^DateTimeFormatContext TimestampParser::DEFAULT_SHORT_ISO_DATE_TIME_CTX;$/;"	m	class:impala::TimestampParser	file:
DEFAULT_SHORT_ISO_DATE_TIME_CTX	study/Impala/runtime/timestamp-parse-util.h	/^            static DateTimeFormatContext DEFAULT_SHORT_ISO_DATE_TIME_CTX;$/;"	m	class:impala::TimestampParser
DEFAULT_TIME_CTX	study/Impala/runtime/timestamp-parse-util.cpp	/^DateTimeFormatContext TimestampParser::DEFAULT_TIME_CTX;$/;"	m	class:impala::TimestampParser	file:
DEFAULT_TIME_CTX	study/Impala/runtime/timestamp-parse-util.h	/^            static DateTimeFormatContext DEFAULT_TIME_CTX;$/;"	m	class:impala::TimestampParser
DEFAULT_TIME_FMT_LEN	study/Impala/runtime/timestamp-parse-util.h	/^            static const int DEFAULT_TIME_FMT_LEN = 8;$/;"	m	class:impala::TimestampParser
DEFAULT_TIME_FRAC_CTX	study/Impala/runtime/timestamp-parse-util.cpp	/^DateTimeFormatContext TimestampParser::DEFAULT_TIME_FRAC_CTX[10];$/;"	m	class:impala::TimestampParser	file:
DEFAULT_TIME_FRAC_CTX	study/Impala/runtime/timestamp-parse-util.h	/^            static DateTimeFormatContext DEFAULT_TIME_FRAC_CTX[10];$/;"	m	class:impala::TimestampParser
DEFAULT_TIME_FRAC_FMT_LEN	study/Impala/runtime/timestamp-parse-util.h	/^            static const int DEFAULT_TIME_FRAC_FMT_LEN = 18;$/;"	m	class:impala::TimestampParser
DESC	work/test_job/day17/data_packet/include/BakPacket.h	/^enum Enumcmp{ ASC, DESC };$/;"	e	enum:Enumcmp
DEVICEROOT	github/leveldb-1.18/Makefile	/^DEVICEROOT=$(PLATFORMSROOT)\/iPhoneOS.platform\/Developer$/;"	m
DONE	github/leveldb-1.18/db/skiplist_test.cc	/^    DONE$/;"	e	enum:leveldb::TestState::ReaderState	file:
DataPacket	work/test_job/day12/data_packet/include/DataPacket.h	/^class DataPacket$/;"	c
DataPacket	work/test_job/day12/data_packet/src/DataPacket.cpp	/^DataPacket::DataPacket()$/;"	f	class:DataPacket
DataPacket	work/test_job/day12/data_packet/src/DataPacket.cpp	/^DataPacket::DataPacket(int num)$/;"	f	class:DataPacket
DataPacket	work/test_job/day16/data_packet/include/DataPacket.h	/^class DataPacket$/;"	c
DataPacket	work/test_job/day16/data_packet/src/DataPacket.cpp	/^DataPacket::DataPacket()$/;"	f	class:DataPacket
DataPacket	work/test_job/day16/data_packet/src/DataPacket.cpp	/^DataPacket::DataPacket(int num)$/;"	f	class:DataPacket
DataPacket	work/test_job/day17/data_packet/include/DataPacket.h	/^class DataPacket$/;"	c
DataPacket	work/test_job/day17/data_packet/src/DataPacket.cpp	/^DataPacket::DataPacket()$/;"	f	class:DataPacket
DataPacket	work/test_job/day17/data_packet/src/DataPacket.cpp	/^DataPacket::DataPacket(int num)$/;"	f	class:DataPacket
Date	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^typedef boost::gregorian::date Date;$/;"	t	file:
DateDiff	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::DateDiff(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
DateRandom	work/random/random.h	/^class DateRandom {$/;"	c
DateTimeFormatContext	study/Impala/runtime/timestamp-parse-util.h	/^        DateTimeFormatContext() {$/;"	f	struct:impala::DateTimeFormatContext
DateTimeFormatContext	study/Impala/runtime/timestamp-parse-util.h	/^        DateTimeFormatContext(const char* fmt, int fmt_len) {$/;"	f	struct:impala::DateTimeFormatContext
DateTimeFormatContext	study/Impala/runtime/timestamp-parse-util.h	/^    struct DateTimeFormatContext {$/;"	s	namespace:impala
DateTimeFormatToken	study/Impala/runtime/timestamp-parse-util.h	/^        DateTimeFormatToken(DateTimeFormatTokenType type, int pos, int len, const char* val)$/;"	f	struct:impala::DateTimeFormatToken
DateTimeFormatToken	study/Impala/runtime/timestamp-parse-util.h	/^    struct DateTimeFormatToken {$/;"	s	namespace:impala
DateTimeFormatTokenType	study/Impala/runtime/timestamp-parse-util.h	/^    enum DateTimeFormatTokenType {$/;"	g	namespace:impala
DateTimeParseResult	study/Impala/runtime/timestamp-parse-util.cpp	/^  DateTimeParseResult()$/;"	f	struct:impala::DateTimeParseResult
DateTimeParseResult	study/Impala/runtime/timestamp-parse-util.cpp	/^struct DateTimeParseResult {$/;"	s	namespace:impala	file:
DayName	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^StringVal TimestampFunctions::DayName(FunctionContext* context, const TimestampVal& ts) {$/;"	f	class:impala::TimestampFunctions
DayOfMonth	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::DayOfMonth(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
DayOfWeek	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::DayOfWeek(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
DayOfYear	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::DayOfYear(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
Days	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^typedef boost::gregorian::days Days;$/;"	t	file:
DcheckAddSubResult	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline void DcheckAddSubResult(const TimestampVal& input, const TimestampVal& result,$/;"	f	namespace:impala
DebugString	github/leveldb-1.18/db/dbformat.cc	/^std::string InternalKey::DebugString() const {$/;"	f	class:leveldb::InternalKey
DebugString	github/leveldb-1.18/db/dbformat.cc	/^std::string ParsedInternalKey::DebugString() const {$/;"	f	class:leveldb::ParsedInternalKey
DebugString	github/leveldb-1.18/db/version_edit.cc	/^std::string VersionEdit::DebugString() const {$/;"	f	class:leveldb::VersionEdit
DebugString	github/leveldb-1.18/db/version_set.cc	/^std::string Version::DebugString() const {$/;"	f	class:leveldb::Version
DebugString	study/Impala/runtime/timestamp-value.cpp	/^    string TimestampValue::DebugString() const {$/;"	f	class:impala::TimestampValue
DecodeEntry	github/leveldb-1.18/table/block.cc	/^static inline const char* DecodeEntry(const char* p, const char* limit,$/;"	f	namespace:leveldb
DecodeFixed32	github/leveldb-1.18/util/coding.h	/^inline uint32_t DecodeFixed32(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFixed64	github/leveldb-1.18/util/coding.h	/^inline uint64_t DecodeFixed64(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFrom	github/leveldb-1.18/db/dbformat.h	/^  void DecodeFrom(const Slice& s) { rep_.assign(s.data(), s.size()); }$/;"	f	class:leveldb::InternalKey
DecodeFrom	github/leveldb-1.18/db/version_edit.cc	/^Status VersionEdit::DecodeFrom(const Slice& src) {$/;"	f	class:leveldb::VersionEdit
DecodeFrom	github/leveldb-1.18/table/format.cc	/^Status BlockHandle::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::BlockHandle
DecodeFrom	github/leveldb-1.18/table/format.cc	/^Status Footer::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::Footer
DecodeKey	github/leveldb-1.18/util/cache_test.cc	/^static int DecodeKey(const Slice& k) {$/;"	f	namespace:leveldb
DecodeValue	github/leveldb-1.18/util/cache_test.cc	/^static int DecodeValue(void* v) { return reinterpret_cast<uintptr_t>(v); }$/;"	f	namespace:leveldb
Default	github/leveldb-1.18/util/env_posix.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
DelayMilliseconds	github/leveldb-1.18/db/db_test.cc	/^void DelayMilliseconds(int millis) {$/;"	f	namespace:leveldb::__anon14
Delete	github/leveldb-1.18/db/db_impl.cc	/^Status DB::Delete(const WriteOptions& opt, const Slice& key) {$/;"	f	class:leveldb::DB
Delete	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::Delete(const WriteOptions& options, const Slice& key) {$/;"	f	class:leveldb::DBImpl
Delete	github/leveldb-1.18/db/db_test.cc	/^  Status Delete(const std::string& k) {$/;"	f	class:leveldb::DBTest
Delete	github/leveldb-1.18/db/db_test.cc	/^  virtual Status Delete(const WriteOptions& o, const Slice& key) {$/;"	f	class:leveldb::ModelDB
Delete	github/leveldb-1.18/db/dumpfile.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon12::WriteBatchItemPrinter
Delete	github/leveldb-1.18/db/snapshot.h	/^  void Delete(const SnapshotImpl* s) {$/;"	f	class:leveldb::SnapshotList
Delete	github/leveldb-1.18/db/write_batch.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon13::MemTableInserter
Delete	github/leveldb-1.18/db/write_batch.cc	/^void WriteBatch::Delete(const Slice& key) {$/;"	f	class:leveldb::WriteBatch
DeleteAnSSTFile	github/leveldb-1.18/db/db_test.cc	/^  bool DeleteAnSSTFile() {$/;"	f	class:leveldb::DBTest
DeleteBlock	github/leveldb-1.18/table/table.cc	/^static void DeleteBlock(void* arg, void* ignored) {$/;"	f	namespace:leveldb
DeleteCachedBlock	github/leveldb-1.18/table/table.cc	/^static void DeleteCachedBlock(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteDir	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status DeleteDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon25::InMemoryEnv
DeleteDir	github/leveldb-1.18/include/leveldb/env.h	/^  Status DeleteDir(const std::string& d) { return target_->DeleteDir(d); }$/;"	f	class:leveldb::EnvWrapper
DeleteDir	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status DeleteDir(const std::string& name) {$/;"	f	class:leveldb::__anon32::PosixEnv
DeleteEntry	github/leveldb-1.18/db/table_cache.cc	/^static void DeleteEntry(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteFile	github/leveldb-1.18/db/version_edit.h	/^  void DeleteFile(int level, uint64_t file) {$/;"	f	class:leveldb::VersionEdit
DeleteFile	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon25::InMemoryEnv
DeleteFile	github/leveldb-1.18/include/leveldb/env.h	/^  Status DeleteFile(const std::string& f) { return target_->DeleteFile(f); }$/;"	f	class:leveldb::EnvWrapper
DeleteFile	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon32::PosixEnv
DeleteFileInternal	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  void DeleteFileInternal(const std::string& fname) {$/;"	f	class:leveldb::__anon25::InMemoryEnv
DeleteObsoleteFiles	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::DeleteObsoleteFiles() {$/;"	f	class:leveldb::DBImpl
DeleteRandom	github/leveldb-1.18/db/db_bench.cc	/^  void DeleteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeleteSeq	github/leveldb-1.18/db/db_bench.cc	/^  void DeleteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeletedFileSet	github/leveldb-1.18/db/version_edit.h	/^  typedef std::set< std::pair<int, uint64_t> > DeletedFileSet;$/;"	t	class:leveldb::VersionEdit
Deleter	github/leveldb-1.18/util/cache_test.cc	/^  static void Deleter(const Slice& key, void* v) {$/;"	f	class:leveldb::CacheTest
DepartmentManager	test_base_child.cpp	/^        DepartmentManager() {$/;"	f	class:DepartmentManager
DepartmentManager	test_base_child.cpp	/^class DepartmentManager : public Staff {$/;"	c	file:
DescriptorFileName	github/leveldb-1.18/db/filename.cc	/^std::string DescriptorFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
DestroyAndReopen	github/leveldb-1.18/db/db_test.cc	/^  void DestroyAndReopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
DestroyDB	github/leveldb-1.18/db/db_impl.cc	/^Status DestroyDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
Direction	github/leveldb-1.18/db/db_iter.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon10::DBIter	file:
Direction	github/leveldb-1.18/table/merger.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon20::MergingIterator	file:
DoCompactionWork	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::DoCompactionWork(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
DoDelete	github/leveldb-1.18/db/db_bench.cc	/^  void DoDelete(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoReads	github/leveldb-1.18/db/autocompact_test.cc	/^void AutoCompactTest::DoReads(int n) {$/;"	f	class:leveldb::AutoCompactTest
DoWrite	github/leveldb-1.18/db/db_bench.cc	/^  void DoWrite(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoWriteStringToFile	github/leveldb-1.18/util/env.cc	/^static Status DoWriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
Dog	study/dada/fenshu/virtual.cpp	/^class Dog : public Animal{$/;"	c	file:
DroppedBytes	github/leveldb-1.18/db/log_test.cc	/^  size_t DroppedBytes() const {$/;"	f	class:leveldb::log::LogTest
DumpDescriptor	github/leveldb-1.18/db/dumpfile.cc	/^Status DumpDescriptor(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon12
DumpFile	github/leveldb-1.18/db/dumpfile.cc	/^Status DumpFile(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb
DumpFileCounts	github/leveldb-1.18/db/db_test.cc	/^  void DumpFileCounts(const char* label) {$/;"	f	class:leveldb::DBTest
DumpFilter	github/leveldb-1.18/util/bloom_test.cc	/^  void DumpFilter() {$/;"	f	class:leveldb::BloomTest
DumpLog	github/leveldb-1.18/db/dumpfile.cc	/^Status DumpLog(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon12
DumpSSTableList	github/leveldb-1.18/db/db_test.cc	/^  std::string DumpSSTableList() {$/;"	f	class:leveldb::DBTest
DumpTable	github/leveldb-1.18/db/dumpfile.cc	/^Status DumpTable(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon12
EPOCH_DAY_NUMBER	study/Impala/runtime/timestamp-value.cpp	/^const int64_t EPOCH_DAY_NUMBER =$/;"	v
EXCLUSIVE_LOCKS_REQUIRED	github/leveldb-1.18/port/thread_annotations.h	13;"	d
EXCLUSIVE_LOCK_FUNCTION	github/leveldb-1.18/port/thread_annotations.h	37;"	d
EXCLUSIVE_LOCK_FUNCTION	github/leveldb-1.18/util/mutexlock.h	/^  explicit MutexLock(port::Mutex *mu) EXCLUSIVE_LOCK_FUNCTION(mu)$/;"	f	class:leveldb::MutexLock
EXCLUSIVE_TRYLOCK_FUNCTION	github/leveldb-1.18/port/thread_annotations.h	45;"	d
EXEC	work/person_design/makefile	/^EXEC=app$/;"	m
EXEC	work/test_job/day12/data_packet/makefile	/^EXEC=app$/;"	m
EXEC	work/test_job/day16/data_packet/makefile	/^EXEC=app$/;"	m
EXEC	work/test_job/day17/data_packet/makefile	/^EXEC=app$/;"	m
EXEC	work/test_job/sort/makefile	/^EXEC=app$/;"	m
EXISTING	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXISTING	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EmitPhysicalRecord	github/leveldb-1.18/db/log_writer.cc	/^Status Writer::EmitPhysicalRecord(RecordType t, const char* ptr, size_t n) {$/;"	f	class:leveldb::log::Writer
EmptyIterator	github/leveldb-1.18/table/iterator.cc	/^                EmptyIterator(const Status& s) : status_(s) { }$/;"	f	class:leveldb::__anon18::EmptyIterator
EmptyIterator	github/leveldb-1.18/table/iterator.cc	/^        class EmptyIterator : public Iterator {$/;"	c	namespace:leveldb::__anon18	file:
Encode	github/leveldb-1.18/db/dbformat.h	/^  Slice Encode() const {$/;"	f	class:leveldb::InternalKey
EncodeFixed32	github/leveldb-1.18/util/coding.cc	/^void EncodeFixed32(char* buf, uint32_t value) {$/;"	f	namespace:leveldb
EncodeFixed64	github/leveldb-1.18/util/coding.cc	/^void EncodeFixed64(char* buf, uint64_t value) {$/;"	f	namespace:leveldb
EncodeKey	github/leveldb-1.18/db/memtable.cc	/^static const char* EncodeKey(std::string* scratch, const Slice& target) {$/;"	f	namespace:leveldb
EncodeKey	github/leveldb-1.18/util/cache_test.cc	/^static std::string EncodeKey(int k) {$/;"	f	namespace:leveldb
EncodeTo	github/leveldb-1.18/db/version_edit.cc	/^void VersionEdit::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::VersionEdit
EncodeTo	github/leveldb-1.18/table/format.cc	/^void BlockHandle::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::BlockHandle
EncodeTo	github/leveldb-1.18/table/format.cc	/^void Footer::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::Footer
EncodeValue	github/leveldb-1.18/util/cache_test.cc	/^static void* EncodeValue(uintptr_t v) { return reinterpret_cast<void*>(v); }$/;"	f	namespace:leveldb
EncodeVarint32	github/leveldb-1.18/util/coding.cc	/^char* EncodeVarint32(char* dst, uint32_t v) {$/;"	f	namespace:leveldb
EncodeVarint64	github/leveldb-1.18/util/coding.cc	/^char* EncodeVarint64(char* dst, uint64_t v) {$/;"	f	namespace:leveldb
Enumcmp	work/test_job/day17/data_packet/include/BakPacket.h	/^enum Enumcmp{ ASC, DESC };$/;"	g
Env	github/leveldb-1.18/include/leveldb/env.h	/^  Env() { }$/;"	f	class:leveldb::Env
Env	github/leveldb-1.18/include/leveldb/env.h	/^class Env {$/;"	c	namespace:leveldb
EnvPosixTest	github/leveldb-1.18/util/env_test.cc	/^  EnvPosixTest() : env_(Env::Default()) { }$/;"	f	class:leveldb::EnvPosixTest
EnvPosixTest	github/leveldb-1.18/util/env_test.cc	/^class EnvPosixTest {$/;"	c	namespace:leveldb	file:
EnvWrapper	github/leveldb-1.18/include/leveldb/env.h	/^  explicit EnvWrapper(Env* t) : target_(t) { }$/;"	f	class:leveldb::EnvWrapper
EnvWrapper	github/leveldb-1.18/include/leveldb/env.h	/^class EnvWrapper : public Env {$/;"	c	namespace:leveldb
Equal	github/leveldb-1.18/db/skiplist.h	/^  bool Equal(const Key& a, const Key& b) const { return (compare_(a, b) == 0); }$/;"	f	class:leveldb::SkipList
Erase	github/leveldb-1.18/util/cache.cc	/^  virtual void Erase(const Slice& key) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
Erase	github/leveldb-1.18/util/cache.cc	/^void LRUCache::Erase(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon27::LRUCache
Erase	github/leveldb-1.18/util/cache_test.cc	/^  void Erase(int key) {$/;"	f	class:leveldb::CacheTest
ErrorCheck	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static void ErrorCheck(int status) {$/;"	f	file:
ErrorEnv	github/leveldb-1.18/util/testutil.h	/^  ErrorEnv() : EnvWrapper(Env::Default()),$/;"	f	class:leveldb::test::ErrorEnv
ErrorEnv	github/leveldb-1.18/util/testutil.h	/^class ErrorEnv : public EnvWrapper {$/;"	c	namespace:leveldb::test
EscapeString	github/leveldb-1.18/util/logging.cc	/^std::string EscapeString(const Slice& value) {$/;"	f	namespace:leveldb
Evict	github/leveldb-1.18/db/table_cache.cc	/^void TableCache::Evict(uint64_t file_number) {$/;"	f	class:leveldb::TableCache
ExecErrorCheck	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static void ExecErrorCheck(int status, char *err_msg) {$/;"	f	file:
Extend	github/leveldb-1.18/util/crc32c.cc	/^uint32_t Extend(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::crc32c
ExtractMetaData	github/leveldb-1.18/db/repair.cc	/^  void ExtractMetaData() {$/;"	f	class:leveldb::__anon5::Repairer	file:
ExtractUserKey	github/leveldb-1.18/db/dbformat.h	/^inline Slice ExtractUserKey(const Slice& internal_key) {$/;"	f	namespace:leveldb
ExtractValueType	github/leveldb-1.18/db/dbformat.h	/^inline ValueType ExtractValueType(const Slice& internal_key) {$/;"	f	namespace:leveldb
FALLTHROUGH_INTENDED	github/leveldb-1.18/util/hash.cc	13;"	d	file:
FATHER_SON_H_	study/dada/father_son_cons_destroy/father_son.h	4;"	d
FILE	test_getline.cpp	/^typedef struct _IO_FILE FILE;$/;"	t	typeref:struct:_IO_FILE	file:
FLAGS_WAL_enabled	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_WAL_enabled = true;$/;"	v	file:
FLAGS_benchmarks	github/leveldb-1.18/db/db_bench.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_bloom_bits	github/leveldb-1.18/db/db_bench.cc	/^static int FLAGS_bloom_bits = -1;$/;"	v	file:
FLAGS_cache_size	github/leveldb-1.18/db/db_bench.cc	/^static int FLAGS_cache_size = -1;$/;"	v	file:
FLAGS_cache_size	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_cache_size = 4194304;$/;"	v	file:
FLAGS_compression	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_compression = true;$/;"	v	file:
FLAGS_compression_ratio	github/leveldb-1.18/db/db_bench.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_db	github/leveldb-1.18/db/db_bench.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_histogram	github/leveldb-1.18/db/db_bench.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_num	github/leveldb-1.18/db/db_bench.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num_pages	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num_pages = 4096;$/;"	v	file:
FLAGS_open_files	github/leveldb-1.18/db/db_bench.cc	/^static int FLAGS_open_files = 0;$/;"	v	file:
FLAGS_page_size	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_page_size	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_reads	github/leveldb-1.18/db/db_bench.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_threads	github/leveldb-1.18/db/db_bench.cc	/^static int FLAGS_threads = 1;$/;"	v	file:
FLAGS_transaction	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_transaction = true;$/;"	v	file:
FLAGS_use_existing_db	github/leveldb-1.18/db/db_bench.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_value_size	github/leveldb-1.18/db/db_bench.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_write_buffer_size	github/leveldb-1.18/db/db_bench.cc	/^static int FLAGS_write_buffer_size = 0;$/;"	v	file:
FRACTION	study/Impala/runtime/timestamp-parse-util.h	/^        FRACTION,$/;"	e	enum:impala::DateTimeFormatTokenType
FRESH	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FRESH	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FRIDAY	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const char* TimestampFunctions::FRIDAY = "Friday";$/;"	m	class:impala::TimestampFunctions	file:
FRIDAY	study/Impala/timestamp_src/timestamp-functions.h	/^            static const char* FRIDAY;$/;"	m	class:impala::TimestampFunctions
FalsePositiveRate	github/leveldb-1.18/util/bloom_test.cc	/^  double FalsePositiveRate() {$/;"	f	class:leveldb::BloomTest
FileExists	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon25::InMemoryEnv
FileExists	github/leveldb-1.18/include/leveldb/env.h	/^  bool FileExists(const std::string& f) { return target_->FileExists(f); }$/;"	f	class:leveldb::EnvWrapper
FileExists	github/leveldb-1.18/util/env_posix.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon32::PosixEnv
FileLock	github/leveldb-1.18/include/leveldb/env.h	/^  FileLock() { }$/;"	f	class:leveldb::FileLock
FileLock	github/leveldb-1.18/include/leveldb/env.h	/^class FileLock {$/;"	c	namespace:leveldb
FileMetaData	github/leveldb-1.18/db/version_edit.h	/^  FileMetaData() : refs(0), allowed_seeks(1 << 30), file_size(0) { }$/;"	f	struct:leveldb::FileMetaData
FileMetaData	github/leveldb-1.18/db/version_edit.h	/^struct FileMetaData {$/;"	s	namespace:leveldb
FileNameTest	github/leveldb-1.18/db/filename_test.cc	/^class FileNameTest { };$/;"	c	namespace:leveldb	file:
FileSet	github/leveldb-1.18/db/version_set.cc	/^  typedef std::set<FileMetaData*, BySmallestKey> FileSet;$/;"	t	class:leveldb::VersionSet::Builder	file:
FileSize	github/leveldb-1.18/table/table_builder.cc	/^uint64_t TableBuilder::FileSize() const {$/;"	f	class:leveldb::TableBuilder
FileState	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  FileState() : refs_(0), size_(0) {}$/;"	f	class:leveldb::__anon25::FileState
FileState	github/leveldb-1.18/helpers/memenv/memenv.cc	/^class FileState {$/;"	c	namespace:leveldb::__anon25	file:
FileSystem	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  typedef std::map<std::string, FileState*> FileSystem;$/;"	t	class:leveldb::__anon25::InMemoryEnv	file:
FileType	github/leveldb-1.18/db/filename.h	/^enum FileType {$/;"	g	namespace:leveldb
FilesPerLevel	github/leveldb-1.18/db/db_test.cc	/^  std::string FilesPerLevel() {$/;"	f	class:leveldb::DBTest
FillLevels	github/leveldb-1.18/db/db_test.cc	/^  void FillLevels(const std::string& smallest, const std::string& largest) {$/;"	f	class:leveldb::DBTest
FilterBlockBuilder	github/leveldb-1.18/table/filter_block.cc	/^FilterBlockBuilder::FilterBlockBuilder(const FilterPolicy* policy)$/;"	f	class:leveldb::FilterBlockBuilder
FilterBlockBuilder	github/leveldb-1.18/table/filter_block.h	/^class FilterBlockBuilder {$/;"	c	namespace:leveldb
FilterBlockReader	github/leveldb-1.18/table/filter_block.cc	/^FilterBlockReader::FilterBlockReader(const FilterPolicy* policy,$/;"	f	class:leveldb::FilterBlockReader
FilterBlockReader	github/leveldb-1.18/table/filter_block.h	/^class FilterBlockReader {$/;"	c	namespace:leveldb
FilterBlockTest	github/leveldb-1.18/table/filter_block_test.cc	/^class FilterBlockTest {$/;"	c	namespace:leveldb	file:
FilterCreate	github/leveldb-1.18/db/c_test.c	/^static char* FilterCreate($/;"	f	file:
FilterDestroy	github/leveldb-1.18/db/c_test.c	/^static void FilterDestroy(void* arg) { }$/;"	f	file:
FilterKeyMatch	github/leveldb-1.18/db/c_test.c	/^unsigned char FilterKeyMatch($/;"	f
FilterName	github/leveldb-1.18/db/c_test.c	/^static const char* FilterName(void* arg) {$/;"	f	file:
FilterPolicy	github/leveldb-1.18/include/leveldb/filter_policy.h	/^class FilterPolicy {$/;"	c	namespace:leveldb
FilterSize	github/leveldb-1.18/util/bloom_test.cc	/^  size_t FilterSize() const {$/;"	f	class:leveldb::BloomTest
Finalize	github/leveldb-1.18/db/version_set.cc	/^void VersionSet::Finalize(Version* v) {$/;"	f	class:leveldb::VersionSet
Find	github/leveldb-1.18/db/version_set_test.cc	/^  int Find(const char* key) {$/;"	f	class:leveldb::FindFileTest
FindFile	github/leveldb-1.18/db/version_set.cc	/^int FindFile(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
FindFileTest	github/leveldb-1.18/db/version_set_test.cc	/^  FindFileTest() : disjoint_sorted_files_(true) { }$/;"	f	class:leveldb::FindFileTest
FindFileTest	github/leveldb-1.18/db/version_set_test.cc	/^class FindFileTest {$/;"	c	namespace:leveldb	file:
FindFiles	github/leveldb-1.18/db/repair.cc	/^  Status FindFiles() {$/;"	f	class:leveldb::__anon5::Repairer	file:
FindGreaterOrEqual	github/leveldb-1.18/db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindGreaterOrEqual(const Key& key, Node** prev)$/;"	f	class:leveldb::SkipList
FindLargest	github/leveldb-1.18/table/merger.cc	/^void MergingIterator::FindLargest() {$/;"	f	class:leveldb::__anon20::MergingIterator
FindLast	github/leveldb-1.18/db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindLast()$/;"	f	class:leveldb::SkipList
FindLessThan	github/leveldb-1.18/db/skiplist.h	/^SkipList<Key,Comparator>::FindLessThan(const Key& key) const {$/;"	f	class:leveldb::SkipList
FindNextUserEntry	github/leveldb-1.18/db/db_iter.cc	/^void DBIter::FindNextUserEntry(bool skipping, std::string* skip) {$/;"	f	class:leveldb::__anon10::DBIter
FindPointer	github/leveldb-1.18/util/cache.cc	/^  LRUHandle** FindPointer(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon27::HandleTable	file:
FindPrevUserEntry	github/leveldb-1.18/db/db_iter.cc	/^void DBIter::FindPrevUserEntry() {$/;"	f	class:leveldb::__anon10::DBIter
FindShortSuccessor	github/leveldb-1.18/db/c.cc	/^  virtual void FindShortSuccessor(std::string* key) const { }$/;"	f	struct:leveldb_comparator_t
FindShortSuccessor	github/leveldb-1.18/db/dbformat.cc	/^void InternalKeyComparator::FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::InternalKeyComparator
FindShortSuccessor	github/leveldb-1.18/table/table_test.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon21::ReverseKeyComparator
FindShortSuccessor	github/leveldb-1.18/util/comparator.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon30::BytewiseComparatorImpl
FindShortestSeparator	github/leveldb-1.18/db/c.cc	/^  virtual void FindShortestSeparator(std::string*, const Slice&) const { }$/;"	f	struct:leveldb_comparator_t
FindShortestSeparator	github/leveldb-1.18/db/dbformat.cc	/^void InternalKeyComparator::FindShortestSeparator($/;"	f	class:leveldb::InternalKeyComparator
FindShortestSeparator	github/leveldb-1.18/table/table_test.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon21::ReverseKeyComparator
FindShortestSeparator	github/leveldb-1.18/util/comparator.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon30::BytewiseComparatorImpl
FindSmallest	github/leveldb-1.18/table/merger.cc	/^void MergingIterator::FindSmallest() {$/;"	f	class:leveldb::__anon20::MergingIterator
FindTable	github/leveldb-1.18/db/table_cache.cc	/^Status TableCache::FindTable(uint64_t file_number, uint64_t file_size,$/;"	f	class:leveldb::TableCache
FindTimezone	study/Impala/timestamp_src/timestamp-functions.cpp	/^    time_zone_ptr TimezoneDatabase::FindTimezone(const string& tz, const TimestampValue& tv) {$/;"	f	class:impala::TimezoneDatabase
Finish	github/leveldb-1.18/table/block_builder.cc	/^Slice BlockBuilder::Finish() {$/;"	f	class:leveldb::BlockBuilder
Finish	github/leveldb-1.18/table/filter_block.cc	/^Slice FilterBlockBuilder::Finish() {$/;"	f	class:leveldb::FilterBlockBuilder
Finish	github/leveldb-1.18/table/table_builder.cc	/^Status TableBuilder::Finish() {$/;"	f	class:leveldb::TableBuilder
Finish	github/leveldb-1.18/table/table_test.cc	/^  void Finish(const Options& options,$/;"	f	class:leveldb::Constructor
FinishCompactionOutputFile	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,$/;"	f	class:leveldb::DBImpl
FinishImpl	github/leveldb-1.18/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::BlockConstructor
FinishImpl	github/leveldb-1.18/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::DBConstructor
FinishImpl	github/leveldb-1.18/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::MemTableConstructor
FinishImpl	github/leveldb-1.18/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::TableConstructor
FinishedSingleOp	github/leveldb-1.18/db/db_bench.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::__anon7::Stats
FinishedSingleOp	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FinishedSingleOp	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
Firemen	work/person_design/include/firemen.h	/^        Firemen() {}$/;"	f	class:Firemen
Firemen	work/person_design/include/firemen.h	/^        Firemen(const Firemen& obj) : Human(obj) {$/;"	f	class:Firemen
Firemen	work/person_design/include/firemen.h	/^        Firemen(string name_t, int age_t, string ID_t, bool gender_t, string $/;"	f	class:Firemen
Firemen	work/person_design/include/firemen.h	/^class Firemen : public Human {$/;"	c
FixChecksum	github/leveldb-1.18/db/log_test.cc	/^  void FixChecksum(int header_offset, int len) {$/;"	f	class:leveldb::log::LogTest
Flush	github/leveldb-1.18/db/leveldb_main.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon17::StdoutPrinter
Flush	github/leveldb-1.18/db/log_test.cc	/^    virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Flush	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon25::WritableFileImpl
Flush	github/leveldb-1.18/table/table_builder.cc	/^void TableBuilder::Flush() {$/;"	f	class:leveldb::TableBuilder
Flush	github/leveldb-1.18/table/table_test.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Flush	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status Flush() {$/;"	f	class:leveldb::__anon32::PosixWritableFile
FootballPlayer	work/person_design/include/football_player.h	/^		FootballPlayer(const FootballPlayer& obj) : Athlete(obj) {$/;"	f	class:FootballPlayer
FootballPlayer	work/person_design/include/football_player.h	/^        FootballPlayer() {}$/;"	f	class:FootballPlayer
FootballPlayer	work/person_design/include/football_player.h	/^        FootballPlayer(string name_t, int age_t, string ID_t, bool gender_t,$/;"	f	class:FootballPlayer
FootballPlayer	work/person_design/include/football_player.h	/^class FootballPlayer : public Athlete {$/;"	c
Footer	github/leveldb-1.18/table/format.h	/^  Footer() { }$/;"	f	class:leveldb::Footer
Footer	github/leveldb-1.18/table/format.h	/^class Footer {$/;"	c	namespace:leveldb
ForEachOverlapping	github/leveldb-1.18/db/version_set.cc	/^void Version::ForEachOverlapping(Slice user_key, Slice internal_key,$/;"	f	class:leveldb::Version
ForceError	github/leveldb-1.18/db/log_test.cc	/^  void ForceError() {$/;"	f	class:leveldb::log::LogTest
Format	study/Impala/runtime/timestamp-parse-util.cpp	/^int TimestampParser::Format(const DateTimeFormatContext& dt_ctx,$/;"	f	class:impala::TimestampParser
Format	study/Impala/runtime/timestamp-value.cpp	/^    int TimestampValue::Format(const DateTimeFormatContext& dt_ctx, int len, char* buff) const {$/;"	f	class:impala::TimestampValue
FormatTest	github/leveldb-1.18/db/dbformat_test.cc	/^class FormatTest { };$/;"	c	namespace:leveldb	file:
Free	github/leveldb-1.18/db/c_test.c	/^static void Free(char** ptr) {$/;"	f	file:
FromTimestamp	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^StringVal TimestampFunctions::FromTimestamp(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
FromTimestampVal	study/Impala/runtime/timestamp-value.h	/^            static TimestampValue FromTimestampVal(const impala_udf::TimestampVal& udf_value) {$/;"	f	class:impala::TimestampValue
FromUnix	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^StringVal TimestampFunctions::FromUnix(FunctionContext* context, const TIME& intp) {$/;"	f	class:impala::TimestampFunctions
FromUnix	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^StringVal TimestampFunctions::FromUnix(FunctionContext* context, const TIME& intp,$/;"	f	class:impala::TimestampFunctions
FromUtc	study/Impala/timestamp_src/timestamp-functions.cpp	/^    TimestampVal TimestampFunctions::FromUtc(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
Generate	github/leveldb-1.18/db/db_bench.cc	/^  Slice Generate(size_t len) {$/;"	f	class:leveldb::__anon7::RandomGenerator
Generate	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon2::RandomGenerator
Generate	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon3::RandomGenerator
GenerateFilter	github/leveldb-1.18/table/filter_block.cc	/^void FilterBlockBuilder::GenerateFilter() {$/;"	f	class:leveldb::FilterBlockBuilder
Get	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::Get(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
Get	github/leveldb-1.18/db/db_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::DBTest
Get	github/leveldb-1.18/db/db_test.cc	/^  virtual Status Get(const ReadOptions& options,$/;"	f	class:leveldb::ModelDB
Get	github/leveldb-1.18/db/memtable.cc	/^bool MemTable::Get(const LookupKey& key, std::string* value, Status* s) {$/;"	f	class:leveldb::MemTable
Get	github/leveldb-1.18/db/skiplist_test.cc	/^    intptr_t Get(int k) {$/;"	f	struct:leveldb::ConcurrentTest::State
Get	github/leveldb-1.18/db/table_cache.cc	/^Status TableCache::Get(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
Get	github/leveldb-1.18/db/version_set.cc	/^Status Version::Get(const ReadOptions& options,$/;"	f	class:leveldb::Version
GetAge	study/dada/static/statics.cpp	/^		virtual int GetAge() { return itsAge; }$/;"	f	class:Cat
GetAllowed	github/leveldb-1.18/util/env_posix.cc	/^  intptr_t GetAllowed() const {$/;"	f	class:leveldb::__anon32::MmapLimiter	file:
GetApproximateSizes	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::GetApproximateSizes($/;"	f	class:leveldb::DBImpl
GetApproximateSizes	github/leveldb-1.18/db/db_test.cc	/^  virtual void GetApproximateSizes(const Range* r, int n, uint64_t* sizes) {$/;"	f	class:leveldb::ModelDB
GetChildren	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon25::InMemoryEnv
GetChildren	github/leveldb-1.18/include/leveldb/env.h	/^  Status GetChildren(const std::string& dir, std::vector<std::string>* r) {$/;"	f	class:leveldb::EnvWrapper
GetChildren	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon32::PosixEnv
GetFileIterator	github/leveldb-1.18/db/version_set.cc	/^static Iterator* GetFileIterator(void* arg,$/;"	f	namespace:leveldb
GetFileSize	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* file_size) {$/;"	f	class:leveldb::__anon25::InMemoryEnv
GetFileSize	github/leveldb-1.18/include/leveldb/env.h	/^  Status GetFileSize(const std::string& f, uint64_t* s) {$/;"	f	class:leveldb::EnvWrapper
GetFileSize	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* size) {$/;"	f	class:leveldb::__anon32::PosixEnv
GetHeapProfile	github/leveldb-1.18/port/port_posix.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetInternalKey	github/leveldb-1.18/db/version_edit.cc	/^static bool GetInternalKey(Slice* input, InternalKey* dst) {$/;"	f	namespace:leveldb
GetLastDayOfMonth	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline unsigned short GetLastDayOfMonth(int month, int year) {$/;"	f	namespace:impala
GetLengthPrefixedSlice	github/leveldb-1.18/db/memtable.cc	/^static Slice GetLengthPrefixedSlice(const char* data) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	github/leveldb-1.18/util/coding.cc	/^bool GetLengthPrefixedSlice(Slice* input, Slice* result) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	github/leveldb-1.18/util/coding.cc	/^const char* GetLengthPrefixedSlice(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetLevel	github/leveldb-1.18/db/version_edit.cc	/^static bool GetLevel(Slice* input, int* level) {$/;"	f	namespace:leveldb
GetMaxHeight	github/leveldb-1.18/db/skiplist.h	/^  inline int GetMaxHeight() const {$/;"	f	class:leveldb::SkipList
GetOverlappingInputs	github/leveldb-1.18/db/version_set.cc	/^void Version::GetOverlappingInputs($/;"	f	class:leveldb::Version
GetProperty	github/leveldb-1.18/db/db_impl.cc	/^bool DBImpl::GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::DBImpl
GetProperty	github/leveldb-1.18/db/db_test.cc	/^  virtual bool GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::ModelDB
GetRandomStr	work/test_job/day12/data_packet/src/DataPacket.cpp	/^string DataPacket::GetRandomStr()$/;"	f	class:DataPacket
GetRandomStr	work/test_job/day16/data_packet/src/DataPacket.cpp	/^string DataPacket::GetRandomStr()$/;"	f	class:DataPacket
GetRandomStr	work/test_job/day17/data_packet/src/DataPacket.cpp	/^string DataPacket::GetRandomStr()$/;"	f	class:DataPacket
GetRange	github/leveldb-1.18/db/version_set.cc	/^void VersionSet::GetRange(const std::vector<FileMetaData*>& inputs,$/;"	f	class:leveldb::VersionSet
GetRange2	github/leveldb-1.18/db/version_set.cc	/^void VersionSet::GetRange2(const std::vector<FileMetaData*>& inputs1,$/;"	f	class:leveldb::VersionSet
GetRestartPoint	github/leveldb-1.18/table/block.cc	/^  uint32_t GetRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
GetSnapshot	github/leveldb-1.18/db/db_impl.cc	/^const Snapshot* DBImpl::GetSnapshot() {$/;"	f	class:leveldb::DBImpl
GetSnapshot	github/leveldb-1.18/db/db_test.cc	/^  virtual const Snapshot* GetSnapshot() {$/;"	f	class:leveldb::ModelDB
GetStats	github/leveldb-1.18/db/version_set.h	/^  struct GetStats {$/;"	s	class:leveldb::Version
GetTempDir	github/leveldb-1.18/db/c_test.c	/^static const char* GetTempDir(void) {$/;"	f	file:
GetTestDirectory	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::__anon25::InMemoryEnv
GetTestDirectory	github/leveldb-1.18/include/leveldb/env.h	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::EnvWrapper
GetTestDirectory	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status GetTestDirectory(std::string* result) {$/;"	f	class:leveldb::__anon32::PosixEnv
GetVarint32	github/leveldb-1.18/util/coding.cc	/^bool GetVarint32(Slice* input, uint32_t* value) {$/;"	f	namespace:leveldb
GetVarint32Ptr	github/leveldb-1.18/util/coding.h	/^inline const char* GetVarint32Ptr(const char* p,$/;"	f	namespace:leveldb
GetVarint32PtrFallback	github/leveldb-1.18/util/coding.cc	/^const char* GetVarint32PtrFallback(const char* p,$/;"	f	namespace:leveldb
GetVarint64	github/leveldb-1.18/util/coding.cc	/^bool GetVarint64(Slice* input, uint64_t* value) {$/;"	f	namespace:leveldb
GetVarint64Ptr	github/leveldb-1.18/util/coding.cc	/^const char* GetVarint64Ptr(const char* p, const char* limit, uint64_t* value) {$/;"	f	namespace:leveldb
GuessType	github/leveldb-1.18/db/dumpfile.cc	/^bool GuessType(const std::string& fname, FileType* type) {$/;"	f	namespace:leveldb::__anon12
HASH	github/leveldb-1.18/util/hash_test.cc	/^class HASH { };$/;"	c	namespace:leveldb	file:
HOUR_IN_DAY	study/Impala/runtime/timestamp-parse-util.h	/^        HOUR_IN_DAY,$/;"	e	enum:impala::DateTimeFormatTokenType
HUMAN_H_	study/dada/person_job/person.h	2;"	d
Handle	github/leveldb-1.18/include/leveldb/cache.h	/^  struct Handle { };$/;"	s	class:leveldb::Cache
HandleDumpCommand	github/leveldb-1.18/db/leveldb_main.cc	/^bool HandleDumpCommand(Env* env, char** files, int num) {$/;"	f	namespace:leveldb::__anon17
HandleTable	github/leveldb-1.18/util/cache.cc	/^  HandleTable() : length_(0), elems_(0), list_(NULL) { Resize(); }$/;"	f	class:leveldb::__anon27::HandleTable
HandleTable	github/leveldb-1.18/util/cache.cc	/^class HandleTable {$/;"	c	namespace:leveldb::__anon27	file:
Handler	github/leveldb-1.18/include/leveldb/write_batch.h	/^  class Handler {$/;"	c	class:leveldb::WriteBatch
Harness	github/leveldb-1.18/table/table_test.cc	/^  Harness() : constructor_(NULL) { }$/;"	f	class:leveldb::Harness
Harness	github/leveldb-1.18/table/table_test.cc	/^class Harness {$/;"	c	namespace:leveldb	file:
HasDate	study/Impala/runtime/timestamp-value.h	/^            bool HasDate() const { return !date_.is_special(); }$/;"	f	class:impala::TimestampValue
HasDateAndTime	study/Impala/runtime/timestamp-value.h	/^            bool HasDateAndTime() const { return HasDate() && HasTime(); }$/;"	f	class:impala::TimestampValue
HasDateOrTime	study/Impala/runtime/timestamp-value.h	/^            bool HasDateOrTime() const { return HasDate() || HasTime(); }$/;"	f	class:impala::TimestampValue
HasTime	study/Impala/runtime/timestamp-value.h	/^            bool HasTime() const { return !time_.is_special(); }$/;"	f	class:impala::TimestampValue
Hash	github/leveldb-1.18/util/hash.cc	/^uint32_t Hash(const char* data, size_t n, uint32_t seed) {$/;"	f	namespace:leveldb
Hash	study/Impala/runtime/timestamp-value.h	/^            inline uint32_t Hash(int seed = 0) const {$/;"	f	class:impala::TimestampValue
HashNumbers	github/leveldb-1.18/db/skiplist_test.cc	/^  static uint64_t HashNumbers(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
HashSlice	github/leveldb-1.18/util/cache.cc	/^  static inline uint32_t HashSlice(const Slice& s) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache	file:
HeapAdjust	work/test_job/day10/SortTime.cpp	/^void HeapAdjust(int** arr, int index, int size)$/;"	f
HeapAdjust	work/test_job/sort/src/SortTime.cpp	/^void HeapAdjust(int** arr, int index, int size)$/;"	f
HeapAdjust	work/test_job/sort_job/SortTime.cpp	/^void HeapAdjust(int** arr, int s, int m)$/;"	f
HeapProfile	github/leveldb-1.18/db/db_bench.cc	/^  void HeapProfile() {$/;"	f	class:leveldb::Benchmark	file:
HeapSort	work/test_job/day10/SortTime.cpp	/^void SortTime::HeapSort() $/;"	f	class:SortTime
HeapSort	work/test_job/sort/src/SortTime.cpp	/^void SortTime::HeapSort() $/;"	f	class:SortTime
HeapSort	work/test_job/sort_job/SortTime.cpp	/^void SortTime::HeapSort() $/;"	f	class:SortTime
Histogram	github/leveldb-1.18/util/histogram.h	/^  Histogram() { }$/;"	f	class:leveldb::Histogram
Histogram	github/leveldb-1.18/util/histogram.h	/^class Histogram {$/;"	c	namespace:leveldb
Hour	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::Hour(FunctionContext* context, const TimestampVal& ts_val) {$/;"	f	class:impala::TimestampFunctions
Hours	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^typedef boost::posix_time::hours Hours;$/;"	t	file:
HowManyCats	study/dada/static/statics.cpp	/^		static int HowManyCats;$/;"	m	class:Cat	file:
HowManyCats	study/dada/static/statics.cpp	/^int Cat::HowManyCats = 0; \/\/ 初始化一般都是在类外面，跟全局变量一样$/;"	m	class:Cat	file:
Human	study/dada/person_job/person.h	/^		Human(){};$/;"	f	class:Human
Human	study/dada/person_job/person.h	/^		Human(string name_t, int age_t, string ID_t)$/;"	f	class:Human
Human	study/dada/person_job/person.h	/^class Human{$/;"	c
Human	work/person_design/include/human.h	/^        Human() {};$/;"	f	class:Human
Human	work/person_design/include/human.h	/^        Human(const Human& obj)$/;"	f	class:Human
Human	work/person_design/include/human.h	/^        Human(string name_t, int age_t, string ID_t, bool gender_t, $/;"	f	class:Human
Human	work/person_design/include/human.h	/^class Human {$/;"	c
ID	study/dada/person_job/person.h	/^		string ID;$/;"	m	class:Human
IKey	github/leveldb-1.18/db/dbformat_test.cc	/^static std::string IKey(const std::string& user_key,$/;"	f	namespace:leveldb
IMPALA_EXPRS_TIMESTAMP_FUNCTIONS_H	study/Impala/timestamp_src/timestamp-functions.h	20;"	d
IMPALA_RUNTIME_TIMESTAMP_PARSE_UTIL_H	study/Impala/runtime/timestamp-parse-util.h	19;"	d
IMPALA_RUNTIME_TIMESTAMP_VALUE_H	study/Impala/runtime/timestamp-value.h	20;"	d
INT_LINKED_LIST	study/List/single-linked/int_s_l_l_node.h	6;"	d
IOError	github/leveldb-1.18/include/leveldb/status.h	/^  static Status IOError(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
IOError	github/leveldb-1.18/util/env_posix.cc	/^static Status IOError(const std::string& context, int err_number) {$/;"	f	namespace:leveldb::__anon32
IOSARCH	github/leveldb-1.18/Makefile	/^IOSARCH=-arch armv6 -arch armv7 -arch armv7s -arch arm64$/;"	m
IOSVERSION	github/leveldb-1.18/Makefile	/^IOSVERSION=$(shell defaults read $(PLATFORMSROOT)\/iPhoneOS.platform\/version CFBundleShortVersionString)$/;"	m
InMemoryEnv	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  explicit InMemoryEnv(Env* base_env) : EnvWrapper(base_env) { }$/;"	f	class:leveldb::__anon25::InMemoryEnv
InMemoryEnv	github/leveldb-1.18/helpers/memenv/memenv.cc	/^class InMemoryEnv : public EnvWrapper {$/;"	c	namespace:leveldb::__anon25	file:
Increment	github/leveldb-1.18/db/db_test.cc	/^  void Increment() {$/;"	f	class:leveldb::__anon14::AtomicCounter
Increment	github/leveldb-1.18/table/table_test.cc	/^static void Increment(const Comparator* cmp, std::string* key) {$/;"	f	namespace:leveldb
IncrementBy	github/leveldb-1.18/db/db_test.cc	/^  void IncrementBy(int count) {$/;"	f	class:leveldb::__anon14::AtomicCounter
IncrementByte	github/leveldb-1.18/db/log_test.cc	/^  void IncrementByte(int offset, int delta) {$/;"	f	class:leveldb::log::LogTest
InfoLogFileName	github/leveldb-1.18/db/filename.cc	/^std::string InfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
Init	github/leveldb-1.18/table/table_test.cc	/^  void Init(const TestArgs& args) {$/;"	f	class:leveldb::Harness
Init	study/Impala/runtime/timestamp-parse-util.cpp	/^void TimestampParser::Init() {$/;"	f	class:impala::TimestampParser
Init	test_getline.cpp	/^            class Init$/;"	c	class:std::ios_base	file:
InitDataBlock	github/leveldb-1.18/table/two_level_iterator.cc	/^void TwoLevelIterator::InitDataBlock() {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
InitDefaultEnv	github/leveldb-1.18/util/env_posix.cc	/^static void InitDefaultEnv() { default_env = new PosixEnv; }$/;"	f	namespace:leveldb
InitModule	github/leveldb-1.18/util/comparator.cc	/^static void InitModule() {$/;"	f	namespace:leveldb
InitOnce	github/leveldb-1.18/port/port_posix.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f	namespace:leveldb::port
Insert	github/leveldb-1.18/db/skiplist.h	/^void SkipList<Key,Comparator>::Insert(const Key& key) {$/;"	f	class:leveldb::SkipList
Insert	github/leveldb-1.18/util/cache.cc	/^  LRUHandle* Insert(LRUHandle* h) {$/;"	f	class:leveldb::__anon27::HandleTable
Insert	github/leveldb-1.18/util/cache.cc	/^  virtual Handle* Insert(const Slice& key, void* value, size_t charge,$/;"	f	class:leveldb::__anon27::ShardedLRUCache
Insert	github/leveldb-1.18/util/cache.cc	/^Cache::Handle* LRUCache::Insert($/;"	f	class:leveldb::__anon27::LRUCache
Insert	github/leveldb-1.18/util/cache_test.cc	/^  void Insert(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
Insert	github/leveldb-1.18/util/env_posix.cc	/^  bool Insert(const std::string& fname) {$/;"	f	class:leveldb::__anon32::PosixLockTable
InsertInto	github/leveldb-1.18/db/write_batch.cc	/^Status WriteBatchInternal::InsertInto(const WriteBatch* b,$/;"	f	class:leveldb::WriteBatchInternal
InsertSort	work/test_job/day10/SortTime.cpp	/^void SortTime::InsertSort()$/;"	f	class:SortTime
InsertSort	work/test_job/sort/src/SortTime.cpp	/^void SortTime::InsertSort()$/;"	f	class:SortTime
InsertSort	work/test_job/sort_job/SortTime.cpp	/^void SortTime::InsertSort()$/;"	f	class:SortTime
InstallCompactionResults	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::InstallCompactionResults(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
IntMonthsBetween	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::IntMonthsBetween(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
IntSLLNode	study/List/single-linked/int_s_l_l_node.h	/^        IntSLLNode() {$/;"	f	class:IntSLLNode
IntSLLNode	study/List/single-linked/int_s_l_l_node.h	/^        IntSLLNode(int el, IntSLLNode *ptr = 0) {$/;"	f	class:IntSLLNode
IntSLLNode	study/List/single-linked/int_s_l_l_node.h	/^class IntSLLNode {$/;"	c
InternalFilterPolicy	github/leveldb-1.18/db/dbformat.h	/^  explicit InternalFilterPolicy(const FilterPolicy* p) : user_policy_(p) { }$/;"	f	class:leveldb::InternalFilterPolicy
InternalFilterPolicy	github/leveldb-1.18/db/dbformat.h	/^class InternalFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb
InternalGet	github/leveldb-1.18/table/table.cc	/^Status Table::InternalGet(const ReadOptions& options, const Slice& k,$/;"	f	class:leveldb::Table
InternalKey	github/leveldb-1.18/db/dbformat.h	/^  InternalKey() { }   \/\/ Leave rep_ as empty to indicate it is invalid$/;"	f	class:leveldb::InternalKey
InternalKey	github/leveldb-1.18/db/dbformat.h	/^  InternalKey(const Slice& user_key, SequenceNumber s, ValueType t) {$/;"	f	class:leveldb::InternalKey
InternalKey	github/leveldb-1.18/db/dbformat.h	/^class InternalKey {$/;"	c	namespace:leveldb
InternalKeyComparator	github/leveldb-1.18/db/dbformat.h	/^  explicit InternalKeyComparator(const Comparator* c) : user_comparator_(c) { }$/;"	f	class:leveldb::InternalKeyComparator
InternalKeyComparator	github/leveldb-1.18/db/dbformat.h	/^class InternalKeyComparator : public Comparator {$/;"	c	namespace:leveldb
InternalKeyEncodingLength	github/leveldb-1.18/db/dbformat.h	/^inline size_t InternalKeyEncodingLength(const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
InvalidArgument	github/leveldb-1.18/include/leveldb/status.h	/^  static Status InvalidArgument(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Is	github/leveldb-1.18/util/testharness.h	/^  Tester& Is(bool b, const char* msg) {$/;"	f	class:leveldb::test::Tester
IsBaseLevelForKey	github/leveldb-1.18/db/version_set.cc	/^bool Compaction::IsBaseLevelForKey(const Slice& user_key) {$/;"	f	class:leveldb::Compaction
IsCorruption	github/leveldb-1.18/include/leveldb/status.h	/^  bool IsCorruption() const { return code() == kCorruption; }$/;"	f	class:leveldb::Status
IsIOError	github/leveldb-1.18/include/leveldb/status.h	/^  bool IsIOError() const { return code() == kIOError; }$/;"	f	class:leveldb::Status
IsLeapYear	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsLeapYear(int year) {$/;"	f	namespace:impala
IsNotFound	github/leveldb-1.18/include/leveldb/status.h	/^  bool IsNotFound() const { return code() == kNotFound; }$/;"	f	class:leveldb::Status
IsOk	github/leveldb-1.18/util/testharness.h	/^  Tester& IsOk(const Status& s) {$/;"	f	class:leveldb::test::Tester
IsOverMaxInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^bool IsOverMaxInterval(const int64_t count) {$/;"	f	namespace:impala
IsOverMaxInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsOverMaxInterval<Days>(const int64_t val) {$/;"	f	namespace:impala
IsOverMaxInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsOverMaxInterval<Hours>(const int64_t val) {$/;"	f	namespace:impala
IsOverMaxInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsOverMaxInterval<Microseconds>(const int64_t val) {$/;"	f	namespace:impala
IsOverMaxInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsOverMaxInterval<Milliseconds>(const int64_t val) {$/;"	f	namespace:impala
IsOverMaxInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsOverMaxInterval<Minutes>(const int64_t val) {$/;"	f	namespace:impala
IsOverMaxInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsOverMaxInterval<Months>(const int64_t val) {$/;"	f	namespace:impala
IsOverMaxInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsOverMaxInterval<Nanoseconds>(const int64_t val) {$/;"	f	namespace:impala
IsOverMaxInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsOverMaxInterval<Seconds>(const int64_t val) {$/;"	f	namespace:impala
IsOverMaxInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsOverMaxInterval<Weeks>(const int64_t val) {$/;"	f	namespace:impala
IsOverMaxInterval	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsOverMaxInterval<Years>(const int64_t val) {$/;"	f	namespace:impala
IsTrivialMove	github/leveldb-1.18/db/version_set.cc	/^bool Compaction::IsTrivialMove() const {$/;"	f	class:leveldb::Compaction
IsUnsupportedYear	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^inline bool IsUnsupportedYear(int64_t year) {$/;"	f	namespace:impala
IsValidKey	github/leveldb-1.18/db/skiplist_test.cc	/^  static bool IsValidKey(Key k) {$/;"	f	class:leveldb::ConcurrentTest	file:
IsValidTZOffset	study/Impala/runtime/timestamp-parse-util.cpp	/^bool TimestampParser::IsValidTZOffset(const char* str_begin, const char* str_end) {$/;"	f	class:impala::TimestampParser
Issue178	github/leveldb-1.18/issues/issue178_test.cc	/^class Issue178 { };$/;"	c	namespace:__anon4	file:
Issue200	github/leveldb-1.18/issues/issue200_test.cc	/^class Issue200 { };$/;"	c	namespace:leveldb	file:
Iter	github/leveldb-1.18/table/block.cc	/^  Iter(const Comparator* comparator,$/;"	f	class:leveldb::Block::Iter
Iter	github/leveldb-1.18/table/block.cc	/^class Block::Iter : public Iterator {$/;"	c	class:leveldb::Block	file:
IterState	github/leveldb-1.18/db/db_impl.cc	/^struct IterState {$/;"	s	namespace:leveldb::__anon8	file:
IterStatus	github/leveldb-1.18/db/db_test.cc	/^  std::string IterStatus(Iterator* iter) {$/;"	f	class:leveldb::DBTest
Iterate	github/leveldb-1.18/db/write_batch.cc	/^Status WriteBatch::Iterate(Handler* handler) const {$/;"	f	class:leveldb::WriteBatch
Iterator	github/leveldb-1.18/db/skiplist.h	/^  class Iterator {$/;"	c	class:leveldb::SkipList
Iterator	github/leveldb-1.18/db/skiplist.h	/^inline SkipList<Key,Comparator>::Iterator::Iterator(const SkipList* list) {$/;"	f	class:leveldb::SkipList::Iterator
Iterator	github/leveldb-1.18/include/leveldb/iterator.h	/^class Iterator {$/;"	c	namespace:leveldb
Iterator	github/leveldb-1.18/table/iterator.cc	/^    Iterator::Iterator() {$/;"	f	class:leveldb::Iterator
IteratorWrapper	github/leveldb-1.18/table/iterator_wrapper.h	/^  IteratorWrapper(): iter_(NULL), valid_(false) { }$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	github/leveldb-1.18/table/iterator_wrapper.h	/^  explicit IteratorWrapper(Iterator* iter): iter_(NULL) {$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	github/leveldb-1.18/table/iterator_wrapper.h	/^class IteratorWrapper {$/;"	c	namespace:leveldb
Jiafeimao	study/dada/fenshu/virtual.cpp	/^class Jiafeimao : public Animal{$/;"	c	file:
K	github/leveldb-1.18/db/skiplist_test.cc	/^  static const uint32_t K = 4;$/;"	m	class:leveldb::ConcurrentTest	file:
K	github/leveldb-1.18/db/skiplist_test.cc	/^const uint32_t ConcurrentTest::K;$/;"	m	class:leveldb::ConcurrentTest	file:
KVMap	github/leveldb-1.18/db/db_test.cc	/^typedef std::map<std::string, std::string> KVMap;$/;"	t	namespace:leveldb::__anon16	file:
KVMap	github/leveldb-1.18/table/table_test.cc	/^typedef std::map<std::string, std::string, STLLessThan> KVMap;$/;"	t	namespace:leveldb	file:
Key	github/leveldb-1.18/db/autocompact_test.cc	/^  std::string Key(int i) {$/;"	f	class:leveldb::AutoCompactTest
Key	github/leveldb-1.18/db/corruption_test.cc	/^  Slice Key(int i, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Key	github/leveldb-1.18/db/db_test.cc	/^static std::string Key(int i) {$/;"	f	namespace:leveldb
Key	github/leveldb-1.18/db/skiplist_test.cc	/^typedef uint64_t Key;$/;"	t	namespace:leveldb	file:
Key	github/leveldb-1.18/util/bloom_test.cc	/^static Slice Key(int i, char* buffer) {$/;"	f	namespace:leveldb
Key1	github/leveldb-1.18/issues/issue178_test.cc	/^std::string Key1(int i) {$/;"	f	namespace:__anon4
Key2	github/leveldb-1.18/issues/issue178_test.cc	/^std::string Key2(int i) {$/;"	f	namespace:__anon4
KeyComparator	github/leveldb-1.18/db/memtable.h	/^    explicit KeyComparator(const InternalKeyComparator& c) : comparator(c) { }$/;"	f	struct:leveldb::MemTable::KeyComparator
KeyComparator	github/leveldb-1.18/db/memtable.h	/^  struct KeyComparator {$/;"	s	class:leveldb::MemTable
KeyConvertingIterator	github/leveldb-1.18/table/table_test.cc	/^  explicit KeyConvertingIterator(Iterator* iter) : iter_(iter) { }$/;"	f	class:leveldb::KeyConvertingIterator
KeyConvertingIterator	github/leveldb-1.18/table/table_test.cc	/^class KeyConvertingIterator: public Iterator {$/;"	c	namespace:leveldb	file:
KeyIsAfterNode	github/leveldb-1.18/db/skiplist.h	/^bool SkipList<Key,Comparator>::KeyIsAfterNode(const Key& key, Node* n) const {$/;"	f	class:leveldb::SkipList
KeyMayMatch	github/leveldb-1.18/db/c.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	struct:leveldb_filterpolicy_t
KeyMayMatch	github/leveldb-1.18/db/dbformat.cc	/^bool InternalFilterPolicy::KeyMayMatch(const Slice& key, const Slice& f) const {$/;"	f	class:leveldb::InternalFilterPolicy
KeyMayMatch	github/leveldb-1.18/table/filter_block.cc	/^bool FilterBlockReader::KeyMayMatch(uint64_t block_offset, const Slice& key) {$/;"	f	class:leveldb::FilterBlockReader
KeyMayMatch	github/leveldb-1.18/table/filter_block_test.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	class:leveldb::TestHashFilter
KeyMayMatch	github/leveldb-1.18/util/bloom.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {$/;"	f	class:leveldb::__anon31::BloomFilterPolicy
LENGTH	work/test_job/day12/data_packet/include/DataPacket.h	17;"	d
LENGTH	work/test_job/day16/data_packet/include/DataPacket.h	17;"	d
LENGTH	work/test_job/day17/data_packet/include/DataPacket.h	17;"	d
LEVELDB_HAVE_MEMORY_BARRIER	github/leveldb-1.18/port/atomic_pointer.h	215;"	d
LEVELDB_HAVE_MEMORY_BARRIER	github/leveldb-1.18/port/atomic_pointer.h	50;"	d
LEVELDB_ONCE_INIT	github/leveldb-1.18/port/port_example.h	70;"	d
LEVELDB_ONCE_INIT	github/leveldb-1.18/port/port_posix.h	113;"	d
LE_LOAD32	github/leveldb-1.18/util/crc32c.cc	/^static inline uint32_t LE_LOAD32(const uint8_t *p) {$/;"	f	namespace:leveldb::crc32c
LIBOBJECTS	github/leveldb-1.18/Makefile	/^LIBOBJECTS = $(SOURCES:.cc=.o)$/;"	m
LIBRARY	github/leveldb-1.18/Makefile	/^LIBRARY = libleveldb.a$/;"	m
LLVM_CLASS_NAME	study/Impala/runtime/timestamp-value.cpp	/^    const char* TimestampValue::LLVM_CLASS_NAME = "class.impala::TimestampValue";$/;"	m	class:impala::TimestampValue	file:
LLVM_CLASS_NAME	study/Impala/runtime/timestamp-value.h	/^            static const char* LLVM_CLASS_NAME;$/;"	m	class:impala::TimestampValue
LOCKABLE	github/leveldb-1.18/port/thread_annotations.h	29;"	d
LOCKS_EXCLUDED	github/leveldb-1.18/port/thread_annotations.h	21;"	d
LOCK_RETURNED	github/leveldb-1.18/port/thread_annotations.h	25;"	d
LRUCache	github/leveldb-1.18/util/cache.cc	/^LRUCache::LRUCache()$/;"	f	class:leveldb::__anon27::LRUCache
LRUCache	github/leveldb-1.18/util/cache.cc	/^class LRUCache {$/;"	c	namespace:leveldb::__anon27	file:
LRUHandle	github/leveldb-1.18/util/cache.cc	/^struct LRUHandle {$/;"	s	namespace:leveldb::__anon27	file:
LRU_Append	github/leveldb-1.18/util/cache.cc	/^void LRUCache::LRU_Append(LRUHandle* e) {$/;"	f	class:leveldb::__anon27::LRUCache
LRU_Remove	github/leveldb-1.18/util/cache.cc	/^void LRUCache::LRU_Remove(LRUHandle* e) {$/;"	f	class:leveldb::__anon27::LRUCache
LastRecordOffset	github/leveldb-1.18/db/log_reader.cc	/^uint64_t Reader::LastRecordOffset() {$/;"	f	class:leveldb::log::Reader
LastSequence	github/leveldb-1.18/db/version_set.h	/^  uint64_t LastSequence() const { return last_sequence_; }$/;"	f	class:leveldb::VersionSet
LevelFileNumIterator	github/leveldb-1.18/db/version_set.cc	/^  LevelFileNumIterator(const InternalKeyComparator& icmp,$/;"	f	class:leveldb::Version::LevelFileNumIterator
LevelFileNumIterator	github/leveldb-1.18/db/version_set.cc	/^class Version::LevelFileNumIterator : public Iterator {$/;"	c	class:leveldb::Version	file:
LevelState	github/leveldb-1.18/db/version_set.cc	/^  struct LevelState {$/;"	s	class:leveldb::VersionSet::Builder	file:
LevelSummary	github/leveldb-1.18/db/version_set.cc	/^const char* VersionSet::LevelSummary(LevelSummaryStorage* scratch) const {$/;"	f	class:leveldb::VersionSet
LevelSummaryStorage	github/leveldb-1.18/db/version_set.h	/^  struct LevelSummaryStorage {$/;"	s	class:leveldb::VersionSet
LocalTime	study/Impala/runtime/timestamp-value.h	/^            static TimestampValue LocalTime() {$/;"	f	class:impala::TimestampValue
Lock	github/leveldb-1.18/port/port_posix.cc	/^void Mutex::Lock() { PthreadCall("lock", pthread_mutex_lock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
LockFile	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon25::InMemoryEnv
LockFile	github/leveldb-1.18/include/leveldb/env.h	/^  Status LockFile(const std::string& f, FileLock** l) {$/;"	f	class:leveldb::EnvWrapper
LockFile	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon32::PosixEnv
LockFileName	github/leveldb-1.18/db/filename.cc	/^std::string LockFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
LockOrUnlock	github/leveldb-1.18/util/env_posix.cc	/^static int LockOrUnlock(int fd, bool lock) {$/;"	f	namespace:leveldb::__anon32
Log	github/leveldb-1.18/util/env.cc	/^void Log(Logger* info_log, const char* format, ...) {$/;"	f	namespace:leveldb
LogAndApply	github/leveldb-1.18/db/version_set.cc	/^Status VersionSet::LogAndApply(VersionEdit* edit, port::Mutex* mu) {$/;"	f	class:leveldb::VersionSet
LogFileName	github/leveldb-1.18/db/filename.cc	/^std::string LogFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
LogNumber	github/leveldb-1.18/db/version_set.h	/^  uint64_t LogNumber() const { return log_number_; }$/;"	f	class:leveldb::VersionSet
LogTest	github/leveldb-1.18/db/log_test.cc	/^  LogTest() : reading_(false),$/;"	f	class:leveldb::log::LogTest
LogTest	github/leveldb-1.18/db/log_test.cc	/^class LogTest {$/;"	c	namespace:leveldb::log	file:
Logger	github/leveldb-1.18/include/leveldb/env.h	/^  Logger() { }$/;"	f	class:leveldb::Logger
Logger	github/leveldb-1.18/include/leveldb/env.h	/^class Logger {$/;"	c	namespace:leveldb
Logv	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual void Logv(const char* format, va_list ap) { }$/;"	f	class:leveldb::__anon25::NoOpLogger
Logv	github/leveldb-1.18/util/posix_logger.h	/^  virtual void Logv(const char* format, va_list ap) {$/;"	f	class:leveldb::PosixLogger
Lookup	github/leveldb-1.18/util/cache.cc	/^  LRUHandle* Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon27::HandleTable
Lookup	github/leveldb-1.18/util/cache.cc	/^  virtual Handle* Lookup(const Slice& key) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
Lookup	github/leveldb-1.18/util/cache.cc	/^Cache::Handle* LRUCache::Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon27::LRUCache
Lookup	github/leveldb-1.18/util/cache_test.cc	/^  int Lookup(int key) {$/;"	f	class:leveldb::CacheTest
LookupKey	github/leveldb-1.18/db/dbformat.cc	/^LookupKey::LookupKey(const Slice& user_key, SequenceNumber s) {$/;"	f	class:leveldb::LookupKey
LookupKey	github/leveldb-1.18/db/dbformat.h	/^class LookupKey {$/;"	c	namespace:leveldb
MAX_DAY_INTERVAL	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const int64_t TimestampFunctions::MAX_DAY_INTERVAL =$/;"	m	class:impala::TimestampFunctions	file:
MAX_DAY_INTERVAL	study/Impala/timestamp_src/timestamp-functions.h	/^            static const int64_t MAX_DAY_INTERVAL;$/;"	m	class:impala::TimestampFunctions
MAX_HOUR_INTERVAL	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const int64_t TimestampFunctions::MAX_HOUR_INTERVAL =$/;"	m	class:impala::TimestampFunctions	file:
MAX_HOUR_INTERVAL	study/Impala/timestamp_src/timestamp-functions.h	/^            static const int64_t MAX_HOUR_INTERVAL;$/;"	m	class:impala::TimestampFunctions
MAX_MICRO_INTERVAL	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const int64_t TimestampFunctions::MAX_MICRO_INTERVAL =$/;"	m	class:impala::TimestampFunctions	file:
MAX_MICRO_INTERVAL	study/Impala/timestamp_src/timestamp-functions.h	/^            static const int64_t MAX_MICRO_INTERVAL;$/;"	m	class:impala::TimestampFunctions
MAX_MILLI_INTERVAL	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const int64_t TimestampFunctions::MAX_MILLI_INTERVAL =$/;"	m	class:impala::TimestampFunctions	file:
MAX_MILLI_INTERVAL	study/Impala/timestamp_src/timestamp-functions.h	/^            static const int64_t MAX_MILLI_INTERVAL;$/;"	m	class:impala::TimestampFunctions
MAX_MINUTE_INTERVAL	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const int64_t TimestampFunctions::MAX_MINUTE_INTERVAL =$/;"	m	class:impala::TimestampFunctions	file:
MAX_MINUTE_INTERVAL	study/Impala/timestamp_src/timestamp-functions.h	/^            static const int64_t MAX_MINUTE_INTERVAL;$/;"	m	class:impala::TimestampFunctions
MAX_MONTH_INTERVAL	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const int64_t TimestampFunctions::MAX_MONTH_INTERVAL =$/;"	m	class:impala::TimestampFunctions	file:
MAX_MONTH_INTERVAL	study/Impala/timestamp_src/timestamp-functions.h	/^            static const int64_t MAX_MONTH_INTERVAL;$/;"	m	class:impala::TimestampFunctions
MAX_SEC_INTERVAL	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const int64_t TimestampFunctions::MAX_SEC_INTERVAL =$/;"	m	class:impala::TimestampFunctions	file:
MAX_SEC_INTERVAL	study/Impala/timestamp_src/timestamp-functions.h	/^            static const int64_t MAX_SEC_INTERVAL;$/;"	m	class:impala::TimestampFunctions
MAX_WEEK_INTERVAL	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const int64_t TimestampFunctions::MAX_WEEK_INTERVAL =$/;"	m	class:impala::TimestampFunctions	file:
MAX_WEEK_INTERVAL	study/Impala/timestamp_src/timestamp-functions.h	/^            static const int64_t MAX_WEEK_INTERVAL;$/;"	m	class:impala::TimestampFunctions
MAX_YEAR	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const int64_t TimestampFunctions::MAX_YEAR = 10000;$/;"	m	class:impala::TimestampFunctions	file:
MAX_YEAR	study/Impala/timestamp_src/timestamp-functions.h	/^            static const int64_t MAX_YEAR;$/;"	m	class:impala::TimestampFunctions
MAX_YEAR_INTERVAL	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const int64_t TimestampFunctions::MAX_YEAR_INTERVAL =$/;"	m	class:impala::TimestampFunctions	file:
MAX_YEAR_INTERVAL	study/Impala/timestamp_src/timestamp-functions.h	/^            static const int64_t MAX_YEAR_INTERVAL;$/;"	m	class:impala::TimestampFunctions
MEMENVLIBRARY	github/leveldb-1.18/Makefile	/^MEMENVLIBRARY = libmemenv.a$/;"	m
MEMENVOBJECTS	github/leveldb-1.18/Makefile	/^MEMENVOBJECTS = $(MEMENV_SOURCES:.cc=.o)$/;"	m
MEMENV_SOURCES	github/leveldb-1.18/build_config.mk	/^MEMENV_SOURCES=helpers\/memenv\/memenv.cc$/;"	m
MEMTABLE_TEST	github/leveldb-1.18/table/table_test.cc	/^  MEMTABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
MINUTE_IN_HOUR	study/Impala/runtime/timestamp-parse-util.h	/^        MINUTE_IN_HOUR,$/;"	e	enum:impala::DateTimeFormatTokenType
MIN_YEAR	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const int64_t TimestampFunctions::MIN_YEAR = Date(min_date_time).year();$/;"	m	class:impala::TimestampFunctions	file:
MIN_YEAR	study/Impala/timestamp_src/timestamp-functions.h	/^            static const int64_t MIN_YEAR;$/;"	m	class:impala::TimestampFunctions
MONDAY	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const char* TimestampFunctions::MONDAY = "Monday";$/;"	m	class:impala::TimestampFunctions	file:
MONDAY	study/Impala/timestamp_src/timestamp-functions.h	/^            static const char* MONDAY;$/;"	m	class:impala::TimestampFunctions
MONTH_IN_YEAR	study/Impala/runtime/timestamp-parse-util.h	/^        MONTH_IN_YEAR,$/;"	e	enum:impala::DateTimeFormatTokenType
MONTH_IN_YEAR_SLT	study/Impala/runtime/timestamp-parse-util.h	/^        MONTH_IN_YEAR_SLT,$/;"	e	enum:impala::DateTimeFormatTokenType
MTState	github/leveldb-1.18/db/db_test.cc	/^struct MTState {$/;"	s	namespace:leveldb::__anon15	file:
MTThread	github/leveldb-1.18/db/db_test.cc	/^struct MTThread {$/;"	s	namespace:leveldb::__anon15	file:
MTThreadBody	github/leveldb-1.18/db/db_test.cc	/^static void MTThreadBody(void* arg) {$/;"	f	namespace:leveldb::__anon15
MakeFileName	github/leveldb-1.18/db/filename.cc	/^static std::string MakeFileName(const std::string& name, uint64_t number,$/;"	f	namespace:leveldb
MakeInputIterator	github/leveldb-1.18/db/version_set.cc	/^Iterator* VersionSet::MakeInputIterator(Compaction* c) {$/;"	f	class:leveldb::VersionSet
MakeKey	github/leveldb-1.18/db/db_test.cc	/^std::string MakeKey(unsigned int num) {$/;"	f	namespace:leveldb
MakeKey	github/leveldb-1.18/db/skiplist_test.cc	/^  static Key MakeKey(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
MakeRoomForWrite	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::MakeRoomForWrite(bool force) {$/;"	f	class:leveldb::DBImpl
MakeTables	github/leveldb-1.18/db/db_test.cc	/^  void MakeTables(int n, const std::string& small, const std::string& large) {$/;"	f	class:leveldb::DBTest
ManifestFileNumber	github/leveldb-1.18/db/version_set.h	/^  uint64_t ManifestFileNumber() const { return manifest_file_number_; }$/;"	f	class:leveldb::VersionSet
Manipulator	work/person_design/include/manipulator.h	/^        Manipulator() {}$/;"	f	class:Manipulator
Manipulator	work/person_design/include/manipulator.h	/^        Manipulator(string name_t):m_name(name_t) {}$/;"	f	class:Manipulator
Manipulator	work/person_design/include/manipulator.h	/^class Manipulator{$/;"	c
ManualCompaction	github/leveldb-1.18/db/db_impl.h	/^  struct ManualCompaction {$/;"	s	class:leveldb::DBImpl
MarkFileNumberUsed	github/leveldb-1.18/db/version_set.cc	/^void VersionSet::MarkFileNumberUsed(uint64_t number) {$/;"	f	class:leveldb::VersionSet
Mask	github/leveldb-1.18/util/crc32c.h	/^inline uint32_t Mask(uint32_t crc) {$/;"	f	namespace:leveldb::crc32c
MatchError	github/leveldb-1.18/db/log_test.cc	/^  std::string MatchError(const std::string& msg) const {$/;"	f	class:leveldb::log::LogTest
Matches	github/leveldb-1.18/util/bloom_test.cc	/^  bool Matches(const Slice& s) {$/;"	f	class:leveldb::BloomTest
MaxBytesForLevel	github/leveldb-1.18/db/version_set.cc	/^static double MaxBytesForLevel(int level) {$/;"	f	namespace:leveldb
MaxFileSizeForLevel	github/leveldb-1.18/db/version_set.cc	/^static uint64_t MaxFileSizeForLevel(int level) {$/;"	f	namespace:leveldb
MaxNextLevelOverlappingBytes	github/leveldb-1.18/db/version_set.cc	/^int64_t VersionSet::MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::VersionSet
MaxOutputFileSize	github/leveldb-1.18/db/version_set.h	/^  uint64_t MaxOutputFileSize() const { return max_output_file_size_; }$/;"	f	class:leveldb::Compaction
MaybeAddFile	github/leveldb-1.18/db/version_set.cc	/^  void MaybeAddFile(Version* v, int level, FileMetaData* f) {$/;"	f	class:leveldb::VersionSet::Builder
MaybeIgnoreError	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::MaybeIgnoreError(Status* s) const {$/;"	f	class:leveldb::DBImpl
MaybeScheduleCompaction	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::MaybeScheduleCompaction() {$/;"	f	class:leveldb::DBImpl
Median	github/leveldb-1.18/util/histogram.cc	/^double Histogram::Median() const {$/;"	f	class:leveldb::Histogram
MemEnvTest	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^  MemEnvTest()$/;"	f	class:leveldb::MemEnvTest
MemEnvTest	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^class MemEnvTest {$/;"	c	namespace:leveldb	file:
MemTable	github/leveldb-1.18/db/memtable.cc	/^MemTable::MemTable(const InternalKeyComparator& cmp)$/;"	f	class:leveldb::MemTable
MemTable	github/leveldb-1.18/db/memtable.h	/^class MemTable {$/;"	c	namespace:leveldb
MemTableConstructor	github/leveldb-1.18/table/table_test.cc	/^  explicit MemTableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::MemTableConstructor
MemTableConstructor	github/leveldb-1.18/table/table_test.cc	/^class MemTableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
MemTableInserter	github/leveldb-1.18/db/write_batch.cc	/^class MemTableInserter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon13	file:
MemTableIterator	github/leveldb-1.18/db/memtable.cc	/^  explicit MemTableIterator(MemTable::Table* table) : iter_(table) { }$/;"	f	class:leveldb::MemTableIterator
MemTableIterator	github/leveldb-1.18/db/memtable.cc	/^class MemTableIterator: public Iterator {$/;"	c	namespace:leveldb	file:
MemTableTest	github/leveldb-1.18/table/table_test.cc	/^class MemTableTest { };$/;"	c	namespace:leveldb	file:
MemoryUsage	github/leveldb-1.18/util/arena.h	/^  size_t MemoryUsage() const {$/;"	f	class:leveldb::Arena
Merge	github/leveldb-1.18/db/db_bench.cc	/^  void Merge(const Stats& other) {$/;"	f	class:leveldb::__anon7::Stats
Merge	github/leveldb-1.18/util/histogram.cc	/^void Histogram::Merge(const Histogram& other) {$/;"	f	class:leveldb::Histogram
MergingIterator	github/leveldb-1.18/table/merger.cc	/^  MergingIterator(const Comparator* comparator, Iterator** children, int n)$/;"	f	class:leveldb::__anon20::MergingIterator
MergingIterator	github/leveldb-1.18/table/merger.cc	/^class MergingIterator : public Iterator {$/;"	c	namespace:leveldb::__anon20	file:
Microseconds	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^typedef boost::posix_time::microseconds Microseconds;$/;"	t	file:
MidSchoolStu	work/person_design/include/mid_school_stu.h	/^		MidSchoolStu() {}$/;"	f	class:MidSchoolStu
MidSchoolStu	work/person_design/include/mid_school_stu.h	/^		MidSchoolStu(const MidSchoolStu& obj) : Student(obj) {}$/;"	f	class:MidSchoolStu
MidSchoolStu	work/person_design/include/mid_school_stu.h	/^		MidSchoolStu(string name_t, int age_t, string ID_t, bool gender_t,$/;"	f	class:MidSchoolStu
MidSchoolStu	work/person_design/include/mid_school_stu.h	/^class MidSchoolStu : public Student {$/;"	c
Millisecond	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::Millisecond(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
Milliseconds	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^typedef boost::posix_time::milliseconds Milliseconds;$/;"	t	file:
Minute	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::Minute(FunctionContext* context, const TimestampVal& ts_val) {$/;"	f	class:impala::TimestampFunctions
Minutes	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^typedef boost::posix_time::minutes Minutes;$/;"	t	file:
MmapLimiter	github/leveldb-1.18/util/env_posix.cc	/^  MmapLimiter() {$/;"	f	class:leveldb::__anon32::MmapLimiter
MmapLimiter	github/leveldb-1.18/util/env_posix.cc	/^class MmapLimiter {$/;"	c	namespace:leveldb::__anon32	file:
ModelDB	github/leveldb-1.18/db/db_test.cc	/^  explicit ModelDB(const Options& options): options_(options) { }$/;"	f	class:leveldb::ModelDB
ModelDB	github/leveldb-1.18/db/db_test.cc	/^class ModelDB: public DB {$/;"	c	namespace:leveldb	file:
ModelIter	github/leveldb-1.18/db/db_test.cc	/^    ModelIter(const KVMap* map, bool owned)$/;"	f	class:leveldb::ModelDB::ModelIter
ModelIter	github/leveldb-1.18/db/db_test.cc	/^  class ModelIter: public Iterator {$/;"	c	class:leveldb::ModelDB	file:
ModelSnapshot	github/leveldb-1.18/db/db_test.cc	/^  class ModelSnapshot : public Snapshot {$/;"	c	class:leveldb::ModelDB	file:
Month	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::Month(FunctionContext* context, const TimestampVal& ts_val) {$/;"	f	class:impala::TimestampFunctions
Months	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^typedef boost::gregorian::months Months;$/;"	t	file:
MonthsBetween	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^DoubleVal TimestampFunctions::MonthsBetween(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
Mutex	github/leveldb-1.18/port/port_example.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	github/leveldb-1.18/port/port_posix.cc	/^Mutex::Mutex() { PthreadCall("init mutex", pthread_mutex_init(&mu_, NULL)); }$/;"	f	class:leveldb::port::Mutex
Mutex	github/leveldb-1.18/port/port_posix.h	/^class Mutex {$/;"	c	namespace:leveldb::port
MutexLock	github/leveldb-1.18/util/mutexlock.h	/^class SCOPED_LOCKABLE MutexLock {$/;"	c	namespace:leveldb
NONAME_OBJ_H_	study/dada/noname_obj/const_obj.h	5;"	d
NONAME_OBJ_H_	study/dada/noname_obj/noname_obj.h	5;"	d
NO_THREAD_SAFETY_ANALYSIS	github/leveldb-1.18/port/thread_annotations.h	57;"	d
Name	github/leveldb-1.18/db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_comparator_t
Name	github/leveldb-1.18/db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_filterpolicy_t
Name	github/leveldb-1.18/db/dbformat.cc	/^const char* InternalFilterPolicy::Name() const {$/;"	f	class:leveldb::InternalFilterPolicy
Name	github/leveldb-1.18/db/dbformat.cc	/^const char* InternalKeyComparator::Name() const {$/;"	f	class:leveldb::InternalKeyComparator
Name	github/leveldb-1.18/table/filter_block_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::TestHashFilter
Name	github/leveldb-1.18/table/table_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon21::ReverseKeyComparator
Name	github/leveldb-1.18/util/bloom.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon31::BloomFilterPolicy
Name	github/leveldb-1.18/util/comparator.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon30::BytewiseComparatorImpl
Nanoseconds	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^typedef boost::posix_time::nanoseconds Nanoseconds;$/;"	t	file:
NeedsCompaction	github/leveldb-1.18/db/version_set.h	/^  bool NeedsCompaction() const {$/;"	f	class:leveldb::VersionSet
New	github/leveldb-1.18/db/snapshot.h	/^  const SnapshotImpl* New(SequenceNumber seq) {$/;"	f	class:leveldb::SnapshotList
NewBloomFilterPolicy	github/leveldb-1.18/util/bloom.cc	/^const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {$/;"	f	namespace:leveldb
NewConcatenatingIterator	github/leveldb-1.18/db/version_set.cc	/^Iterator* Version::NewConcatenatingIterator(const ReadOptions& options,$/;"	f	class:leveldb::Version
NewDB	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::NewDB() {$/;"	f	class:leveldb::DBImpl
NewDB	github/leveldb-1.18/table/table_test.cc	/^  void NewDB() {$/;"	f	class:leveldb::DBConstructor	file:
NewDBIterator	github/leveldb-1.18/db/db_iter.cc	/^Iterator* NewDBIterator($/;"	f	namespace:leveldb
NewEmptyIterator	github/leveldb-1.18/table/iterator.cc	/^    Iterator* NewEmptyIterator() {$/;"	f	namespace:leveldb
NewErrorIterator	github/leveldb-1.18/table/iterator.cc	/^    Iterator* NewErrorIterator(const Status& status) {$/;"	f	namespace:leveldb
NewFileNumber	github/leveldb-1.18/db/version_set.h	/^  uint64_t NewFileNumber() { return next_file_number_++; }$/;"	f	class:leveldb::VersionSet
NewId	github/leveldb-1.18/util/cache.cc	/^  virtual uint64_t NewId() {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
NewInternalIterator	github/leveldb-1.18/db/db_impl.cc	/^Iterator* DBImpl::NewInternalIterator(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
NewIterator	github/leveldb-1.18/db/db_impl.cc	/^Iterator* DBImpl::NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::DBImpl
NewIterator	github/leveldb-1.18/db/db_test.cc	/^  virtual Iterator* NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::ModelDB
NewIterator	github/leveldb-1.18/db/memtable.cc	/^Iterator* MemTable::NewIterator() {$/;"	f	class:leveldb::MemTable
NewIterator	github/leveldb-1.18/db/table_cache.cc	/^Iterator* TableCache::NewIterator(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
NewIterator	github/leveldb-1.18/table/block.cc	/^Iterator* Block::NewIterator(const Comparator* cmp) {$/;"	f	class:leveldb::Block
NewIterator	github/leveldb-1.18/table/table.cc	/^Iterator* Table::NewIterator(const ReadOptions& options) const {$/;"	f	class:leveldb::Table
NewIterator	github/leveldb-1.18/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::BlockConstructor
NewIterator	github/leveldb-1.18/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::DBConstructor
NewIterator	github/leveldb-1.18/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::MemTableConstructor
NewIterator	github/leveldb-1.18/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::TableConstructor
NewLRUCache	github/leveldb-1.18/util/cache.cc	/^Cache* NewLRUCache(size_t capacity) {$/;"	f	namespace:leveldb
NewLogger	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon25::InMemoryEnv
NewLogger	github/leveldb-1.18/include/leveldb/env.h	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::EnvWrapper
NewLogger	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon32::PosixEnv
NewMemEnv	github/leveldb-1.18/helpers/memenv/memenv.cc	/^Env* NewMemEnv(Env* base_env) {$/;"	f	namespace:leveldb
NewMergingIterator	github/leveldb-1.18/table/merger.cc	/^Iterator* NewMergingIterator(const Comparator* cmp, Iterator** list, int n) {$/;"	f	namespace:leveldb
NewNode	github/leveldb-1.18/db/skiplist.h	/^SkipList<Key,Comparator>::NewNode(const Key& key, int height) {$/;"	f	class:leveldb::SkipList
NewRandomAccessFile	github/leveldb-1.18/db/db_test.cc	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewRandomAccessFile	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon25::InMemoryEnv
NewRandomAccessFile	github/leveldb-1.18/include/leveldb/env.h	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewRandomAccessFile	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon32::PosixEnv
NewSequentialFile	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon25::InMemoryEnv
NewSequentialFile	github/leveldb-1.18/include/leveldb/env.h	/^  Status NewSequentialFile(const std::string& f, SequentialFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewSequentialFile	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon32::PosixEnv
NewTableIterator	github/leveldb-1.18/db/repair.cc	/^  Iterator* NewTableIterator(const FileMetaData& meta) {$/;"	f	class:leveldb::__anon5::Repairer	file:
NewTwoLevelIterator	github/leveldb-1.18/table/two_level_iterator.cc	/^Iterator* NewTwoLevelIterator($/;"	f	namespace:leveldb
NewWritableFile	github/leveldb-1.18/db/db_test.cc	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewWritableFile	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon25::InMemoryEnv
NewWritableFile	github/leveldb-1.18/include/leveldb/env.h	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewWritableFile	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon32::PosixEnv
NewWritableFile	github/leveldb-1.18/util/testutil.h	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
NewestFirst	github/leveldb-1.18/db/version_set.cc	/^static bool NewestFirst(FileMetaData* a, FileMetaData* b) {$/;"	f	namespace:leveldb
Next	github/leveldb-1.18/db/db_iter.cc	/^void DBIter::Next() {$/;"	f	class:leveldb::__anon10::DBIter
Next	github/leveldb-1.18/db/db_test.cc	/^    virtual void Next() { ++iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Next	github/leveldb-1.18/db/memtable.cc	/^  virtual void Next() { iter_.Next(); }$/;"	f	class:leveldb::MemTableIterator
Next	github/leveldb-1.18/db/skiplist.h	/^  Node* Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
Next	github/leveldb-1.18/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Next() {$/;"	f	class:leveldb::SkipList::Iterator
Next	github/leveldb-1.18/db/version_set.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Next	github/leveldb-1.18/table/block.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Block::Iter
Next	github/leveldb-1.18/table/iterator.cc	/^                virtual void Next() { assert(false); }$/;"	f	class:leveldb::__anon18::EmptyIterator
Next	github/leveldb-1.18/table/iterator_wrapper.h	/^  void Next()               { assert(iter_); iter_->Next();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Next	github/leveldb-1.18/table/merger.cc	/^  virtual void Next() {$/;"	f	class:leveldb::__anon20::MergingIterator
Next	github/leveldb-1.18/table/table_test.cc	/^  virtual void Next() { iter_->Next(); }$/;"	f	class:leveldb::KeyConvertingIterator
Next	github/leveldb-1.18/table/two_level_iterator.cc	/^void TwoLevelIterator::Next() {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
Next	github/leveldb-1.18/util/random.h	/^  uint32_t Next() {$/;"	f	class:leveldb::Random
NextDay	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^TimestampVal TimestampFunctions::NextDay(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
NextEntryOffset	github/leveldb-1.18/table/block.cc	/^  inline uint32_t NextEntryOffset() const {$/;"	f	class:leveldb::Block::Iter	file:
NextLength	github/leveldb-1.18/util/bloom_test.cc	/^static int NextLength(int length) {$/;"	f	namespace:leveldb
NoBarrier_Load	github/leveldb-1.18/port/atomic_pointer.h	/^  inline void* NoBarrier_Load() const { return rep_; }$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Next	github/leveldb-1.18/db/skiplist.h	/^  Node* NoBarrier_Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_SetNext	github/leveldb-1.18/db/skiplist.h	/^  void NoBarrier_SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_Store	github/leveldb-1.18/port/atomic_pointer.h	/^  inline void NoBarrier_Store(void* v) { rep_ = v; }$/;"	f	class:leveldb::port::AtomicPointer
NoOpLogger	github/leveldb-1.18/helpers/memenv/memenv.cc	/^class NoOpLogger : public Logger {$/;"	c	namespace:leveldb::__anon25	file:
Node	github/leveldb-1.18/db/skiplist.h	/^  explicit Node(const Key& k) : key(k) { }$/;"	f	struct:leveldb::SkipList::Node
Node	github/leveldb-1.18/db/skiplist.h	/^struct SkipList<Key,Comparator>::Node {$/;"	s	class:leveldb::SkipList
NotFound	github/leveldb-1.18/include/leveldb/status.h	/^  static Status NotFound(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NotSupported	github/leveldb-1.18/include/leveldb/status.h	/^  static Status NotSupported(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Now	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^TimestampVal TimestampFunctions::Now(FunctionContext* context) {$/;"	f	class:impala::TimestampFunctions
NowMicros	github/leveldb-1.18/include/leveldb/env.h	/^  uint64_t NowMicros() {$/;"	f	class:leveldb::EnvWrapper
NowMicros	github/leveldb-1.18/util/env_posix.cc	/^  virtual uint64_t NowMicros() {$/;"	f	class:leveldb::__anon32::PosixEnv
NumEntries	github/leveldb-1.18/table/table_builder.cc	/^uint64_t TableBuilder::NumEntries() const {$/;"	f	class:leveldb::TableBuilder
NumFiles	github/leveldb-1.18/db/version_set.h	/^  int NumFiles(int level) const { return files_[level].size(); }$/;"	f	class:leveldb::Version
NumLevelBytes	github/leveldb-1.18/db/version_set.cc	/^int64_t VersionSet::NumLevelBytes(int level) const {$/;"	f	class:leveldb::VersionSet
NumLevelFiles	github/leveldb-1.18/db/version_set.cc	/^int VersionSet::NumLevelFiles(int level) const {$/;"	f	class:leveldb::VersionSet
NumRestarts	github/leveldb-1.18/table/block.cc	/^inline uint32_t Block::NumRestarts() const {$/;"	f	class:leveldb::Block
NumTableFilesAtLevel	github/leveldb-1.18/db/db_test.cc	/^  int NumTableFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumberString	github/leveldb-1.18/db/log_test.cc	/^static std::string NumberString(int n) {$/;"	f	namespace:leveldb::log
NumberToString	github/leveldb-1.18/util/logging.cc	/^std::string NumberToString(uint64_t num) {$/;"	f	namespace:leveldb
OBJS	work/person_design/makefile	/^OBJS=$(patsubst %.cpp,%.o,$(SRCS))$/;"	m
OBJS	work/test_job/day12/data_packet/makefile	/^OBJS=$(patsubst %.cpp,%.o,$(SRCS))$/;"	m
OBJS	work/test_job/day16/data_packet/makefile	/^OBJS=$(patsubst %.cpp,%.o,$(SRCS))$/;"	m
OBJS	work/test_job/day17/data_packet/makefile	/^OBJS=$(patsubst %.cpp,%.o,$(SRCS))$/;"	m
OBJS	work/test_job/sort/makefile	/^OBJS=$(patsubst %.cpp,%.o,$(SRCS))$/;"	m
OK	github/leveldb-1.18/include/leveldb/status.h	/^  static Status OK() { return Status(); }$/;"	f	class:leveldb::Status
ONE_BILLIONTH	study/Impala/runtime/timestamp-value.cpp	/^    const double TimestampValue::ONE_BILLIONTH = 0.000000001;$/;"	m	class:impala::TimestampValue	file:
ONE_BILLIONTH	study/Impala/runtime/timestamp-value.h	/^            static const double ONE_BILLIONTH;$/;"	m	class:impala::TimestampValue
OPT	github/leveldb-1.18/Makefile	/^OPT ?= -O2 -DNDEBUG$/;"	m
OldInfoLogFileName	github/leveldb-1.18/db/filename.cc	/^std::string OldInfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
OnceType	github/leveldb-1.18/port/port_example.h	/^typedef intptr_t OnceType;$/;"	t	namespace:leveldb::port
OnceType	github/leveldb-1.18/port/port_posix.h	/^typedef pthread_once_t OnceType;$/;"	t	namespace:leveldb::port
OneIn	github/leveldb-1.18/util/random.h	/^  bool OneIn(int n) { return (Next() % n) == 0; }$/;"	f	class:leveldb::Random
Open	github/leveldb-1.18/db/db_bench.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark	file:
Open	github/leveldb-1.18/db/db_impl.cc	/^Status DB::Open(const Options& options, const std::string& dbname,$/;"	f	class:leveldb::DB
Open	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark
Open	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^    void Open(bool sync) {$/;"	f	class:leveldb::Benchmark	file:
Open	github/leveldb-1.18/table/table.cc	/^Status Table::Open(const Options& options,$/;"	f	class:leveldb::Table
OpenCompactionOutputFile	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::OpenCompactionOutputFile(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
OptionConfig	github/leveldb-1.18/db/db_test.cc	/^  enum OptionConfig {$/;"	g	class:leveldb::DBTest	file:
Options	github/leveldb-1.18/include/leveldb/options.h	/^struct Options {$/;"	s	namespace:leveldb
Options	github/leveldb-1.18/util/options.cc	/^Options::Options()$/;"	f	class:leveldb::Options
Order	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
Order	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
Output	github/leveldb-1.18/db/db_impl.cc	/^  struct Output {$/;"	s	struct:leveldb::DBImpl::CompactionState	file:
OverlapInLevel	github/leveldb-1.18/db/version_set.cc	/^bool Version::OverlapInLevel(int level,$/;"	f	class:leveldb::Version
Overlaps	github/leveldb-1.18/db/version_set_test.cc	/^  bool Overlaps(const char* smallest, const char* largest) {$/;"	f	class:leveldb::FindFileTest
PERSON_DESIGN_INCLUDE_ATHLETE_H_	work/person_design/include/athletes.h	13;"	d
PERSON_DESIGN_INCLUDE_BASKETBALL_PLAYER_H_	work/person_design/include/basketball_player.h	14;"	d
PERSON_DESIGN_INCLUDE_FIREMEN_H_	work/person_design/include/firemen.h	14;"	d
PERSON_DESIGN_INCLUDE_FOOTBALL_PLAYER_H_	work/person_design/include/football_player.h	14;"	d
PERSON_DESIGN_INCLUDE_HUMAN_H_	work/person_design/include/human.h	13;"	d
PERSON_DESIGN_INCLUDE_JUDGE_STRING_H_	work/person_design/include/judge_string.h	6;"	d
PERSON_DESIGN_INCLUDE_MANIPULATORS_H_	work/person_design/include/manipulator.h	14;"	d
PERSON_DESIGN_INCLUDE_MID_SCHOOL_STU_H_	work/person_design/include/mid_school_stu.h	4;"	d
PERSON_DESIGN_INCLUDE_ONE_HUNDRED_M_RUNNERS_H_	work/person_design/include/one_hundred_m_runner.h	14;"	d
PERSON_DESIGN_INCLUDE_PILOT_H_	work/person_design/include/pilot.h	13;"	d
PERSON_DESIGN_INCLUDE_STUDENT_H_	work/person_design/include/student.h	14;"	d
PERSON_DESIGN_INCLUDE_UNIVERSITY_STU_H_	work/person_design/include/university_stu.h	4;"	d
PERSON_H_	study/dada/person/person.h	2;"	d
PLATFORM	github/leveldb-1.18/build_config.mk	/^PLATFORM=OS_LINUX$/;"	m
PLATFORMSROOT	github/leveldb-1.18/Makefile	/^PLATFORMSROOT=\/Applications\/Xcode.app\/Contents\/Developer\/Platforms$/;"	m
PLATFORM_CCFLAGS	github/leveldb-1.18/build_config.mk	/^PLATFORM_CCFLAGS= -fno-builtin-memcmp -pthread -DOS_LINUX -DLEVELDB_PLATFORM_POSIX$/;"	m
PLATFORM_CXXFLAGS	github/leveldb-1.18/build_config.mk	/^PLATFORM_CXXFLAGS= -fno-builtin-memcmp -pthread -DOS_LINUX -DLEVELDB_PLATFORM_POSIX$/;"	m
PLATFORM_IS_LITTLE_ENDIAN	github/leveldb-1.18/port/port_posix.h	10;"	d
PLATFORM_IS_LITTLE_ENDIAN	github/leveldb-1.18/port/port_posix.h	14;"	d
PLATFORM_IS_LITTLE_ENDIAN	github/leveldb-1.18/port/port_posix.h	20;"	d
PLATFORM_IS_LITTLE_ENDIAN	github/leveldb-1.18/port/port_posix.h	22;"	d
PLATFORM_IS_LITTLE_ENDIAN	github/leveldb-1.18/port/port_posix.h	28;"	d
PLATFORM_IS_LITTLE_ENDIAN	github/leveldb-1.18/port/port_posix.h	30;"	d
PLATFORM_IS_LITTLE_ENDIAN	github/leveldb-1.18/port/port_posix.h	36;"	d
PLATFORM_IS_LITTLE_ENDIAN	github/leveldb-1.18/port/port_posix.h	50;"	d
PLATFORM_IS_LITTLE_ENDIAN	github/leveldb-1.18/port/port_posix.h	78;"	d
PLATFORM_LDFLAGS	github/leveldb-1.18/build_config.mk	/^PLATFORM_LDFLAGS=-pthread$/;"	m
PLATFORM_LIBS	github/leveldb-1.18/build_config.mk	/^PLATFORM_LIBS=$/;"	m
PLATFORM_SHARED_CFLAGS	github/leveldb-1.18/build_config.mk	/^PLATFORM_SHARED_CFLAGS=-fPIC$/;"	m
PLATFORM_SHARED_EXT	github/leveldb-1.18/build_config.mk	/^PLATFORM_SHARED_EXT=so$/;"	m
PLATFORM_SHARED_LDFLAGS	github/leveldb-1.18/build_config.mk	/^PLATFORM_SHARED_LDFLAGS=-shared -Wl,-soname -Wl,$/;"	m
PLATFORM_SHARED_VERSIONED	github/leveldb-1.18/build_config.mk	/^PLATFORM_SHARED_VERSIONED=true$/;"	m
PORT_ATOMIC_POINTER_H_	github/leveldb-1.18/port/atomic_pointer.h	19;"	d
PROGRAMS	github/leveldb-1.18/Makefile	/^PROGRAMS = db_bench leveldbutil $(TESTS)$/;"	m
PTHREAD_CANCEL_ASYNCHRONOUS	test_getline.cpp	/^    PTHREAD_CANCEL_ASYNCHRONOUS$/;"	e	enum:__anon95	file:
PTHREAD_CANCEL_DEFERRED	test_getline.cpp	/^    PTHREAD_CANCEL_DEFERRED,$/;"	e	enum:__anon95	file:
PTHREAD_CANCEL_DISABLE	test_getline.cpp	/^    PTHREAD_CANCEL_DISABLE$/;"	e	enum:__anon94	file:
PTHREAD_CANCEL_ENABLE	test_getline.cpp	/^    PTHREAD_CANCEL_ENABLE,$/;"	e	enum:__anon94	file:
PTHREAD_CREATE_DETACHED	test_getline.cpp	/^    PTHREAD_CREATE_DETACHED$/;"	e	enum:__anon86	file:
PTHREAD_CREATE_JOINABLE	test_getline.cpp	/^    PTHREAD_CREATE_JOINABLE,$/;"	e	enum:__anon86	file:
PTHREAD_EXPLICIT_SCHED	test_getline.cpp	/^    PTHREAD_EXPLICIT_SCHED$/;"	e	enum:__anon91	file:
PTHREAD_INHERIT_SCHED	test_getline.cpp	/^    PTHREAD_INHERIT_SCHED,$/;"	e	enum:__anon91	file:
PTHREAD_MUTEX_ADAPTIVE_NP	test_getline.cpp	/^    PTHREAD_MUTEX_ADAPTIVE_NP$/;"	e	enum:__anon87	file:
PTHREAD_MUTEX_DEFAULT	test_getline.cpp	/^    PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL$/;"	e	enum:__anon87	file:
PTHREAD_MUTEX_ERRORCHECK	test_getline.cpp	/^    PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon87	file:
PTHREAD_MUTEX_ERRORCHECK_NP	test_getline.cpp	/^    PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon87	file:
PTHREAD_MUTEX_FAST_NP	test_getline.cpp	/^        , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP$/;"	e	enum:__anon87	file:
PTHREAD_MUTEX_NORMAL	test_getline.cpp	/^    PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,$/;"	e	enum:__anon87	file:
PTHREAD_MUTEX_RECURSIVE	test_getline.cpp	/^    PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon87	file:
PTHREAD_MUTEX_RECURSIVE_NP	test_getline.cpp	/^    PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon87	file:
PTHREAD_MUTEX_ROBUST	test_getline.cpp	/^    PTHREAD_MUTEX_ROBUST,$/;"	e	enum:__anon88	file:
PTHREAD_MUTEX_ROBUST_NP	test_getline.cpp	/^    PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST$/;"	e	enum:__anon88	file:
PTHREAD_MUTEX_STALLED	test_getline.cpp	/^    PTHREAD_MUTEX_STALLED,$/;"	e	enum:__anon88	file:
PTHREAD_MUTEX_STALLED_NP	test_getline.cpp	/^    PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,$/;"	e	enum:__anon88	file:
PTHREAD_MUTEX_TIMED_NP	test_getline.cpp	/^    PTHREAD_MUTEX_TIMED_NP,$/;"	e	enum:__anon87	file:
PTHREAD_PRIO_INHERIT	test_getline.cpp	/^    PTHREAD_PRIO_INHERIT,$/;"	e	enum:__anon89	file:
PTHREAD_PRIO_NONE	test_getline.cpp	/^    PTHREAD_PRIO_NONE,$/;"	e	enum:__anon89	file:
PTHREAD_PRIO_PROTECT	test_getline.cpp	/^    PTHREAD_PRIO_PROTECT$/;"	e	enum:__anon89	file:
PTHREAD_PROCESS_PRIVATE	test_getline.cpp	/^    PTHREAD_PROCESS_PRIVATE,$/;"	e	enum:__anon93	file:
PTHREAD_PROCESS_SHARED	test_getline.cpp	/^    PTHREAD_PROCESS_SHARED$/;"	e	enum:__anon93	file:
PTHREAD_RWLOCK_DEFAULT_NP	test_getline.cpp	/^    PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP$/;"	e	enum:__anon90	file:
PTHREAD_RWLOCK_PREFER_READER_NP	test_getline.cpp	/^    PTHREAD_RWLOCK_PREFER_READER_NP,$/;"	e	enum:__anon90	file:
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP	test_getline.cpp	/^    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,$/;"	e	enum:__anon90	file:
PTHREAD_RWLOCK_PREFER_WRITER_NP	test_getline.cpp	/^    PTHREAD_RWLOCK_PREFER_WRITER_NP,$/;"	e	enum:__anon90	file:
PTHREAD_SCOPE_PROCESS	test_getline.cpp	/^    PTHREAD_SCOPE_PROCESS$/;"	e	enum:__anon92	file:
PTHREAD_SCOPE_SYSTEM	test_getline.cpp	/^    PTHREAD_SCOPE_SYSTEM,$/;"	e	enum:__anon92	file:
PackSequenceAndType	github/leveldb-1.18/db/dbformat.cc	/^static uint64_t PackSequenceAndType(uint64_t seq, ValueType t) {$/;"	f	namespace:leveldb
Parent	study/dada/father_son_cons_destroy/father_son.h	/^		Parent():mp(0){$/;"	f	class:Parent
Parent	study/dada/father_son_cons_destroy/father_son.h	/^		Parent(int d):mp(d){$/;"	f	class:Parent
Parent	study/dada/father_son_cons_destroy/father_son.h	/^class Parent{$/;"	c
Parse	study/Impala/runtime/timestamp-parse-util.cpp	/^bool TimestampParser::Parse(const char* str, int len, boost::gregorian::date* d,$/;"	f	class:impala::TimestampParser
Parse	study/Impala/runtime/timestamp-parse-util.cpp	/^bool TimestampParser::Parse(const char* str, int len, const DateTimeFormatContext& dt_ctx,$/;"	f	class:impala::TimestampParser
ParseDateTime	study/Impala/runtime/timestamp-parse-util.cpp	/^bool TimestampParser::ParseDateTime(const char* str, int str_len,$/;"	f	class:impala::TimestampParser
ParseFileName	github/leveldb-1.18/db/filename.cc	/^bool ParseFileName(const std::string& fname,$/;"	f	namespace:leveldb
ParseFormatTokens	study/Impala/runtime/timestamp-parse-util.cpp	/^bool TimestampParser::ParseFormatTokens(DateTimeFormatContext* dt_ctx) {$/;"	f	class:impala::TimestampParser
ParseInternalKey	github/leveldb-1.18/db/dbformat.h	/^inline bool ParseInternalKey(const Slice& internal_key,$/;"	f	namespace:leveldb
ParseKey	github/leveldb-1.18/db/db_iter.cc	/^inline bool DBIter::ParseKey(ParsedInternalKey* ikey) {$/;"	f	class:leveldb::__anon10::DBIter
ParseNextKey	github/leveldb-1.18/table/block.cc	/^  bool ParseNextKey() {$/;"	f	class:leveldb::Block::Iter	file:
ParsedInternalKey	github/leveldb-1.18/db/dbformat.h	/^  ParsedInternalKey() { }  \/\/ Intentionally left uninitialized (for speed)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	github/leveldb-1.18/db/dbformat.h	/^  ParsedInternalKey(const Slice& u, const SequenceNumber& seq, ValueType t)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	github/leveldb-1.18/db/dbformat.h	/^struct ParsedInternalKey {$/;"	s	namespace:leveldb
Percentile	github/leveldb-1.18/util/histogram.cc	/^double Histogram::Percentile(double p) const {$/;"	f	class:leveldb::Histogram
Person	study/dada/person/person.h	/^		Person(string p_name, bool _gender)$/;"	f	class:Person
Person	study/dada/person/person.h	/^class Person{$/;"	c
PickCompaction	github/leveldb-1.18/db/version_set.cc	/^Compaction* VersionSet::PickCompaction() {$/;"	f	class:leveldb::VersionSet
PickLevelForMemTableOutput	github/leveldb-1.18/db/version_set.cc	/^int Version::PickLevelForMemTableOutput($/;"	f	class:leveldb::Version
PickRandomKey	github/leveldb-1.18/table/table_test.cc	/^  std::string PickRandomKey(Random* rnd, const std::vector<std::string>& keys) {$/;"	f	class:leveldb::Harness
Pilot	work/person_design/include/pilot.h	/^        Pilot() {}$/;"	f	class:Pilot
Pilot	work/person_design/include/pilot.h	/^        Pilot(const Pilot& obj) : Human(obj) {$/;"	f	class:Pilot
Pilot	work/person_design/include/pilot.h	/^        Pilot(string name_t, int age_t, string ID_t, bool gender_t,$/;"	f	class:Pilot
Pilot	work/person_design/include/pilot.h	/^class Pilot : public Human {$/;"	c
Player	study/dada/fenshu/virtual.cpp	/^		Player(string n):name(n){}$/;"	f	class:Player
Player	study/dada/fenshu/virtual.cpp	/^class Player{$/;"	c	file:
PosixEnv	github/leveldb-1.18/util/env_posix.cc	/^PosixEnv::PosixEnv() : started_bgthread_(false) {$/;"	f	class:leveldb::__anon32::PosixEnv
PosixEnv	github/leveldb-1.18/util/env_posix.cc	/^class PosixEnv : public Env {$/;"	c	namespace:leveldb::__anon32	file:
PosixFileLock	github/leveldb-1.18/util/env_posix.cc	/^class PosixFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon32	file:
PosixLockTable	github/leveldb-1.18/util/env_posix.cc	/^class PosixLockTable {$/;"	c	namespace:leveldb::__anon32	file:
PosixLogger	github/leveldb-1.18/util/posix_logger.h	/^  PosixLogger(FILE* f, uint64_t (*gettid)()) : file_(f), gettid_(gettid) { }$/;"	f	class:leveldb::PosixLogger
PosixLogger	github/leveldb-1.18/util/posix_logger.h	/^class PosixLogger : public Logger {$/;"	c	namespace:leveldb
PosixMmapReadableFile	github/leveldb-1.18/util/env_posix.cc	/^  PosixMmapReadableFile(const std::string& fname, void* base, size_t length,$/;"	f	class:leveldb::__anon32::PosixMmapReadableFile
PosixMmapReadableFile	github/leveldb-1.18/util/env_posix.cc	/^class PosixMmapReadableFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon32	file:
PosixRandomAccessFile	github/leveldb-1.18/util/env_posix.cc	/^  PosixRandomAccessFile(const std::string& fname, int fd)$/;"	f	class:leveldb::__anon32::PosixRandomAccessFile
PosixRandomAccessFile	github/leveldb-1.18/util/env_posix.cc	/^class PosixRandomAccessFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon32	file:
PosixSequentialFile	github/leveldb-1.18/util/env_posix.cc	/^  PosixSequentialFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon32::PosixSequentialFile
PosixSequentialFile	github/leveldb-1.18/util/env_posix.cc	/^class PosixSequentialFile: public SequentialFile {$/;"	c	namespace:leveldb::__anon32	file:
PosixWritableFile	github/leveldb-1.18/util/env_posix.cc	/^  PosixWritableFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon32::PosixWritableFile
PosixWritableFile	github/leveldb-1.18/util/env_posix.cc	/^class PosixWritableFile : public WritableFile {$/;"	c	namespace:leveldb::__anon32	file:
Prev	github/leveldb-1.18/db/db_iter.cc	/^void DBIter::Prev() {$/;"	f	class:leveldb::__anon10::DBIter
Prev	github/leveldb-1.18/db/db_test.cc	/^    virtual void Prev() { --iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Prev	github/leveldb-1.18/db/memtable.cc	/^  virtual void Prev() { iter_.Prev(); }$/;"	f	class:leveldb::MemTableIterator
Prev	github/leveldb-1.18/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Prev() {$/;"	f	class:leveldb::SkipList::Iterator
Prev	github/leveldb-1.18/db/version_set.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Prev	github/leveldb-1.18/table/block.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Block::Iter
Prev	github/leveldb-1.18/table/iterator.cc	/^                virtual void Prev() { assert(false); }$/;"	f	class:leveldb::__anon18::EmptyIterator
Prev	github/leveldb-1.18/table/iterator_wrapper.h	/^  void Prev()               { assert(iter_); iter_->Prev();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Prev	github/leveldb-1.18/table/merger.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::__anon20::MergingIterator
Prev	github/leveldb-1.18/table/table_test.cc	/^  virtual void Prev() { iter_->Prev(); }$/;"	f	class:leveldb::KeyConvertingIterator
Prev	github/leveldb-1.18/table/two_level_iterator.cc	/^void TwoLevelIterator::Prev() {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
PrevLogNumber	github/leveldb-1.18/db/version_set.h	/^  uint64_t PrevLogNumber() const { return prev_log_number_; }$/;"	f	class:leveldb::VersionSet
Print	work/test_job/day10/SortTime.cpp	/^void SortTime::Print()$/;"	f	class:SortTime
Print	work/test_job/sort/src/SortTime.cpp	/^void SortTime::Print()$/;"	f	class:SortTime
Print	work/test_job/sort_job/SortTime.cpp	/^void SortTime::Print()$/;"	f	class:SortTime
PrintContents	github/leveldb-1.18/db/write_batch_test.cc	/^static std::string PrintContents(WriteBatch* b) {$/;"	f	namespace:leveldb
PrintEnvironment	github/leveldb-1.18/db/db_bench.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	github/leveldb-1.18/db/db_bench.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintLogContents	github/leveldb-1.18/db/dumpfile.cc	/^Status PrintLogContents(Env* env, const std::string& fname,$/;"	f	namespace:leveldb::__anon12
PrintStats	github/leveldb-1.18/db/db_bench.cc	/^  void PrintStats(const char* key) {$/;"	f	class:leveldb::Benchmark	file:
PrintTest	work/test_job/day12/data_packet/src/DataMain.cpp	/^void PrintTest(const struct BakPacket b_stru[])$/;"	f
PrintTest	work/test_job/day16/data_packet/src/DataMain.cpp	/^void PrintTest(const vector<BakPacket> &vec)$/;"	f
PrintTest	work/test_job/day17/data_packet/src/DataMain.cpp	/^void PrintTest(const DataPacket &new_packet)$/;"	f
PrintWarnings	github/leveldb-1.18/db/db_bench.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
Property	github/leveldb-1.18/db/corruption_test.cc	/^  int Property(const std::string& name) {$/;"	f	class:leveldb::CorruptionTest
PthreadCall	github/leveldb-1.18/port/port_posix.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	namespace:leveldb::port
PthreadCall	github/leveldb-1.18/util/env_posix.cc	/^  void PthreadCall(const char* label, int result) {$/;"	f	class:leveldb::__anon32::PosixEnv	file:
Put	github/leveldb-1.18/db/db_impl.cc	/^Status DB::Put(const WriteOptions& opt, const Slice& key, const Slice& value) {$/;"	f	class:leveldb::DB
Put	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::Put(const WriteOptions& o, const Slice& key, const Slice& val) {$/;"	f	class:leveldb::DBImpl
Put	github/leveldb-1.18/db/db_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::DBTest
Put	github/leveldb-1.18/db/db_test.cc	/^  virtual Status Put(const WriteOptions& o, const Slice& k, const Slice& v) {$/;"	f	class:leveldb::ModelDB
Put	github/leveldb-1.18/db/dumpfile.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon12::WriteBatchItemPrinter
Put	github/leveldb-1.18/db/write_batch.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon13::MemTableInserter
Put	github/leveldb-1.18/db/write_batch.cc	/^void WriteBatch::Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::WriteBatch
PutFixed32	github/leveldb-1.18/util/coding.cc	/^void PutFixed32(std::string* dst, uint32_t value) {$/;"	f	namespace:leveldb
PutFixed64	github/leveldb-1.18/util/coding.cc	/^void PutFixed64(std::string* dst, uint64_t value) {$/;"	f	namespace:leveldb
PutLengthPrefixedSlice	github/leveldb-1.18/util/coding.cc	/^void PutLengthPrefixedSlice(std::string* dst, const Slice& value) {$/;"	f	namespace:leveldb
PutVarint32	github/leveldb-1.18/util/coding.cc	/^void PutVarint32(std::string* dst, uint32_t v) {$/;"	f	namespace:leveldb
PutVarint64	github/leveldb-1.18/util/coding.cc	/^void PutVarint64(std::string* dst, uint64_t v) {$/;"	f	namespace:leveldb
QSort	work/test_job/day10/SortTime.cpp	/^void QSort(int** arr, int left, int right)$/;"	f
QSort	work/test_job/sort/src/SortTime.cpp	/^void QSort(int** arr, int left, int right)$/;"	f
QSort	work/test_job/sort_job/SortTime.cpp	/^void QSort(int** arr, int left, int right)$/;"	f
QuickSort	work/test_job/day10/SortTime.cpp	/^void SortTime::QuickSort()$/;"	f	class:SortTime
QuickSort	work/test_job/sort/src/SortTime.cpp	/^void SortTime::QuickSort()$/;"	f	class:SortTime
QuickSort	work/test_job/sort_job/SortTime.cpp	/^void SortTime::QuickSort()$/;"	f	class:SortTime
RANDOM	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOM	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOM_H_	work/random/random.h	5;"	d
REV_MONTH_INDEX	study/Impala/runtime/timestamp-parse-util.cpp	/^static unordered_map<StringValue, int> REV_MONTH_INDEX;$/;"	m	namespace:impala	file:
RUNNING	github/leveldb-1.18/db/skiplist_test.cc	/^    RUNNING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
RandInit	work/test_job/day10/SortTime.cpp	/^void SortTime::RandInit()$/;"	f	class:SortTime
RandInit	work/test_job/day12/data_packet/src/DataPacket.cpp	/^void DataPacket::RandInit(int upper_limit)$/;"	f	class:DataPacket
RandInit	work/test_job/day16/data_packet/src/DataPacket.cpp	/^void DataPacket::RandInit(int upper_limit)$/;"	f	class:DataPacket
RandInit	work/test_job/day17/data_packet/src/DataPacket.cpp	/^void DataPacket::RandInit(int upper_limit)$/;"	f	class:DataPacket
RandInit	work/test_job/sort/src/SortTime.cpp	/^void SortTime::RandInit()$/;"	f	class:SortTime
RandInit	work/test_job/sort_job/SortTime.cpp	/^void SortTime::RandInit()$/;"	f	class:SortTime
Random	github/leveldb-1.18/util/random.h	/^  explicit Random(uint32_t s) : seed_(s & 0x7fffffffu) {$/;"	f	class:leveldb::Random
Random	github/leveldb-1.18/util/random.h	/^class Random {$/;"	c	namespace:leveldb
RandomAccessFile	github/leveldb-1.18/include/leveldb/env.h	/^  RandomAccessFile() { }$/;"	f	class:leveldb::RandomAccessFile
RandomAccessFile	github/leveldb-1.18/include/leveldb/env.h	/^class RandomAccessFile {$/;"	c	namespace:leveldb
RandomAccessFileImpl	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  explicit RandomAccessFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon25::RandomAccessFileImpl
RandomAccessFileImpl	github/leveldb-1.18/helpers/memenv/memenv.cc	/^class RandomAccessFileImpl : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon25	file:
RandomGenerator	github/leveldb-1.18/db/db_bench.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon7::RandomGenerator
RandomGenerator	github/leveldb-1.18/db/db_bench.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon7	file:
RandomGenerator	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon2::RandomGenerator
RandomGenerator	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon2	file:
RandomGenerator	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon3::RandomGenerator
RandomGenerator	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon3	file:
RandomHeight	github/leveldb-1.18/db/skiplist.h	/^int SkipList<Key,Comparator>::RandomHeight() {$/;"	f	class:leveldb::SkipList
RandomKey	github/leveldb-1.18/db/db_test.cc	/^static std::string RandomKey(Random* rnd) {$/;"	f	namespace:leveldb
RandomKey	github/leveldb-1.18/util/testutil.cc	/^std::string RandomKey(Random* rnd, int len) {$/;"	f	namespace:leveldb::test
RandomPeriod	github/leveldb-1.18/db/db_iter.cc	/^  ssize_t RandomPeriod() {$/;"	f	class:leveldb::__anon10::DBIter	file:
RandomSeed	github/leveldb-1.18/util/testharness.cc	/^int RandomSeed() {$/;"	f	namespace:leveldb::test
RandomSkewedString	github/leveldb-1.18/db/log_test.cc	/^static std::string RandomSkewedString(int i, Random* rnd) {$/;"	f	namespace:leveldb::log
RandomString	github/leveldb-1.18/db/db_test.cc	/^static std::string RandomString(Random* rnd, int len) {$/;"	f	namespace:leveldb
RandomString	github/leveldb-1.18/util/testutil.cc	/^Slice RandomString(Random* rnd, int len, std::string* dst) {$/;"	f	namespace:leveldb::test
RandomTarget	github/leveldb-1.18/db/skiplist_test.cc	/^  static Key RandomTarget(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest	file:
Range	github/leveldb-1.18/include/leveldb/db.h	/^  Range() { }$/;"	f	struct:leveldb::Range
Range	github/leveldb-1.18/include/leveldb/db.h	/^  Range(const Slice& s, const Slice& l) : start(s), limit(l) { }$/;"	f	struct:leveldb::Range
Range	github/leveldb-1.18/include/leveldb/db.h	/^struct Range {$/;"	s	namespace:leveldb
Read	github/leveldb-1.18/db/db_test.cc	/^  int Read() {$/;"	f	class:leveldb::__anon14::AtomicCounter
Read	github/leveldb-1.18/db/log_test.cc	/^    virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::log::LogTest::StringSource
Read	github/leveldb-1.18/db/log_test.cc	/^  std::string Read() {$/;"	f	class:leveldb::log::LogTest
Read	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  void Read(Order order, int entries_per_batch) {$/;"	f	class:leveldb::Benchmark
Read	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  Status Read(uint64_t offset, size_t n, Slice* result, char* scratch) const {$/;"	f	class:leveldb::__anon25::FileState
Read	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon25::SequentialFileImpl
Read	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon25::RandomAccessFileImpl
Read	github/leveldb-1.18/table/table_test.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::StringSource
Read	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon32::PosixSequentialFile
Read	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon32::PosixMmapReadableFile
Read	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon32::PosixRandomAccessFile
ReadBlock	github/leveldb-1.18/table/format.cc	/^Status ReadBlock(RandomAccessFile* file,$/;"	f	namespace:leveldb
ReadFileToString	github/leveldb-1.18/util/env.cc	/^Status ReadFileToString(Env* env, const std::string& fname, std::string* data) {$/;"	f	namespace:leveldb
ReadFilter	github/leveldb-1.18/table/table.cc	/^void Table::ReadFilter(const Slice& filter_handle_value) {$/;"	f	class:leveldb::Table
ReadHot	github/leveldb-1.18/db/db_bench.cc	/^  void ReadHot(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadMeta	github/leveldb-1.18/table/table.cc	/^void Table::ReadMeta(const Footer& footer) {$/;"	f	class:leveldb::Table
ReadMissing	github/leveldb-1.18/db/db_bench.cc	/^  void ReadMissing(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadOptions	github/leveldb-1.18/include/leveldb/options.h	/^  ReadOptions()$/;"	f	struct:leveldb::ReadOptions
ReadOptions	github/leveldb-1.18/include/leveldb/options.h	/^struct ReadOptions {$/;"	s	namespace:leveldb
ReadPhysicalRecord	github/leveldb-1.18/db/log_reader.cc	/^unsigned int Reader::ReadPhysicalRecord(Slice* result) {$/;"	f	class:leveldb::log::Reader
ReadRandom	github/leveldb-1.18/db/db_bench.cc	/^  void ReadRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadRandom	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  void ReadRandom() {$/;"	f	class:leveldb::Benchmark	file:
ReadRecord	github/leveldb-1.18/db/log_reader.cc	/^bool Reader::ReadRecord(Slice* record, std::string* scratch) {$/;"	f	class:leveldb::log::Reader
ReadReverse	github/leveldb-1.18/db/db_bench.cc	/^  void ReadReverse(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	github/leveldb-1.18/db/db_bench.cc	/^  void ReadSequential(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark
ReadSequential	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark	file:
ReadStep	github/leveldb-1.18/db/skiplist_test.cc	/^  void ReadStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
ReadWhileWriting	github/leveldb-1.18/db/db_bench.cc	/^  void ReadWhileWriting(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Reader	github/leveldb-1.18/db/log_reader.cc	/^Reader::Reader(SequentialFile* file, Reporter* reporter, bool checksum,$/;"	f	class:leveldb::log::Reader
Reader	github/leveldb-1.18/db/log_reader.h	/^class Reader {$/;"	c	namespace:leveldb::log
ReaderState	github/leveldb-1.18/db/skiplist_test.cc	/^  enum ReaderState {$/;"	g	class:leveldb::TestState	file:
RecordBackgroundError	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::RecordBackgroundError(const Status& s) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::RecordReadSample(Slice key) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	github/leveldb-1.18/db/version_set.cc	/^bool Version::RecordReadSample(Slice internal_key) {$/;"	f	class:leveldb::Version
RecordType	github/leveldb-1.18/db/log_format.h	/^enum RecordType {$/;"	g	namespace:leveldb::log
Recover	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::Recover(VersionEdit* edit) {$/;"	f	class:leveldb::DBImpl
Recover	github/leveldb-1.18/db/version_set.cc	/^Status VersionSet::Recover() {$/;"	f	class:leveldb::VersionSet
RecoverLogFile	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::RecoverLogFile(uint64_t log_number,$/;"	f	class:leveldb::DBImpl
Ref	github/leveldb-1.18/db/memtable.h	/^  void Ref() { ++refs_; }$/;"	f	class:leveldb::MemTable
Ref	github/leveldb-1.18/db/version_set.cc	/^void Version::Ref() {$/;"	f	class:leveldb::Version
Ref	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  void Ref() {$/;"	f	class:leveldb::__anon25::FileState
RegisterCleanup	github/leveldb-1.18/table/iterator.cc	/^    void Iterator::RegisterCleanup(CleanupFunction func, void* arg1, void* arg2) {$/;"	f	class:leveldb::Iterator
RegisterTest	github/leveldb-1.18/util/testharness.cc	/^bool RegisterTest(const char* base, const char* name, void (*func)()) {$/;"	f	namespace:leveldb::test
Release	github/leveldb-1.18/util/cache.cc	/^  virtual void Release(Handle* handle) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
Release	github/leveldb-1.18/util/cache.cc	/^void LRUCache::Release(Cache::Handle* handle) {$/;"	f	class:leveldb::__anon27::LRUCache
Release	github/leveldb-1.18/util/env_posix.cc	/^  void Release() {$/;"	f	class:leveldb::__anon32::MmapLimiter
ReleaseBlock	github/leveldb-1.18/table/table.cc	/^static void ReleaseBlock(void* arg, void* h) {$/;"	f	namespace:leveldb
ReleaseInputs	github/leveldb-1.18/db/version_set.cc	/^void Compaction::ReleaseInputs() {$/;"	f	class:leveldb::Compaction
ReleaseSnapshot	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::ReleaseSnapshot(const Snapshot* s) {$/;"	f	class:leveldb::DBImpl
ReleaseSnapshot	github/leveldb-1.18/db/db_test.cc	/^  virtual void ReleaseSnapshot(const Snapshot* snapshot) {$/;"	f	class:leveldb::ModelDB
Release_Store	github/leveldb-1.18/port/atomic_pointer.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Remove	github/leveldb-1.18/util/cache.cc	/^  LRUHandle* Remove(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon27::HandleTable
Remove	github/leveldb-1.18/util/env_posix.cc	/^  void Remove(const std::string& fname) {$/;"	f	class:leveldb::__anon32::PosixLockTable
RenameFile	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status RenameFile(const std::string& src,$/;"	f	class:leveldb::__anon25::InMemoryEnv
RenameFile	github/leveldb-1.18/include/leveldb/env.h	/^  Status RenameFile(const std::string& s, const std::string& t) {$/;"	f	class:leveldb::EnvWrapper
RenameFile	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status RenameFile(const std::string& src, const std::string& target) {$/;"	f	class:leveldb::__anon32::PosixEnv
RenameLDBToSST	github/leveldb-1.18/db/db_test.cc	/^  int RenameLDBToSST() {$/;"	f	class:leveldb::DBTest
Reopen	github/leveldb-1.18/db/corruption_test.cc	/^  void Reopen() {$/;"	f	class:leveldb::CorruptionTest
Reopen	github/leveldb-1.18/db/db_test.cc	/^  void Reopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
Rep	github/leveldb-1.18/table/table.cc	/^struct Table::Rep {$/;"	s	class:leveldb::Table	file:
Rep	github/leveldb-1.18/table/table_builder.cc	/^  Rep(const Options& opt, WritableFile* f)$/;"	f	struct:leveldb::TableBuilder::Rep
Rep	github/leveldb-1.18/table/table_builder.cc	/^struct TableBuilder::Rep {$/;"	s	class:leveldb::TableBuilder	file:
RepairDB	github/leveldb-1.18/db/corruption_test.cc	/^  void RepairDB() {$/;"	f	class:leveldb::CorruptionTest
RepairDB	github/leveldb-1.18/db/repair.cc	/^Status RepairDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
RepairTable	github/leveldb-1.18/db/repair.cc	/^  void RepairTable(const std::string& src, TableInfo t) {$/;"	f	class:leveldb::__anon5::Repairer	file:
Repairer	github/leveldb-1.18/db/repair.cc	/^  Repairer(const std::string& dbname, const Options& options)$/;"	f	class:leveldb::__anon5::Repairer
Repairer	github/leveldb-1.18/db/repair.cc	/^class Repairer {$/;"	c	namespace:leveldb::__anon5	file:
Report	github/leveldb-1.18/db/db_bench.cc	/^  void Report(const Slice& name) {$/;"	f	class:leveldb::__anon7::Stats
ReportBadFormat	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^void TimestampFunctions::ReportBadFormat(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
ReportCollector	github/leveldb-1.18/db/log_test.cc	/^    ReportCollector() : dropped_bytes_(0) { }$/;"	f	class:leveldb::log::LogTest::ReportCollector
ReportCollector	github/leveldb-1.18/db/log_test.cc	/^  class ReportCollector : public Reader::Reporter {$/;"	c	class:leveldb::log::LogTest	file:
ReportCorruption	github/leveldb-1.18/db/log_reader.cc	/^void Reader::ReportCorruption(uint64_t bytes, const char* reason) {$/;"	f	class:leveldb::log::Reader
ReportDrop	github/leveldb-1.18/db/log_reader.cc	/^void Reader::ReportDrop(uint64_t bytes, const Status& reason) {$/;"	f	class:leveldb::log::Reader
ReportMessage	github/leveldb-1.18/db/log_test.cc	/^  std::string ReportMessage() const {$/;"	f	class:leveldb::log::LogTest
Reporter	github/leveldb-1.18/db/log_reader.h	/^  class Reporter {$/;"	c	class:leveldb::log::Reader
Reset	github/leveldb-1.18/db/db_test.cc	/^  void Reset() {$/;"	f	class:leveldb::__anon14::AtomicCounter
Reset	github/leveldb-1.18/table/block_builder.cc	/^void BlockBuilder::Reset() {$/;"	f	class:leveldb::BlockBuilder
Reset	github/leveldb-1.18/table/table_test.cc	/^  void Reset() {$/;"	f	class:leveldb::TableConstructor	file:
Reset	github/leveldb-1.18/util/bloom_test.cc	/^  void Reset() {$/;"	f	class:leveldb::BloomTest
Reset	study/Impala/runtime/timestamp-parse-util.h	/^        void Reset(const char* fmt, int fmt_len) {$/;"	f	struct:impala::DateTimeFormatContext
Resize	github/leveldb-1.18/util/cache.cc	/^  void Resize() {$/;"	f	class:leveldb::__anon27::HandleTable	file:
ReuseFileNumber	github/leveldb-1.18/db/version_set.h	/^  void ReuseFileNumber(uint64_t file_number) {$/;"	f	class:leveldb::VersionSet
Reverse	github/leveldb-1.18/table/table_test.cc	/^static std::string Reverse(const Slice& key) {$/;"	f	namespace:leveldb
ReverseKeyComparator	github/leveldb-1.18/table/table_test.cc	/^class ReverseKeyComparator : public Comparator {$/;"	c	namespace:leveldb::__anon21	file:
Run	github/leveldb-1.18/db/db_bench.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	github/leveldb-1.18/db/repair.cc	/^  Status Run() {$/;"	f	class:leveldb::__anon5::Repairer
Run	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
RunAllTests	github/leveldb-1.18/util/testharness.cc	/^int RunAllTests() {$/;"	f	namespace:leveldb::test
RunBenchmark	github/leveldb-1.18/db/db_bench.cc	/^  void RunBenchmark(int n, Slice name,$/;"	f	class:leveldb::Benchmark	file:
RunConcurrent	github/leveldb-1.18/db/skiplist_test.cc	/^static void RunConcurrent(int run) {$/;"	f	namespace:leveldb
Runners	work/person_design/include/one_hundred_m_runner.h	/^		Runners(const Runners& obj) : Athlete(obj) {$/;"	f	class:Runners
Runners	work/person_design/include/one_hundred_m_runner.h	/^        Runners() {}$/;"	f	class:Runners
Runners	work/person_design/include/one_hundred_m_runner.h	/^        Runners(string name_t, int age_t, string ID_t, bool gender_t,$/;"	f	class:Runners
Runners	work/person_design/include/one_hundred_m_runner.h	/^class Runners : public Athlete {$/;"	c
SALES_DATA_H_	study/CppPrimer/chap07/class1/Sales_data.h	2;"	d
SATURDAY	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const char* TimestampFunctions::SATURDAY = "Saturday";$/;"	m	class:impala::TimestampFunctions	file:
SATURDAY	study/Impala/timestamp_src/timestamp-functions.h	/^            static const char* SATURDAY;$/;"	m	class:impala::TimestampFunctions
SCOPED_LOCKABLE	github/leveldb-1.18/port/thread_annotations.h	33;"	d
SECONDS_IN_DAY	study/Impala/runtime/timestamp-value.cpp	/^const int32_t SECONDS_IN_DAY = 24 * SECONDS_IN_HOUR;$/;"	v
SECONDS_IN_HOUR	study/Impala/runtime/timestamp-value.cpp	/^const int32_t SECONDS_IN_HOUR = 60 * SECONDS_IN_MINUTE;$/;"	v
SECONDS_IN_MINUTE	study/Impala/runtime/timestamp-value.cpp	/^const int32_t SECONDS_IN_MINUTE = 60;$/;"	v
SECOND_IN_MINUTE	study/Impala/runtime/timestamp-parse-util.h	/^        SECOND_IN_MINUTE,$/;"	e	enum:impala::DateTimeFormatTokenType
SEPARATOR	study/Impala/runtime/timestamp-parse-util.h	/^        SEPARATOR,$/;"	e	enum:impala::DateTimeFormatTokenType
SEQUENTIAL	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SEQUENTIAL	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SHARED	github/leveldb-1.18/Makefile	/^SHARED = $(SHARED1) $(SHARED2) $(SHARED3)$/;"	m
SHARED	github/leveldb-1.18/Makefile	/^SHARED = $(SHARED1)$/;"	m
SHARED1	github/leveldb-1.18/Makefile	/^SHARED1 = libleveldb.$(PLATFORM_SHARED_EXT)$/;"	m
SHARED2	github/leveldb-1.18/Makefile	/^SHARED2 = $(SHARED1)$/;"	m
SHARED2	github/leveldb-1.18/Makefile	/^SHARED2 = $(SHARED1).$(SHARED_MAJOR)$/;"	m
SHARED3	github/leveldb-1.18/Makefile	/^SHARED3 = $(SHARED1)$/;"	m
SHARED3	github/leveldb-1.18/Makefile	/^SHARED3 = $(SHARED1).$(SHARED_MAJOR).$(SHARED_MINOR)$/;"	m
SHARED_LOCKS_REQUIRED	github/leveldb-1.18/port/thread_annotations.h	17;"	d
SHARED_LOCK_FUNCTION	github/leveldb-1.18/port/thread_annotations.h	41;"	d
SHARED_MAJOR	github/leveldb-1.18/Makefile	/^SHARED_MAJOR = 1$/;"	m
SHARED_MINOR	github/leveldb-1.18/Makefile	/^SHARED_MINOR = 18$/;"	m
SHARED_TRYLOCK_FUNCTION	github/leveldb-1.18/port/thread_annotations.h	49;"	d
SIMULATORROOT	github/leveldb-1.18/Makefile	/^SIMULATORROOT=$(PLATFORMSROOT)\/iPhoneSimulator.platform\/Developer$/;"	m
SORTTIME_H_	work/test_job/day10/SortTime.h	2;"	d
SORTTIME_H_	work/test_job/sort/include/SortTime.h	2;"	d
SORTTIME_H_	work/test_job/sort_job/SortTime.h	2;"	d
SOURCES	github/leveldb-1.18/build_config.mk	/^SOURCES=db\/builder.cc db\/c.cc db\/dbformat.cc db\/db_impl.cc db\/db_iter.cc db\/dumpfile.cc db\/filename.cc db\/log_reader.cc db\/log_writer.cc db\/memtable.cc db\/repair.cc db\/table_cache.cc db\/version_edit.cc db\/version_set.cc db\/write_batch.cc table\/block_builder.cc table\/block.cc table\/filter_block.cc table\/format.cc table\/iterator.cc table\/merger.cc table\/table_builder.cc table\/table.cc table\/two_level_iterator.cc util\/arena.cc util\/bloom.cc util\/cache.cc util\/coding.cc util\/comparator.cc util\/crc32c.cc util\/env.cc util\/env_posix.cc util\/filter_policy.cc util\/hash.cc util\/histogram.cc util\/logging.cc util\/options.cc util\/status.cc  port\/port_posix.cc$/;"	m
SRCS	work/person_design/makefile	/^SRCS=$(wildcard .\/src\/*.cpp) $/;"	m
SRCS	work/test_job/day12/data_packet/makefile	/^SRCS=$(wildcard .\/src\/*.cpp) $/;"	m
SRCS	work/test_job/day16/data_packet/makefile	/^SRCS=$(wildcard .\/src\/*.cpp) $/;"	m
SRCS	work/test_job/day17/data_packet/makefile	/^SRCS=$(wildcard .\/src\/*.cpp) $/;"	m
SRCS	work/test_job/sort/makefile	/^SRCS=$(wildcard .\/src\/*.cpp) $/;"	m
SSTTableFileName	github/leveldb-1.18/db/filename.cc	/^std::string SSTTableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
STARTING	github/leveldb-1.18/db/skiplist_test.cc	/^    STARTING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
STEP1	github/leveldb-1.18/util/crc32c.cc	291;"	d	file:
STEP1	github/leveldb-1.18/util/crc32c.cc	327;"	d	file:
STEP4	github/leveldb-1.18/util/crc32c.cc	295;"	d	file:
STEP4	github/leveldb-1.18/util/crc32c.cc	326;"	d	file:
STLLessThan	github/leveldb-1.18/table/table_test.cc	/^  STLLessThan() : cmp(BytewiseComparator()) { }$/;"	f	struct:leveldb::__anon22::STLLessThan
STLLessThan	github/leveldb-1.18/table/table_test.cc	/^  STLLessThan(const Comparator* c) : cmp(c) { }$/;"	f	struct:leveldb::__anon22::STLLessThan
STLLessThan	github/leveldb-1.18/table/table_test.cc	/^struct STLLessThan {$/;"	s	namespace:leveldb::__anon22	file:
STORAGE_LEVELDB_DB_BUILDER_H_	github/leveldb-1.18/db/builder.h	6;"	d
STORAGE_LEVELDB_DB_DBFORMAT_H_	github/leveldb-1.18/db/dbformat.h	6;"	d
STORAGE_LEVELDB_DB_DB_IMPL_H_	github/leveldb-1.18/db/db_impl.h	6;"	d
STORAGE_LEVELDB_DB_DB_ITER_H_	github/leveldb-1.18/db/db_iter.h	6;"	d
STORAGE_LEVELDB_DB_FILENAME_H_	github/leveldb-1.18/db/filename.h	8;"	d
STORAGE_LEVELDB_DB_LOG_FORMAT_H_	github/leveldb-1.18/db/log_format.h	9;"	d
STORAGE_LEVELDB_DB_LOG_READER_H_	github/leveldb-1.18/db/log_reader.h	6;"	d
STORAGE_LEVELDB_DB_LOG_WRITER_H_	github/leveldb-1.18/db/log_writer.h	6;"	d
STORAGE_LEVELDB_DB_MEMTABLE_H_	github/leveldb-1.18/db/memtable.h	6;"	d
STORAGE_LEVELDB_DB_SKIPLIST_H_	github/leveldb-1.18/db/skiplist.h	2;"	d
STORAGE_LEVELDB_DB_SNAPSHOT_H_	github/leveldb-1.18/db/snapshot.h	6;"	d
STORAGE_LEVELDB_DB_TABLE_CACHE_H_	github/leveldb-1.18/db/table_cache.h	8;"	d
STORAGE_LEVELDB_DB_VERSION_EDIT_H_	github/leveldb-1.18/db/version_edit.h	6;"	d
STORAGE_LEVELDB_DB_VERSION_SET_H_	github/leveldb-1.18/db/version_set.h	16;"	d
STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_	github/leveldb-1.18/db/write_batch_internal.h	6;"	d
STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_	github/leveldb-1.18/helpers/memenv/memenv.h	6;"	d
STORAGE_LEVELDB_INCLUDE_CACHE_H_	github/leveldb-1.18/include/leveldb/cache.h	19;"	d
STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_	github/leveldb-1.18/include/leveldb/comparator.h	6;"	d
STORAGE_LEVELDB_INCLUDE_C_H_	github/leveldb-1.18/include/leveldb/c.h	41;"	d
STORAGE_LEVELDB_INCLUDE_DB_H_	github/leveldb-1.18/include/leveldb/db.h	6;"	d
STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_	github/leveldb-1.18/include/leveldb/dumpfile.h	6;"	d
STORAGE_LEVELDB_INCLUDE_ENV_H_	github/leveldb-1.18/include/leveldb/env.h	14;"	d
STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_	github/leveldb-1.18/include/leveldb/filter_policy.h	17;"	d
STORAGE_LEVELDB_INCLUDE_ITERATOR_H_	github/leveldb-1.18/include/leveldb/iterator.h	16;"	d
STORAGE_LEVELDB_INCLUDE_OPTIONS_H_	github/leveldb-1.18/include/leveldb/options.h	6;"	d
STORAGE_LEVELDB_INCLUDE_SLICE_H_	github/leveldb-1.18/include/leveldb/slice.h	16;"	d
STORAGE_LEVELDB_INCLUDE_STATUS_H_	github/leveldb-1.18/include/leveldb/status.h	14;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_	github/leveldb-1.18/include/leveldb/table_builder.h	14;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_H_	github/leveldb-1.18/include/leveldb/table.h	6;"	d
STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_	github/leveldb-1.18/include/leveldb/write_batch.h	22;"	d
STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_	github/leveldb-1.18/port/port_example.h	11;"	d
STORAGE_LEVELDB_PORT_PORT_H_	github/leveldb-1.18/port/port.h	6;"	d
STORAGE_LEVELDB_PORT_PORT_POSIX_H_	github/leveldb-1.18/port/port_posix.h	8;"	d
STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_	github/leveldb-1.18/port/thread_annotations.h	6;"	d
STORAGE_LEVELDB_PORT_WIN_STDINT_H_	github/leveldb-1.18/port/win/stdint.h	8;"	d
STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_	github/leveldb-1.18/table/block_builder.h	6;"	d
STORAGE_LEVELDB_TABLE_BLOCK_H_	github/leveldb-1.18/table/block.h	6;"	d
STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_	github/leveldb-1.18/table/filter_block.h	10;"	d
STORAGE_LEVELDB_TABLE_FORMAT_H_	github/leveldb-1.18/table/format.h	6;"	d
STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_	github/leveldb-1.18/table/iterator_wrapper.h	6;"	d
STORAGE_LEVELDB_TABLE_MERGER_H_	github/leveldb-1.18/table/merger.h	6;"	d
STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_	github/leveldb-1.18/table/two_level_iterator.h	6;"	d
STORAGE_LEVELDB_UTIL_ARENA_H_	github/leveldb-1.18/util/arena.h	6;"	d
STORAGE_LEVELDB_UTIL_CODING_H_	github/leveldb-1.18/util/coding.h	11;"	d
STORAGE_LEVELDB_UTIL_CRC32C_H_	github/leveldb-1.18/util/crc32c.h	6;"	d
STORAGE_LEVELDB_UTIL_HASH_H_	github/leveldb-1.18/util/hash.h	8;"	d
STORAGE_LEVELDB_UTIL_HISTOGRAM_H_	github/leveldb-1.18/util/histogram.h	6;"	d
STORAGE_LEVELDB_UTIL_LOGGING_H_	github/leveldb-1.18/util/logging.h	9;"	d
STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_	github/leveldb-1.18/util/mutexlock.h	6;"	d
STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_	github/leveldb-1.18/util/posix_logger.h	9;"	d
STORAGE_LEVELDB_UTIL_RANDOM_H_	github/leveldb-1.18/util/random.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTHARNESS_H_	github/leveldb-1.18/util/testharness.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTUTIL_H_	github/leveldb-1.18/util/testutil.h	6;"	d
SUNDAY	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const char* TimestampFunctions::SUNDAY = "Sunday";$/;"	m	class:impala::TimestampFunctions	file:
SUNDAY	study/Impala/timestamp_src/timestamp-functions.h	/^            static const char* SUNDAY;$/;"	m	class:impala::TimestampFunctions
Sales_data	study/CppPrimer/chap07/class1/Sales_data.h	/^		Sales_data(){} \/\/ C++11标准可以用 = default;表示要求编译器来生成默认构造函数,在类内部这个函数就是内联的$/;"	f	class:Sales_data
Sales_data	study/CppPrimer/chap07/class1/Sales_data.h	/^		Sales_data(const std::string &s): bookNo(s) { }\/\/其他的没有没有传递参数的则使用默认初始化$/;"	f	class:Sales_data
Sales_data	study/CppPrimer/chap07/class1/Sales_data.h	/^		Sales_data(const std::string &s, unsigned n, double p)$/;"	f	class:Sales_data
Sales_data	study/CppPrimer/chap07/class1/Sales_data.h	/^class Sales_data$/;"	c
SanitizeOptions	github/leveldb-1.18/db/db_impl.cc	/^Options SanitizeOptions(const std::string& dbname,$/;"	f	namespace:leveldb
SaveError	github/leveldb-1.18/db/c.cc	/^static bool SaveError(char** errptr, const Status& s) {$/;"	f	file:
SaveError	github/leveldb-1.18/table/two_level_iterator.cc	/^  void SaveError(const Status& s) {$/;"	f	class:leveldb::__anon19::TwoLevelIterator	file:
SaveKey	github/leveldb-1.18/db/db_iter.cc	/^  inline void SaveKey(const Slice& k, std::string* dst) {$/;"	f	class:leveldb::__anon10::DBIter	file:
SaveTo	github/leveldb-1.18/db/version_set.cc	/^  void SaveTo(Version* v) {$/;"	f	class:leveldb::VersionSet::Builder
SaveValue	github/leveldb-1.18/db/version_set.cc	/^static void SaveValue(void* arg, const Slice& ikey, const Slice& v) {$/;"	f	namespace:leveldb
Saver	github/leveldb-1.18/db/version_set.cc	/^struct Saver {$/;"	s	namespace:leveldb::__anon11	file:
SaverState	github/leveldb-1.18/db/version_set.cc	/^enum SaverState {$/;"	g	namespace:leveldb::__anon11	file:
ScanTable	github/leveldb-1.18/db/repair.cc	/^  void ScanTable(uint64_t number) {$/;"	f	class:leveldb::__anon5::Repairer	file:
Schedule	github/leveldb-1.18/include/leveldb/env.h	/^  void Schedule(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
Schedule	github/leveldb-1.18/util/env_posix.cc	/^void PosixEnv::Schedule(void (*function)(void*), void* arg) {$/;"	f	class:leveldb::__anon32::PosixEnv
Screen	study/CppPrimer/chap07/class2/Screen.h	/^		Screen() {}; \/\/ C++11标准支持 = default,隐式内联函数,让系统生成合成的构造函数$/;"	f	class:Screen
Screen	study/CppPrimer/chap07/class2/Screen.h	/^		Screen(pos ht, pos wd, char c): height(ht), width(wd), contents(ht * wd) { }$/;"	f	class:Screen
Screen	study/CppPrimer/chap07/class2/Screen.h	/^class Screen$/;"	c
ScreenIndex	study/CppPrimer/chap07/class2/Window_mgr.h	/^		typedef std::vector<Screen>::size_type ScreenIndex;$/;"	t	class:Window_mgr
Second	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::Second(FunctionContext* context, const TimestampVal& ts_val) {$/;"	f	class:impala::TimestampFunctions
Seconds	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^typedef boost::posix_time::seconds Seconds;$/;"	t	file:
Seek	github/leveldb-1.18/db/db_iter.cc	/^void DBIter::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon10::DBIter
Seek	github/leveldb-1.18/db/db_test.cc	/^    virtual void Seek(const Slice& k) {$/;"	f	class:leveldb::ModelDB::ModelIter
Seek	github/leveldb-1.18/db/memtable.cc	/^  virtual void Seek(const Slice& k) { iter_.Seek(EncodeKey(&tmp_, k)); }$/;"	f	class:leveldb::MemTableIterator
Seek	github/leveldb-1.18/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Seek(const Key& target) {$/;"	f	class:leveldb::SkipList::Iterator
Seek	github/leveldb-1.18/db/version_set.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Seek	github/leveldb-1.18/table/block.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Block::Iter
Seek	github/leveldb-1.18/table/iterator.cc	/^                virtual void Seek(const Slice& target) { }$/;"	f	class:leveldb::__anon18::EmptyIterator
Seek	github/leveldb-1.18/table/iterator_wrapper.h	/^  void Seek(const Slice& k) { assert(iter_); iter_->Seek(k);       Update(); }$/;"	f	class:leveldb::IteratorWrapper
Seek	github/leveldb-1.18/table/merger.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::__anon20::MergingIterator
Seek	github/leveldb-1.18/table/table_test.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::KeyConvertingIterator
Seek	github/leveldb-1.18/table/two_level_iterator.cc	/^void TwoLevelIterator::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
SeekRandom	github/leveldb-1.18/db/db_bench.cc	/^  void SeekRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SeekToFirst	github/leveldb-1.18/db/db_iter.cc	/^void DBIter::SeekToFirst() {$/;"	f	class:leveldb::__anon10::DBIter
SeekToFirst	github/leveldb-1.18/db/db_test.cc	/^    virtual void SeekToFirst() { iter_ = map_->begin(); }$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToFirst	github/leveldb-1.18/db/memtable.cc	/^  virtual void SeekToFirst() { iter_.SeekToFirst(); }$/;"	f	class:leveldb::MemTableIterator
SeekToFirst	github/leveldb-1.18/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToFirst() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToFirst	github/leveldb-1.18/db/version_set.cc	/^  virtual void SeekToFirst() { index_ = 0; }$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToFirst	github/leveldb-1.18/table/block.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::Block::Iter
SeekToFirst	github/leveldb-1.18/table/iterator.cc	/^                virtual void SeekToFirst() { }$/;"	f	class:leveldb::__anon18::EmptyIterator
SeekToFirst	github/leveldb-1.18/table/iterator_wrapper.h	/^  void SeekToFirst()        { assert(iter_); iter_->SeekToFirst(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToFirst	github/leveldb-1.18/table/merger.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::__anon20::MergingIterator
SeekToFirst	github/leveldb-1.18/table/table_test.cc	/^  virtual void SeekToFirst() { iter_->SeekToFirst(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToFirst	github/leveldb-1.18/table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToFirst() {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
SeekToLast	github/leveldb-1.18/db/db_iter.cc	/^void DBIter::SeekToLast() {$/;"	f	class:leveldb::__anon10::DBIter
SeekToLast	github/leveldb-1.18/db/db_test.cc	/^    virtual void SeekToLast() {$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToLast	github/leveldb-1.18/db/memtable.cc	/^  virtual void SeekToLast() { iter_.SeekToLast(); }$/;"	f	class:leveldb::MemTableIterator
SeekToLast	github/leveldb-1.18/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToLast() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToLast	github/leveldb-1.18/db/version_set.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToLast	github/leveldb-1.18/table/block.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Block::Iter
SeekToLast	github/leveldb-1.18/table/iterator.cc	/^                virtual void SeekToLast() { }$/;"	f	class:leveldb::__anon18::EmptyIterator
SeekToLast	github/leveldb-1.18/table/iterator_wrapper.h	/^  void SeekToLast()         { assert(iter_); iter_->SeekToLast();  Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToLast	github/leveldb-1.18/table/merger.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::__anon20::MergingIterator
SeekToLast	github/leveldb-1.18/table/table_test.cc	/^  virtual void SeekToLast() { iter_->SeekToLast(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToLast	github/leveldb-1.18/table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToLast() {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
SeekToRestartPoint	github/leveldb-1.18/table/block.cc	/^  void SeekToRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
Sequence	github/leveldb-1.18/db/write_batch.cc	/^SequenceNumber WriteBatchInternal::Sequence(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
SequenceNumber	github/leveldb-1.18/db/dbformat.h	/^typedef uint64_t SequenceNumber;$/;"	t	namespace:leveldb
SequentialFile	github/leveldb-1.18/include/leveldb/env.h	/^  SequentialFile() { }$/;"	f	class:leveldb::SequentialFile
SequentialFile	github/leveldb-1.18/include/leveldb/env.h	/^class SequentialFile {$/;"	c	namespace:leveldb
SequentialFileImpl	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  explicit SequentialFileImpl(FileState* file) : file_(file), pos_(0) {$/;"	f	class:leveldb::__anon25::SequentialFileImpl
SequentialFileImpl	github/leveldb-1.18/helpers/memenv/memenv.cc	/^class SequentialFileImpl : public SequentialFile {$/;"	c	namespace:leveldb::__anon25	file:
Set	github/leveldb-1.18/db/skiplist_test.cc	/^    void Set(int k, intptr_t v) {$/;"	f	struct:leveldb::ConcurrentTest::State
Set	github/leveldb-1.18/table/iterator_wrapper.h	/^  void Set(Iterator* iter) {$/;"	f	class:leveldb::IteratorWrapper
SetAllowed	github/leveldb-1.18/util/env_posix.cc	/^  void SetAllowed(intptr_t v) {$/;"	f	class:leveldb::__anon32::MmapLimiter	file:
SetBool	github/leveldb-1.18/util/env_test.cc	/^static void SetBool(void* ptr) {$/;"	f	namespace:leveldb
SetByte	github/leveldb-1.18/db/log_test.cc	/^  void SetByte(int offset, char new_byte) {$/;"	f	class:leveldb::log::LogTest
SetCapacity	github/leveldb-1.18/util/cache.cc	/^  void SetCapacity(size_t capacity) { capacity_ = capacity; }$/;"	f	class:leveldb::__anon27::LRUCache
SetCompactPointer	github/leveldb-1.18/db/version_edit.h	/^  void SetCompactPointer(int level, const InternalKey& key) {$/;"	f	class:leveldb::VersionEdit
SetComparatorName	github/leveldb-1.18/db/version_edit.h	/^  void SetComparatorName(const Slice& name) {$/;"	f	class:leveldb::VersionEdit
SetContents	github/leveldb-1.18/db/write_batch.cc	/^void WriteBatchInternal::SetContents(WriteBatch* b, const Slice& contents) {$/;"	f	class:leveldb::WriteBatchInternal
SetCount	github/leveldb-1.18/db/write_batch.cc	/^void WriteBatchInternal::SetCount(WriteBatch* b, int n) {$/;"	f	class:leveldb::WriteBatchInternal
SetCurrentFile	github/leveldb-1.18/db/filename.cc	/^Status SetCurrentFile(Env* env, const std::string& dbname,$/;"	f	namespace:leveldb
SetDataIterator	github/leveldb-1.18/table/two_level_iterator.cc	/^void TwoLevelIterator::SetDataIterator(Iterator* data_iter) {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
SetFrom	github/leveldb-1.18/db/dbformat.h	/^  void SetFrom(const ParsedInternalKey& p) {$/;"	f	class:leveldb::InternalKey
SetLastSequence	github/leveldb-1.18/db/version_edit.h	/^  void SetLastSequence(SequenceNumber seq) {$/;"	f	class:leveldb::VersionEdit
SetLastSequence	github/leveldb-1.18/db/version_set.h	/^  void SetLastSequence(uint64_t s) {$/;"	f	class:leveldb::VersionSet
SetLogNumber	github/leveldb-1.18/db/version_edit.h	/^  void SetLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetNext	github/leveldb-1.18/db/skiplist.h	/^  void SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
SetNextFile	github/leveldb-1.18/db/version_edit.h	/^  void SetNextFile(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetPrevLogNumber	github/leveldb-1.18/db/version_edit.h	/^  void SetPrevLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetSequence	github/leveldb-1.18/db/write_batch.cc	/^void WriteBatchInternal::SetSequence(WriteBatch* b, SequenceNumber seq) {$/;"	f	class:leveldb::WriteBatchInternal
SetupOtherInputs	github/leveldb-1.18/db/version_set.cc	/^void VersionSet::SetupOtherInputs(Compaction* c) {$/;"	f	class:leveldb::VersionSet
Shard	github/leveldb-1.18/util/cache.cc	/^  static uint32_t Shard(uint32_t hash) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache	file:
ShardedLRUCache	github/leveldb-1.18/util/cache.cc	/^  explicit ShardedLRUCache(size_t capacity)$/;"	f	class:leveldb::__anon27::ShardedLRUCache
ShardedLRUCache	github/leveldb-1.18/util/cache.cc	/^class ShardedLRUCache : public Cache {$/;"	c	namespace:leveldb::__anon27	file:
SharedState	github/leveldb-1.18/db/db_bench.cc	/^  SharedState() : cv(&mu) { }$/;"	f	struct:leveldb::__anon7::SharedState
SharedState	github/leveldb-1.18/db/db_bench.cc	/^struct SharedState {$/;"	s	namespace:leveldb::__anon7	file:
ShellSort	work/test_job/day10/SortTime.cpp	/^void SortTime::ShellSort() $/;"	f	class:SortTime
ShellSort	work/test_job/sort/src/SortTime.cpp	/^void SortTime::ShellSort() $/;"	f	class:SortTime
ShellSort	work/test_job/sort_job/SortTime.cpp	/^void SortTime::ShellSort() $/;"	f	class:SortTime
ShortDayName	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^string TimestampFunctions::ShortDayName(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
ShortMonthName	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^string TimestampFunctions::ShortMonthName(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
ShortSuccessor	github/leveldb-1.18/db/dbformat_test.cc	/^static std::string ShortSuccessor(const std::string& s) {$/;"	f	namespace:leveldb
Shorten	github/leveldb-1.18/db/dbformat_test.cc	/^static std::string Shorten(const std::string& s, const std::string& l) {$/;"	f	namespace:leveldb
ShouldStopBefore	github/leveldb-1.18/db/version_set.cc	/^bool Compaction::ShouldStopBefore(const Slice& internal_key) {$/;"	f	class:leveldb::Compaction
ShowCurTime	work/test_job/day12/data_packet/src/Time.cpp	/^int ShowCurTime()$/;"	f
ShowCurTime	work/test_job/day16/data_packet/src/Time.cpp	/^int ShowCurTime()$/;"	f
ShowCurTime	work/test_job/day17/data_packet/src/DataPacket.cpp	/^int ShowCurTime()$/;"	f
ShrinkSize	github/leveldb-1.18/db/log_test.cc	/^  void ShrinkSize(int bytes) {$/;"	f	class:leveldb::log::LogTest
Signal	github/leveldb-1.18/port/port_posix.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
SignalAll	github/leveldb-1.18/port/port_posix.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
Size	github/leveldb-1.18/db/autocompact_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::AutoCompactTest
Size	github/leveldb-1.18/db/db_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Size	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  uint64_t Size() const { return size_; }$/;"	f	class:leveldb::__anon25::FileState
Size	github/leveldb-1.18/table/table_test.cc	/^  uint64_t Size() const { return contents_.size(); }$/;"	f	class:leveldb::StringSource
Size	study/Impala/runtime/timestamp-value.h	/^            static size_t Size() {$/;"	f	class:impala::TimestampValue
Skewed	github/leveldb-1.18/util/random.h	/^  uint32_t Skewed(int max_log) {$/;"	f	class:leveldb::Random
Skip	github/leveldb-1.18/db/log_test.cc	/^    virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::log::LogTest::StringSource
Skip	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon25::SequentialFileImpl
Skip	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon32::PosixSequentialFile
SkipEmptyDataBlocksBackward	github/leveldb-1.18/table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksBackward() {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
SkipEmptyDataBlocksForward	github/leveldb-1.18/table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksForward() {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
SkipList	github/leveldb-1.18/db/skiplist.h	/^SkipList<Key,Comparator>::SkipList(Comparator cmp, Arena* arena)$/;"	f	class:leveldb::SkipList
SkipList	github/leveldb-1.18/db/skiplist.h	/^class SkipList {$/;"	c	namespace:leveldb
SkipTest	github/leveldb-1.18/db/skiplist_test.cc	/^class SkipTest { };$/;"	c	namespace:leveldb	file:
SkipToInitialBlock	github/leveldb-1.18/db/log_reader.cc	/^bool Reader::SkipToInitialBlock() {$/;"	f	class:leveldb::log::Reader
SleepForMicroseconds	github/leveldb-1.18/include/leveldb/env.h	/^  void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::EnvWrapper
SleepForMicroseconds	github/leveldb-1.18/util/env_posix.cc	/^  virtual void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::__anon32::PosixEnv
Slice	github/leveldb-1.18/include/leveldb/slice.h	/^  Slice() : data_(""), size_(0) { }$/;"	f	class:leveldb::Slice
Slice	github/leveldb-1.18/include/leveldb/slice.h	/^  Slice(const char* d, size_t n) : data_(d), size_(n) { }$/;"	f	class:leveldb::Slice
Slice	github/leveldb-1.18/include/leveldb/slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) { }$/;"	f	class:leveldb::Slice
Slice	github/leveldb-1.18/include/leveldb/slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) { }$/;"	f	class:leveldb::Slice
Slice	github/leveldb-1.18/include/leveldb/slice.h	/^class Slice {$/;"	c	namespace:leveldb
SnappyCompress	github/leveldb-1.18/db/db_bench.cc	/^  void SnappyCompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SnappyCompressionSupported	github/leveldb-1.18/table/table_test.cc	/^static bool SnappyCompressionSupported() {$/;"	f	namespace:leveldb
SnappyUncompress	github/leveldb-1.18/db/db_bench.cc	/^  void SnappyUncompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Snappy_Compress	github/leveldb-1.18/port/port_posix.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	github/leveldb-1.18/port/port_posix.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	github/leveldb-1.18/port/port_posix.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snapshot	github/leveldb-1.18/include/leveldb/db.h	/^class Snapshot {$/;"	c	namespace:leveldb
SnapshotImpl	github/leveldb-1.18/db/snapshot.h	/^class SnapshotImpl : public Snapshot {$/;"	c	namespace:leveldb
SnapshotList	github/leveldb-1.18/db/snapshot.h	/^  SnapshotList() {$/;"	f	class:leveldb::SnapshotList
SnapshotList	github/leveldb-1.18/db/snapshot.h	/^class SnapshotList {$/;"	c	namespace:leveldb
SomeFileOverlapsRange	github/leveldb-1.18/db/version_set.cc	/^bool SomeFileOverlapsRange($/;"	f	namespace:leveldb
SortTime	work/test_job/day10/SortTime.h	/^		SortTime(int n)$/;"	f	class:SortTime
SortTime	work/test_job/day10/SortTime.h	/^class SortTime$/;"	c
SortTime	work/test_job/sort/include/SortTime.h	/^		SortTime(int n)$/;"	f	class:SortTime
SortTime	work/test_job/sort/include/SortTime.h	/^class SortTime$/;"	c
SortTime	work/test_job/sort_job/SortTime.h	/^		SortTime(int n)$/;"	f	class:SortTime
SortTime	work/test_job/sort_job/SortTime.h	/^class SortTime$/;"	c
SpecialEnv	github/leveldb-1.18/db/db_test.cc	/^  explicit SpecialEnv(Env* base) : EnvWrapper(base) {$/;"	f	class:leveldb::SpecialEnv
SpecialEnv	github/leveldb-1.18/db/db_test.cc	/^class SpecialEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
Staff	test_base_child.cpp	/^        Staff() { }$/;"	f	class:Staff
Staff	test_base_child.cpp	/^class Staff  {$/;"	c	file:
StandardDeviation	github/leveldb-1.18/util/histogram.cc	/^double Histogram::StandardDeviation() const {$/;"	f	class:leveldb::Histogram
Start	github/leveldb-1.18/db/db_bench.cc	/^  void Start() {$/;"	f	class:leveldb::__anon7::Stats
Start	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
Start	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
StartBlock	github/leveldb-1.18/table/filter_block.cc	/^void FilterBlockBuilder::StartBlock(uint64_t block_offset) {$/;"	f	class:leveldb::FilterBlockBuilder
StartPhase	github/leveldb-1.18/db/c_test.c	/^static void StartPhase(const char* name) {$/;"	f	file:
StartThread	github/leveldb-1.18/include/leveldb/env.h	/^  void StartThread(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
StartThread	github/leveldb-1.18/util/env_posix.cc	/^void PosixEnv::StartThread(void (*function)(void* arg), void* arg) {$/;"	f	class:leveldb::__anon32::PosixEnv
StartThreadState	github/leveldb-1.18/util/env_posix.cc	/^struct StartThreadState {$/;"	s	namespace:leveldb::__anon32::__anon33	file:
StartThreadWrapper	github/leveldb-1.18/util/env_posix.cc	/^static void* StartThreadWrapper(void* arg) {$/;"	f	namespace:leveldb::__anon32
State	github/leveldb-1.18/db/skiplist_test.cc	/^    State() {$/;"	f	struct:leveldb::ConcurrentTest::State
State	github/leveldb-1.18/db/skiplist_test.cc	/^  struct State {$/;"	s	class:leveldb::ConcurrentTest	file:
State	github/leveldb-1.18/util/env_test.cc	/^struct State {$/;"	s	namespace:leveldb	file:
Stats	github/leveldb-1.18/db/db_bench.cc	/^  Stats() { Start(); }$/;"	f	class:leveldb::__anon7::Stats
Stats	github/leveldb-1.18/db/db_bench.cc	/^class Stats {$/;"	c	namespace:leveldb::__anon7	file:
Status	github/leveldb-1.18/include/leveldb/status.h	/^  Status() : state_(NULL) { }$/;"	f	class:leveldb::Status
Status	github/leveldb-1.18/include/leveldb/status.h	/^class Status {$/;"	c	namespace:leveldb
Status	github/leveldb-1.18/include/leveldb/status.h	/^inline Status::Status(const Status& s) {$/;"	f	class:leveldb::Status
Status	github/leveldb-1.18/util/status.cc	/^Status::Status(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:leveldb::Status
StdoutPrinter	github/leveldb-1.18/db/leveldb_main.cc	/^class StdoutPrinter : public WritableFile {$/;"	c	namespace:leveldb::__anon17	file:
StepErrorCheck	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static void StepErrorCheck(int status) {$/;"	f	file:
Stop	github/leveldb-1.18/db/db_bench.cc	/^  void Stop() {$/;"	f	class:leveldb::__anon7::Stats
Stop	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
Stop	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
StringDest	github/leveldb-1.18/db/log_test.cc	/^  class StringDest : public WritableFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSink	github/leveldb-1.18/table/table_test.cc	/^class StringSink: public WritableFile {$/;"	c	namespace:leveldb	file:
StringSource	github/leveldb-1.18/db/log_test.cc	/^    StringSource() : force_error_(false), returned_partial_(false) { }$/;"	f	class:leveldb::log::LogTest::StringSource
StringSource	github/leveldb-1.18/db/log_test.cc	/^  class StringSource : public SequentialFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSource	github/leveldb-1.18/table/table_test.cc	/^  StringSource(const Slice& contents)$/;"	f	class:leveldb::StringSource
StringSource	github/leveldb-1.18/table/table_test.cc	/^class StringSource: public RandomAccessFile {$/;"	c	namespace:leveldb	file:
StringValFromTimestamp	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^StringVal TimestampFunctions::StringValFromTimestamp(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
Student	study/dada/person/person.h	/^class Student:public Person{$/;"	c
Student	study/dada/person_job/person.h	/^class Student:public Person{$/;"	c
Student	work/person_design/include/student.h	/^		Student(const Student& obj) : m_school(obj.m_school),$/;"	f	class:Student
Student	work/person_design/include/student.h	/^        Student() {};$/;"	f	class:Student
Student	work/person_design/include/student.h	/^        Student(string name_t, int age_t, string ID_t, bool gender_t, $/;"	f	class:Student
Student	work/person_design/include/student.h	/^class Student : public Human {$/;"	c
Sync	github/leveldb-1.18/db/leveldb_main.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon17::StdoutPrinter
Sync	github/leveldb-1.18/db/log_test.cc	/^    virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Sync	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon25::WritableFileImpl
Sync	github/leveldb-1.18/table/table_test.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Sync	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status Sync() {$/;"	f	class:leveldb::__anon32::PosixWritableFile
SyncDirIfManifest	github/leveldb-1.18/util/env_posix.cc	/^  Status SyncDirIfManifest() {$/;"	f	class:leveldb::__anon32::PosixWritableFile
TABLE_TEST	github/leveldb-1.18/table/table_test.cc	/^  TABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
TCONCAT	github/leveldb-1.18/util/testharness.h	114;"	d
TCONCAT1	github/leveldb-1.18/util/testharness.h	115;"	d
TEST	github/leveldb-1.18/db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadAll) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadHalf) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputError) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputErrorParanoid) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, CorruptedDescriptor) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, MissingDescriptor) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, NewFileErrorDuringWrite) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, RecoverWriteError) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, Recovery) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, SequenceNumberRecovery) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, TableFile) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, TableFileIndexData) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, TableFileRepair) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/corruption_test.cc	/^TEST(CorruptionTest, UnrelatedKeys) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, ApproximateSizes) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, ApproximateSizes_MixOfSmallAndLarge) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, BloomFilter) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, CompactionsGenerateMultipleFiles) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, ComparatorCheck) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, CustomComparator) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, DBOpen_Options) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, DeletionMarkers1) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, DeletionMarkers2) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, Empty) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, FilesDeletedAfterCompaction) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, GetEncountersEmptyLevel) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, GetFromImmutableLayer) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, GetFromVersions) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, GetLevel0Ordering) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, GetOrderedByLevels) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, GetPicksCorrectFile) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, GetSnapshot) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, HiddenValuesAreRemoved) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, IterEmpty) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, IterMulti) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, IterMultiWithDelete) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, IterSingle) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, IterSmallAndLargeMix) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, IteratorPinsRef) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_a) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_b) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, Locking) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, ManifestWriteError) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, ManualCompaction) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, MinorCompactionsHappen) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, MissingSSTFile) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, MultiThreaded) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, NoSpace) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, NonWritableFileSystem) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, OverlapInLevel0) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, PutDeleteGet) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, Randomized) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, Recover) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, RecoverDuringMemtableCompaction) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, RecoverWithLargeLog) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, RecoveryWithEmptyLog) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, RepeatedWritesToSameKey) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, Snapshot) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, SparseMerge) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, StillReadSST) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/db_test.cc	/^TEST(DBTest, WriteSyncError) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortSeparator) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortestSuccessor) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/dbformat_test.cc	/^TEST(FormatTest, InternalKey_EncodeDecode) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/filename_test.cc	/^TEST(FileNameTest, Construction) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/filename_test.cc	/^TEST(FileNameTest, Parse) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, AlignedEof) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, BadLength) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, BadLengthAtEndIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, BadRecordType) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ChecksumMismatch) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, Empty) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ErrorJoinsRecords) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, Fragmentation) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ManyBlocks) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, MarginalTrailer) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, MarginalTrailer2) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, MissingLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, PartialLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, RandomRead) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadEnd) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadError) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadFourthFirstBlockTrailer) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadFourthLastBlock) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadFourthMiddleBlock) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadFourthOneOff) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadFourthStart) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadPastEnd) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadSecondOneOff) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadSecondStart) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadSecondTenThousand) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadStart) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadThirdOneOff) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadThirdStart) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ReadWrite) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, ShortTrailer) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, TruncatedTrailingRecordIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, UnexpectedFirstType) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, UnexpectedFullType) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, UnexpectedLastType) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/log_test.cc	/^TEST(LogTest, UnexpectedMiddleType) {$/;"	f	namespace:leveldb::log
TEST	github/leveldb-1.18/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent1) { RunConcurrent(1); }$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent2) { RunConcurrent(2); }$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent3) { RunConcurrent(3); }$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent4) { RunConcurrent(4); }$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent5) { RunConcurrent(5); }$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/skiplist_test.cc	/^TEST(SkipTest, ConcurrentWithoutThreads) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/skiplist_test.cc	/^TEST(SkipTest, Empty) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/skiplist_test.cc	/^TEST(SkipTest, InsertAndLookup) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/version_edit_test.cc	/^TEST(VersionEditTest, EncodeDecode) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/version_set_test.cc	/^TEST(FindFileTest, Empty) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/version_set_test.cc	/^TEST(FindFileTest, Multiple) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/version_set_test.cc	/^TEST(FindFileTest, MultipleNullBoundaries) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/version_set_test.cc	/^TEST(FindFileTest, OverlapSequenceChecks) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/version_set_test.cc	/^TEST(FindFileTest, OverlappingFiles) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/version_set_test.cc	/^TEST(FindFileTest, Single) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/write_batch_test.cc	/^TEST(WriteBatchTest, Append) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/write_batch_test.cc	/^TEST(WriteBatchTest, Corruption) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/write_batch_test.cc	/^TEST(WriteBatchTest, Empty) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/db/write_batch_test.cc	/^TEST(WriteBatchTest, Multiple) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Basics) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, DBTest) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, LargeWrite) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Locks) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Misc) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/issues/issue178_test.cc	/^TEST(Issue178, Test) {$/;"	f	namespace:__anon4
TEST	github/leveldb-1.18/issues/issue200_test.cc	/^TEST(Issue200, Test) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/filter_block_test.cc	/^TEST(FilterBlockTest, EmptyBuilder) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/filter_block_test.cc	/^TEST(FilterBlockTest, MultiChunk) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/filter_block_test.cc	/^TEST(FilterBlockTest, SingleChunk) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/table_test.cc	/^TEST(Harness, Empty) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/table_test.cc	/^TEST(Harness, Randomized) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/table_test.cc	/^TEST(Harness, RandomizedLongDB) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/table_test.cc	/^TEST(Harness, SimpleEmptyKey) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/table_test.cc	/^TEST(Harness, SimpleMulti) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/table_test.cc	/^TEST(Harness, SimpleSingle) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/table_test.cc	/^TEST(Harness, SimpleSpecialKey) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/table_test.cc	/^TEST(Harness, ZeroRestartPointsInBlock) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/table_test.cc	/^TEST(MemTableTest, Simple) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfCompressed) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfPlain) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/arena_test.cc	/^TEST(ArenaTest, Empty) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/arena_test.cc	/^TEST(ArenaTest, Simple) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/bloom_test.cc	/^TEST(BloomTest, EmptyFilter) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/bloom_test.cc	/^TEST(BloomTest, Small) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/bloom_test.cc	/^TEST(BloomTest, VaryingLengths) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/cache_test.cc	/^TEST(CacheTest, EntriesArePinned) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/cache_test.cc	/^TEST(CacheTest, Erase) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/cache_test.cc	/^TEST(CacheTest, EvictionPolicy) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/cache_test.cc	/^TEST(CacheTest, HeavyEntries) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/cache_test.cc	/^TEST(CacheTest, HitAndMiss) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/cache_test.cc	/^TEST(CacheTest, NewId) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/coding_test.cc	/^TEST(Coding, EncodingOutput) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/coding_test.cc	/^TEST(Coding, Fixed32) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/coding_test.cc	/^TEST(Coding, Fixed64) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/coding_test.cc	/^TEST(Coding, Strings) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/coding_test.cc	/^TEST(Coding, Varint32) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/coding_test.cc	/^TEST(Coding, Varint32Overflow) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/coding_test.cc	/^TEST(Coding, Varint32Truncation) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/coding_test.cc	/^TEST(Coding, Varint64) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/coding_test.cc	/^TEST(Coding, Varint64Overflow) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/coding_test.cc	/^TEST(Coding, Varint64Truncation) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/crc32c_test.cc	/^TEST(CRC, Extend) {$/;"	f	namespace:leveldb::crc32c
TEST	github/leveldb-1.18/util/crc32c_test.cc	/^TEST(CRC, Mask) {$/;"	f	namespace:leveldb::crc32c
TEST	github/leveldb-1.18/util/crc32c_test.cc	/^TEST(CRC, StandardResults) {$/;"	f	namespace:leveldb::crc32c
TEST	github/leveldb-1.18/util/crc32c_test.cc	/^TEST(CRC, Values) {$/;"	f	namespace:leveldb::crc32c
TEST	github/leveldb-1.18/util/env_test.cc	/^TEST(EnvPosixTest, RunImmediately) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/env_test.cc	/^TEST(EnvPosixTest, RunMany) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/env_test.cc	/^TEST(EnvPosixTest, StartThread) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/hash_test.cc	/^TEST(HASH, SignedUnsignedIssue) {$/;"	f	namespace:leveldb
TEST	github/leveldb-1.18/util/testharness.h	117;"	d
TEST	study/Impala/runtime/timestamp-test.cpp	/^TEST(TimestampTest, Basic) {$/;"	f	namespace:impala
TESTHARNESS	github/leveldb-1.18/Makefile	/^TESTHARNESS = .\/util\/testharness.o $(TESTUTIL)$/;"	m
TESTS	github/leveldb-1.18/Makefile	/^TESTS = \\$/;"	m
TESTUTIL	github/leveldb-1.18/Makefile	/^TESTUTIL = .\/util\/testutil.o$/;"	m
TEST_CompactMemTable	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::TEST_CompactMemTable() {$/;"	f	class:leveldb::DBImpl
TEST_CompactRange	github/leveldb-1.18/db/db_impl.cc	/^void DBImpl::TEST_CompactRange(int level, const Slice* begin,const Slice* end) {$/;"	f	class:leveldb::DBImpl
TEST_MaxNextLevelOverlappingBytes	github/leveldb-1.18/db/db_impl.cc	/^int64_t DBImpl::TEST_MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::DBImpl
TEST_NewInternalIterator	github/leveldb-1.18/db/db_impl.cc	/^Iterator* DBImpl::TEST_NewInternalIterator() {$/;"	f	class:leveldb::DBImpl
THURSDAY	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const char* TimestampFunctions::THURSDAY = "Thursday";$/;"	m	class:impala::TimestampFunctions	file:
THURSDAY	study/Impala/timestamp_src/timestamp-functions.h	/^            static const char* THURSDAY;$/;"	m	class:impala::TimestampFunctions
TIME_H_	work/test_job/day12/data_packet/include/Time.h	11;"	d
TIME_H_	work/test_job/day16/data_packet/include/Time.h	11;"	d
TM_MONTH_OFFSET	study/Impala/runtime/timestamp-value.cpp	/^const unsigned short TM_MONTH_OFFSET = 1;$/;"	v
TM_YEAR_OFFSET	study/Impala/runtime/timestamp-value.cpp	/^const unsigned short TM_YEAR_OFFSET = 1900;$/;"	v
TUESDAY	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const char* TimestampFunctions::TUESDAY = "Tuesday";$/;"	m	class:impala::TimestampFunctions	file:
TUESDAY	study/Impala/timestamp_src/timestamp-functions.h	/^            static const char* TUESDAY;$/;"	m	class:impala::TimestampFunctions
TZ_OFFSET	study/Impala/runtime/timestamp-parse-util.h	/^        TZ_OFFSET,$/;"	e	enum:impala::DateTimeFormatTokenType
Table	github/leveldb-1.18/db/memtable.h	/^  typedef SkipList<const char*, KeyComparator> Table;$/;"	t	class:leveldb::MemTable
Table	github/leveldb-1.18/include/leveldb/table.h	/^  explicit Table(Rep* rep) { rep_ = rep; }$/;"	f	class:leveldb::Table
Table	github/leveldb-1.18/include/leveldb/table.h	/^class Table {$/;"	c	namespace:leveldb
TableAndFile	github/leveldb-1.18/db/table_cache.cc	/^struct TableAndFile {$/;"	s	namespace:leveldb	file:
TableBuilder	github/leveldb-1.18/include/leveldb/table_builder.h	/^class TableBuilder {$/;"	c	namespace:leveldb
TableBuilder	github/leveldb-1.18/table/table_builder.cc	/^TableBuilder::TableBuilder(const Options& options, WritableFile* file)$/;"	f	class:leveldb::TableBuilder
TableCache	github/leveldb-1.18/db/table_cache.cc	/^TableCache::TableCache(const std::string& dbname,$/;"	f	class:leveldb::TableCache
TableCache	github/leveldb-1.18/db/table_cache.h	/^class TableCache {$/;"	c	namespace:leveldb
TableConstructor	github/leveldb-1.18/table/table_test.cc	/^  TableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::TableConstructor
TableConstructor	github/leveldb-1.18/table/table_test.cc	/^class TableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
TableFileName	github/leveldb-1.18/db/filename.cc	/^std::string TableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
TableInfo	github/leveldb-1.18/db/repair.cc	/^  struct TableInfo {$/;"	s	class:leveldb::__anon5::Repairer	file:
TableTest	github/leveldb-1.18/table/table_test.cc	/^class TableTest { };$/;"	c	namespace:leveldb	file:
Tag	github/leveldb-1.18/db/version_edit.cc	/^enum Tag {$/;"	g	namespace:leveldb	file:
TelepathicFunction	study/dada/static/statics.cpp	/^void Cat::TelepathicFunction()$/;"	f	class:Cat
TempFileName	github/leveldb-1.18/db/filename.cc	/^std::string TempFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
Test	github/leveldb-1.18/table/table_test.cc	/^  void Test(Random* rnd) {$/;"	f	class:leveldb::Harness
Test	github/leveldb-1.18/util/testharness.cc	/^struct Test {$/;"	s	namespace:leveldb::test::__anon29	file:
TestArgs	github/leveldb-1.18/table/table_test.cc	/^struct TestArgs {$/;"	s	namespace:leveldb	file:
TestBackwardScan	github/leveldb-1.18/table/table_test.cc	/^  void TestBackwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestEncodeDecode	github/leveldb-1.18/db/version_edit_test.cc	/^static void TestEncodeDecode(const VersionEdit& edit) {$/;"	f	namespace:leveldb
TestForwardScan	github/leveldb-1.18/table/table_test.cc	/^  void TestForwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestHashFilter	github/leveldb-1.18/table/filter_block_test.cc	/^class TestHashFilter : public FilterPolicy {$/;"	c	namespace:leveldb	file:
TestKey	github/leveldb-1.18/db/dbformat_test.cc	/^static void TestKey(const std::string& key,$/;"	f	namespace:leveldb
TestRandomAccess	github/leveldb-1.18/table/table_test.cc	/^  void TestRandomAccess(Random* rnd,$/;"	f	class:leveldb::Harness
TestState	github/leveldb-1.18/db/skiplist_test.cc	/^  explicit TestState(int s)$/;"	f	class:leveldb::TestState
TestState	github/leveldb-1.18/db/skiplist_test.cc	/^class TestState {$/;"	c	namespace:leveldb	file:
TestTimestampTokens	study/Impala/runtime/timestamp-test.cpp	/^void TestTimestampTokens(vector<TimestampToken>* toks, int year, int month,$/;"	f	namespace:impala
TestType	github/leveldb-1.18/table/table_test.cc	/^enum TestType {$/;"	g	namespace:leveldb	file:
Tester	github/leveldb-1.18/util/testharness.h	/^  Tester(const char* f, int l)$/;"	f	class:leveldb::test::Tester
Tester	github/leveldb-1.18/util/testharness.h	/^class Tester {$/;"	c	namespace:leveldb::test
ThreadArg	github/leveldb-1.18/db/db_bench.cc	/^  struct ThreadArg {$/;"	s	class:leveldb::Benchmark	file:
ThreadBody	github/leveldb-1.18/db/db_bench.cc	/^  static void ThreadBody(void* v) {$/;"	f	class:leveldb::Benchmark	file:
ThreadBody	github/leveldb-1.18/util/env_test.cc	/^static void ThreadBody(void* arg) {$/;"	f	namespace:leveldb
ThreadState	github/leveldb-1.18/db/db_bench.cc	/^  ThreadState(int index)$/;"	f	struct:leveldb::__anon7::ThreadState
ThreadState	github/leveldb-1.18/db/db_bench.cc	/^struct ThreadState {$/;"	s	namespace:leveldb::__anon7	file:
Time	study/dada/clock_struct/clock.h	/^struct Time{$/;"	s
TimeCost	work/test_job/day12/data_packet/src/Time.cpp	/^void TimeCost(struct timeval &tm_start, struct timeval &tm_end)$/;"	f
TimeCost	work/test_job/day16/data_packet/src/Time.cpp	/^void TimeCost()$/;"	f
TimeCost	work/test_job/day17/data_packet/src/DataPacket.cpp	/^void TimeCost(struct timeval &tm_start, struct timeval &tm_end)$/;"	f
TimeEnd	work/test_job/day10/SortTime.cpp	/^void SortTime::TimeEnd()$/;"	f	class:SortTime
TimeEnd	work/test_job/day12/data_packet/src/Time.cpp	/^int TimeEnd(struct timeval &tm_end)$/;"	f
TimeEnd	work/test_job/day16/data_packet/src/Time.cpp	/^int TimeEnd()$/;"	f
TimeEnd	work/test_job/day17/data_packet/src/DataPacket.cpp	/^int TimeEnd(struct timeval &tm_end)$/;"	f
TimeEnd	work/test_job/sort/src/SortTime.cpp	/^void SortTime::TimeEnd()$/;"	f	class:SortTime
TimeEnd	work/test_job/sort_job/SortTime.cpp	/^void SortTime::TimeEnd()$/;"	f	class:SortTime
TimeOfDay	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^StringVal TimestampFunctions::TimeOfDay(FunctionContext* context) {$/;"	f	class:impala::TimestampFunctions
TimeStart	work/test_job/day10/SortTime.h	/^		void TimeStart()$/;"	f	class:SortTime
TimeStart	work/test_job/day12/data_packet/src/Time.cpp	/^int TimeStart(struct timeval &tm_start)$/;"	f
TimeStart	work/test_job/day16/data_packet/src/Time.cpp	/^int TimeStart()$/;"	f
TimeStart	work/test_job/day17/data_packet/src/DataPacket.cpp	/^int TimeStart(struct timeval &tm_start)$/;"	f
TimeStart	work/test_job/sort/include/SortTime.h	/^		void TimeStart()$/;"	f	class:SortTime
TimeStart	work/test_job/sort_job/SortTime.h	/^		void TimeStart()$/;"	f	class:SortTime
TimestampCmp	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::TimestampCmp(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
TimestampFormatTC	study/Impala/runtime/timestamp-test.cpp	/^  TimestampFormatTC(long ts, const char* fmt, const char* str, bool should_fail = false)$/;"	f	struct:impala::TimestampFormatTC
TimestampFormatTC	study/Impala/runtime/timestamp-test.cpp	/^struct TimestampFormatTC {$/;"	s	namespace:impala	file:
TimestampFunctions	study/Impala/timestamp_src/timestamp-functions.h	/^    class TimestampFunctions {$/;"	c	namespace:impala
TimestampParser	study/Impala/runtime/timestamp-parse-util.h	/^    class TimestampParser {$/;"	c	namespace:impala
TimestampTC	study/Impala/runtime/timestamp-test.cpp	/^  TimestampTC(const char* fmt, const char* str, bool fmt_should_fail = true,$/;"	f	struct:impala::TimestampTC
TimestampTC	study/Impala/runtime/timestamp-test.cpp	/^  TimestampTC(const char* fmt, const char* str, bool should_format,$/;"	f	struct:impala::TimestampTC
TimestampTC	study/Impala/runtime/timestamp-test.cpp	/^struct TimestampTC {$/;"	s	namespace:impala	file:
TimestampToken	study/Impala/runtime/timestamp-test.cpp	/^  TimestampToken(const char* fmt, int val)$/;"	f	struct:impala::TimestampToken
TimestampToken	study/Impala/runtime/timestamp-test.cpp	/^  TimestampToken(const char* fmt, int val, const char* str)$/;"	f	struct:impala::TimestampToken
TimestampToken	study/Impala/runtime/timestamp-test.cpp	/^struct TimestampToken {$/;"	s	namespace:impala	file:
TimestampValue	study/Impala/runtime/timestamp-value.cpp	/^    TimestampValue::TimestampValue(const char* str, int len) {$/;"	f	class:impala::TimestampValue
TimestampValue	study/Impala/runtime/timestamp-value.cpp	/^    TimestampValue::TimestampValue(const char* str, int len,$/;"	f	class:impala::TimestampValue
TimestampValue	study/Impala/runtime/timestamp-value.h	/^                explicit TimestampValue(Number unix_time) {$/;"	f	class:impala::TimestampValue
TimestampValue	study/Impala/runtime/timestamp-value.h	/^            TimestampValue() {}$/;"	f	class:impala::TimestampValue
TimestampValue	study/Impala/runtime/timestamp-value.h	/^            TimestampValue(const TimestampValue& tv) : time_(tv.time_), date_(tv.date_) {}$/;"	f	class:impala::TimestampValue
TimestampValue	study/Impala/runtime/timestamp-value.h	/^            TimestampValue(const boost::gregorian::date& d,$/;"	f	class:impala::TimestampValue
TimestampValue	study/Impala/runtime/timestamp-value.h	/^            TimestampValue(const boost::posix_time::ptime& t)$/;"	f	class:impala::TimestampValue
TimestampValue	study/Impala/runtime/timestamp-value.h	/^            TimestampValue(int64_t unix_time, int64_t nanos) {$/;"	f	class:impala::TimestampValue
TimestampValue	study/Impala/runtime/timestamp-value.h	/^            explicit TimestampValue(double unix_time) {$/;"	f	class:impala::TimestampValue
TimestampValue	study/Impala/runtime/timestamp-value.h	/^    class TimestampValue {$/;"	c	namespace:impala
TmpDir	github/leveldb-1.18/util/testharness.cc	/^std::string TmpDir() {$/;"	f	namespace:leveldb::test
ToDate	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^StringVal TimestampFunctions::ToDate(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
ToIsoExtendedString	study/Impala/timestamp_src/timestamp-functions.cpp	/^    string TimestampFunctions::ToIsoExtendedString(const TimestampValue& ts_value) {$/;"	f	class:impala::TimestampFunctions
ToPtime	study/Impala/runtime/timestamp-value.h	/^            void ToPtime(boost::posix_time::ptime* ptp) const {$/;"	f	class:impala::TimestampValue
ToString	github/leveldb-1.18/include/leveldb/slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	class:leveldb::Slice
ToString	github/leveldb-1.18/table/table_test.cc	/^  std::string ToString(const Iterator* it) {$/;"	f	class:leveldb::Harness
ToString	github/leveldb-1.18/table/table_test.cc	/^  std::string ToString(const KVMap& data, const KVMap::const_iterator& it) {$/;"	f	class:leveldb::Harness
ToString	github/leveldb-1.18/table/table_test.cc	/^  std::string ToString(const KVMap& data,$/;"	f	class:leveldb::Harness
ToString	github/leveldb-1.18/util/histogram.cc	/^std::string Histogram::ToString() const {$/;"	f	class:leveldb::Histogram
ToString	github/leveldb-1.18/util/status.cc	/^std::string Status::ToString() const {$/;"	f	class:leveldb::Status
ToSubsecondUnixTime	study/Impala/runtime/timestamp-value.h	/^            bool ToSubsecondUnixTime(double* unix_time) const {$/;"	f	class:impala::TimestampValue
ToTimestamp	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^TimestampVal TimestampFunctions::ToTimestamp(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
ToTimestampVal	study/Impala/runtime/timestamp-value.h	/^            void ToTimestampVal(impala_udf::TimestampVal* tv) const {$/;"	f	class:impala::TimestampValue
ToUnixTime	study/Impala/runtime/timestamp-value.h	/^            bool ToUnixTime(time_t* unix_time) const {$/;"	f	class:impala::TimestampValue
ToUnixTimeInUTC	study/Impala/runtime/timestamp-value.h	/^            bool ToUnixTimeInUTC(time_t* utc_time) const {$/;"	f	class:impala::TimestampValue
ToUtc	study/Impala/timestamp_src/timestamp-functions.cpp	/^    TimestampVal TimestampFunctions::ToUtc(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
TotalFileSize	github/leveldb-1.18/db/version_set.cc	/^static int64_t TotalFileSize(const std::vector<FileMetaData*>& files) {$/;"	f	namespace:leveldb
TotalTableFiles	github/leveldb-1.18/db/db_test.cc	/^  int TotalTableFiles() {$/;"	f	class:leveldb::DBTest
TrimSpace	github/leveldb-1.18/db/db_bench.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon7
TrimSpace	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon2
TrimSpace	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon3
TryReopen	github/leveldb-1.18/db/corruption_test.cc	/^  Status TryReopen() {$/;"	f	class:leveldb::CorruptionTest
TryReopen	github/leveldb-1.18/db/db_test.cc	/^  Status TryReopen(Options* options) {$/;"	f	class:leveldb::DBTest
TwoLevelIterator	github/leveldb-1.18/table/two_level_iterator.cc	/^TwoLevelIterator::TwoLevelIterator($/;"	f	class:leveldb::__anon19::TwoLevelIterator
TwoLevelIterator	github/leveldb-1.18/table/two_level_iterator.cc	/^class TwoLevelIterator: public Iterator {$/;"	c	namespace:leveldb::__anon19	file:
UNKNOWN	study/Impala/runtime/timestamp-parse-util.h	/^        UNKNOWN = 0,$/;"	e	enum:impala::DateTimeFormatTokenType
UNLOCK_FUNCTION	github/leveldb-1.18/port/thread_annotations.h	53;"	d
UNLOCK_FUNCTION	github/leveldb-1.18/util/mutexlock.h	/^  ~MutexLock() UNLOCK_FUNCTION() { this->mu_->Unlock(); }$/;"	f	class:leveldb::MutexLock
Uniform	github/leveldb-1.18/util/random.h	/^  uint32_t Uniform(int n) { return Next() % n; }$/;"	f	class:leveldb::Random
UniversityStu	work/person_design/include/university_stu.h	/^		UniversityStu() {}$/;"	f	class:UniversityStu
UniversityStu	work/person_design/include/university_stu.h	/^		UniversityStu(const UniversityStu& obj) : Student(obj) {}$/;"	f	class:UniversityStu
UniversityStu	work/person_design/include/university_stu.h	/^		UniversityStu(string name_t, int age_t, string ID_t, bool gender_t,$/;"	f	class:UniversityStu
UniversityStu	work/person_design/include/university_stu.h	/^class UniversityStu : public Student {$/;"	c
Unix	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^BigIntVal TimestampFunctions::Unix(FunctionContext* context) {$/;"	f	class:impala::TimestampFunctions
Unix	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^BigIntVal TimestampFunctions::Unix(FunctionContext* context, const StringVal& string_val,$/;"	f	class:impala::TimestampFunctions
Unix	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^BigIntVal TimestampFunctions::Unix(FunctionContext* context, const TimestampVal& ts_val) {$/;"	f	class:impala::TimestampFunctions
UnixAndFromUnixClose	study/Impala/timestamp_src/timestamp-functions.cpp	/^    void TimestampFunctions::UnixAndFromUnixClose(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
UnixAndFromUnixPrepare	study/Impala/timestamp_src/timestamp-functions.cpp	/^    void TimestampFunctions::UnixAndFromUnixPrepare(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
UnixFromString	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^BigIntVal TimestampFunctions::UnixFromString(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
UnixTimeToPtime	study/Impala/runtime/timestamp-value.cpp	/^    ptime TimestampValue::UnixTimeToPtime(time_t unix_time) const {$/;"	f	class:impala::TimestampValue
Unlock	github/leveldb-1.18/port/port_posix.cc	/^void Mutex::Unlock() { PthreadCall("unlock", pthread_mutex_unlock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
UnlockFile	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon25::InMemoryEnv
UnlockFile	github/leveldb-1.18/include/leveldb/env.h	/^  Status UnlockFile(FileLock* l) { return target_->UnlockFile(l); }$/;"	f	class:leveldb::EnvWrapper
UnlockFile	github/leveldb-1.18/util/env_posix.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon32::PosixEnv
Unmask	github/leveldb-1.18/util/crc32c.h	/^inline uint32_t Unmask(uint32_t masked_crc) {$/;"	f	namespace:leveldb::crc32c
Unref	github/leveldb-1.18/db/memtable.h	/^  void Unref() {$/;"	f	class:leveldb::MemTable
Unref	github/leveldb-1.18/db/version_set.cc	/^void Version::Unref() {$/;"	f	class:leveldb::Version
Unref	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  void Unref() {$/;"	f	class:leveldb::__anon25::FileState
Unref	github/leveldb-1.18/util/cache.cc	/^void LRUCache::Unref(LRUHandle* e) {$/;"	f	class:leveldb::__anon27::LRUCache
UnrefEntry	github/leveldb-1.18/db/table_cache.cc	/^static void UnrefEntry(void* arg1, void* arg2) {$/;"	f	namespace:leveldb
Update	github/leveldb-1.18/table/iterator_wrapper.h	/^  void Update() {$/;"	f	class:leveldb::IteratorWrapper
UpdateStats	github/leveldb-1.18/db/version_set.cc	/^bool Version::UpdateStats(const GetStats& stats) {$/;"	f	class:leveldb::Version
Usage	github/leveldb-1.18/db/leveldb_main.cc	/^static void Usage() {$/;"	f	file:
UtcToLocal	study/Impala/runtime/timestamp-value.cpp	/^    void TimestampValue::UtcToLocal() {$/;"	f	class:impala::TimestampValue
Valid	github/leveldb-1.18/db/db_iter.cc	/^  virtual bool Valid() const { return valid_; }$/;"	f	class:leveldb::__anon10::DBIter
Valid	github/leveldb-1.18/db/db_test.cc	/^    virtual bool Valid() const { return iter_ != map_->end(); }$/;"	f	class:leveldb::ModelDB::ModelIter
Valid	github/leveldb-1.18/db/memtable.cc	/^  virtual bool Valid() const { return iter_.Valid(); }$/;"	f	class:leveldb::MemTableIterator
Valid	github/leveldb-1.18/db/skiplist.h	/^inline bool SkipList<Key,Comparator>::Iterator::Valid() const {$/;"	f	class:leveldb::SkipList::Iterator
Valid	github/leveldb-1.18/db/version_set.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Valid	github/leveldb-1.18/table/block.cc	/^  virtual bool Valid() const { return current_ < restarts_; }$/;"	f	class:leveldb::Block::Iter
Valid	github/leveldb-1.18/table/iterator.cc	/^                virtual bool Valid() const { return false; }$/;"	f	class:leveldb::__anon18::EmptyIterator
Valid	github/leveldb-1.18/table/iterator_wrapper.h	/^  bool Valid() const        { return valid_; }$/;"	f	class:leveldb::IteratorWrapper
Valid	github/leveldb-1.18/table/merger.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon20::MergingIterator
Valid	github/leveldb-1.18/table/table_test.cc	/^  virtual bool Valid() const { return iter_->Valid(); }$/;"	f	class:leveldb::KeyConvertingIterator
Valid	github/leveldb-1.18/table/two_level_iterator.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
ValidateTimestamp	study/Impala/runtime/timestamp-test.cpp	/^inline void ValidateTimestamp(TimestampValue& tv, string& fmt, string& val,$/;"	f	namespace:impala
Value	github/leveldb-1.18/db/corruption_test.cc	/^  Slice Value(int k, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Value	github/leveldb-1.18/util/cache.cc	/^  virtual void* Value(Handle* handle) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
Value	github/leveldb-1.18/util/crc32c.h	/^inline uint32_t Value(const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
ValueType	github/leveldb-1.18/db/dbformat.h	/^enum ValueType {$/;"	g	namespace:leveldb
VarintLength	github/leveldb-1.18/util/coding.cc	/^int VarintLength(uint64_t v) {$/;"	f	namespace:leveldb
Version	github/leveldb-1.18/db/version_set.h	/^  explicit Version(VersionSet* vset)$/;"	f	class:leveldb::Version
Version	github/leveldb-1.18/db/version_set.h	/^class Version {$/;"	c	namespace:leveldb
VersionEdit	github/leveldb-1.18/db/version_edit.h	/^  VersionEdit() { Clear(); }$/;"	f	class:leveldb::VersionEdit
VersionEdit	github/leveldb-1.18/db/version_edit.h	/^class VersionEdit {$/;"	c	namespace:leveldb
VersionEditPrinter	github/leveldb-1.18/db/dumpfile.cc	/^static void VersionEditPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon12
VersionEditTest	github/leveldb-1.18/db/version_edit_test.cc	/^class VersionEditTest { };$/;"	c	namespace:leveldb	file:
VersionSet	github/leveldb-1.18/db/version_set.cc	/^VersionSet::VersionSet(const std::string& dbname,$/;"	f	class:leveldb::VersionSet
VersionSet	github/leveldb-1.18/db/version_set.h	/^class VersionSet {$/;"	c	namespace:leveldb
WEDNESDAY	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^const char* TimestampFunctions::WEDNESDAY = "Wednesday";$/;"	m	class:impala::TimestampFunctions	file:
WEDNESDAY	study/Impala/timestamp_src/timestamp-functions.h	/^            static const char* WEDNESDAY;$/;"	m	class:impala::TimestampFunctions
Wait	github/leveldb-1.18/db/skiplist_test.cc	/^  void Wait(ReaderState s) {$/;"	f	class:leveldb::TestState
Wait	github/leveldb-1.18/port/port_posix.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
WalCheckpoint	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^static void WalCheckpoint(sqlite3* db_) {$/;"	f	file:
WeekOfYear	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::WeekOfYear(FunctionContext* context,$/;"	f	class:impala::TimestampFunctions
Weeks	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^typedef boost::gregorian::weeks Weeks;$/;"	t	file:
Window_mgr	study/CppPrimer/chap07/class2/Window_mgr.h	/^class Window_mgr$/;"	c
WritableFile	github/leveldb-1.18/include/leveldb/env.h	/^  WritableFile() { }$/;"	f	class:leveldb::WritableFile
WritableFile	github/leveldb-1.18/include/leveldb/env.h	/^class WritableFile {$/;"	c	namespace:leveldb
WritableFileImpl	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  WritableFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon25::WritableFileImpl
WritableFileImpl	github/leveldb-1.18/helpers/memenv/memenv.cc	/^class WritableFileImpl : public WritableFile {$/;"	c	namespace:leveldb::__anon25	file:
Write	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::Write(const WriteOptions& options, WriteBatch* my_batch) {$/;"	f	class:leveldb::DBImpl
Write	github/leveldb-1.18/db/db_test.cc	/^  virtual Status Write(const WriteOptions& options, WriteBatch* batch) {$/;"	f	class:leveldb::ModelDB
Write	github/leveldb-1.18/db/log_test.cc	/^  void Write(const std::string& msg) {$/;"	f	class:leveldb::log::LogTest
Write	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  void Write(bool write_sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark
Write	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  void Write(bool sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark	file:
WriteBatch	github/leveldb-1.18/db/write_batch.cc	/^WriteBatch::WriteBatch() {$/;"	f	class:leveldb::WriteBatch
WriteBatch	github/leveldb-1.18/include/leveldb/write_batch.h	/^class WriteBatch {$/;"	c	namespace:leveldb
WriteBatchInternal	github/leveldb-1.18/db/write_batch_internal.h	/^class WriteBatchInternal {$/;"	c	namespace:leveldb
WriteBatchItemPrinter	github/leveldb-1.18/db/dumpfile.cc	/^class WriteBatchItemPrinter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon12	file:
WriteBatchPrinter	github/leveldb-1.18/db/dumpfile.cc	/^static void WriteBatchPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon12
WriteBatchTest	github/leveldb-1.18/db/write_batch_test.cc	/^class WriteBatchTest { };$/;"	c	namespace:leveldb	file:
WriteBlock	github/leveldb-1.18/table/table_builder.cc	/^void TableBuilder::WriteBlock(BlockBuilder* block, BlockHandle* handle) {$/;"	f	class:leveldb::TableBuilder
WriteDescriptor	github/leveldb-1.18/db/repair.cc	/^  Status WriteDescriptor() {$/;"	f	class:leveldb::__anon5::Repairer	file:
WriteInitialOffsetLog	github/leveldb-1.18/db/log_test.cc	/^  void WriteInitialOffsetLog() {$/;"	f	class:leveldb::log::LogTest
WriteLevel0Table	github/leveldb-1.18/db/db_impl.cc	/^Status DBImpl::WriteLevel0Table(MemTable* mem, VersionEdit* edit,$/;"	f	class:leveldb::DBImpl
WriteOptions	github/leveldb-1.18/include/leveldb/options.h	/^  WriteOptions()$/;"	f	struct:leveldb::WriteOptions
WriteOptions	github/leveldb-1.18/include/leveldb/options.h	/^struct WriteOptions {$/;"	s	namespace:leveldb
WriteRandom	github/leveldb-1.18/db/db_bench.cc	/^  void WriteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteRawBlock	github/leveldb-1.18/table/table_builder.cc	/^void TableBuilder::WriteRawBlock(const Slice& block_contents,$/;"	f	class:leveldb::TableBuilder
WriteSeq	github/leveldb-1.18/db/db_bench.cc	/^  void WriteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteSnapshot	github/leveldb-1.18/db/version_set.cc	/^Status VersionSet::WriteSnapshot(log::Writer* log) {$/;"	f	class:leveldb::VersionSet
WriteStep	github/leveldb-1.18/db/skiplist_test.cc	/^  void WriteStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
WriteStringToFile	github/leveldb-1.18/util/env.cc	/^Status WriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteStringToFileSync	github/leveldb-1.18/util/env.cc	/^Status WriteStringToFileSync(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteToFile	github/leveldb-1.18/db/db_bench.cc	/^  static void WriteToFile(void* arg, const char* buf, int n) {$/;"	f	class:leveldb::Benchmark	file:
Writer	github/leveldb-1.18/db/db_impl.cc	/^  explicit Writer(port::Mutex* mu) : cv(mu) { }$/;"	f	struct:leveldb::DBImpl::Writer
Writer	github/leveldb-1.18/db/db_impl.cc	/^struct DBImpl::Writer {$/;"	s	class:leveldb::DBImpl	file:
Writer	github/leveldb-1.18/db/log_writer.cc	/^Writer::Writer(WritableFile* dest)$/;"	f	class:leveldb::log::Writer
Writer	github/leveldb-1.18/db/log_writer.h	/^class Writer {$/;"	c	namespace:leveldb::log
WrittenBytes	github/leveldb-1.18/db/log_test.cc	/^  size_t WrittenBytes() const {$/;"	f	class:leveldb::log::LogTest
X	study/test/test1.cpp	/^class X{ };$/;"	c	file:
Y	study/test/test1.cpp	/^class Y : public virtual X{ };$/;"	c	file:
YEAR	study/Impala/runtime/timestamp-parse-util.h	/^        YEAR,$/;"	e	enum:impala::DateTimeFormatTokenType
Year	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^IntVal TimestampFunctions::Year(FunctionContext* context, const TimestampVal& ts_val) {$/;"	f	class:impala::TimestampFunctions
Years	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^typedef boost::gregorian::years Years;$/;"	t	file:
Z	study/test/test1.cpp	/^class Z : public virtual X{ };$/;"	c	file:
_Alloc_hider	test_getline.cpp	/^                _Alloc_hider(_CharT* __dat, const _Alloc& __a)$/;"	f	struct:std::basic_string::_Alloc_hider
_Alloc_hider	test_getline.cpp	/^            struct _Alloc_hider : _Alloc$/;"	s	class:std::basic_string	file:
_Atomic_word	test_getline.cpp	/^typedef int _Atomic_word;$/;"	t	file:
_CS_GNU_LIBC_VERSION	test_getline.cpp	/^        _CS_GNU_LIBC_VERSION,$/;"	e	enum:__anon100	file:
_CS_GNU_LIBPTHREAD_VERSION	test_getline.cpp	/^        _CS_GNU_LIBPTHREAD_VERSION,$/;"	e	enum:__anon100	file:
_CS_LFS64_CFLAGS	test_getline.cpp	/^        _CS_LFS64_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_LFS64_LDFLAGS	test_getline.cpp	/^        _CS_LFS64_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_LFS64_LIBS	test_getline.cpp	/^        _CS_LFS64_LIBS,$/;"	e	enum:__anon100	file:
_CS_LFS64_LINTFLAGS	test_getline.cpp	/^        _CS_LFS64_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_LFS_CFLAGS	test_getline.cpp	/^        _CS_LFS_CFLAGS = 1000,$/;"	e	enum:__anon100	file:
_CS_LFS_LDFLAGS	test_getline.cpp	/^        _CS_LFS_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_LFS_LIBS	test_getline.cpp	/^        _CS_LFS_LIBS,$/;"	e	enum:__anon100	file:
_CS_LFS_LINTFLAGS	test_getline.cpp	/^        _CS_LFS_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_PATH	test_getline.cpp	/^        _CS_PATH,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_ILP32_OFF32_CFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_ILP32_OFF32_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_ILP32_OFF32_LIBS	test_getline.cpp	/^        _CS_POSIX_V6_ILP32_OFF32_LIBS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_ILP32_OFFBIG_LIBS	test_getline.cpp	/^        _CS_POSIX_V6_ILP32_OFFBIG_LIBS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_LP64_OFF64_CFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_LP64_OFF64_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_LP64_OFF64_LDFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_LP64_OFF64_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_LP64_OFF64_LIBS	test_getline.cpp	/^        _CS_POSIX_V6_LP64_OFF64_LIBS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS	test_getline.cpp	/^        _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS	test_getline.cpp	/^        _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_ILP32_OFF32_CFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_ILP32_OFF32_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_ILP32_OFF32_LIBS	test_getline.cpp	/^        _CS_POSIX_V7_ILP32_OFF32_LIBS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_ILP32_OFFBIG_LIBS	test_getline.cpp	/^        _CS_POSIX_V7_ILP32_OFFBIG_LIBS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_LP64_OFF64_CFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_LP64_OFF64_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_LP64_OFF64_LDFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_LP64_OFF64_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_LP64_OFF64_LIBS	test_getline.cpp	/^        _CS_POSIX_V7_LP64_OFF64_LIBS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS	test_getline.cpp	/^        _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,$/;"	e	enum:__anon100	file:
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS	test_getline.cpp	/^        _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_V5_WIDTH_RESTRICTED_ENVS	test_getline.cpp	/^        _CS_V5_WIDTH_RESTRICTED_ENVS,$/;"	e	enum:__anon100	file:
_CS_V6_ENV	test_getline.cpp	/^        _CS_V6_ENV,$/;"	e	enum:__anon100	file:
_CS_V6_WIDTH_RESTRICTED_ENVS	test_getline.cpp	/^        _CS_V6_WIDTH_RESTRICTED_ENVS,$/;"	e	enum:__anon100	file:
_CS_V7_ENV	test_getline.cpp	/^        _CS_V7_ENV$/;"	e	enum:__anon100	file:
_CS_V7_WIDTH_RESTRICTED_ENVS	test_getline.cpp	/^        _CS_V7_WIDTH_RESTRICTED_ENVS,$/;"	e	enum:__anon100	file:
_CS_XBS5_ILP32_OFF32_CFLAGS	test_getline.cpp	/^        _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,$/;"	e	enum:__anon100	file:
_CS_XBS5_ILP32_OFF32_LDFLAGS	test_getline.cpp	/^        _CS_XBS5_ILP32_OFF32_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_XBS5_ILP32_OFF32_LIBS	test_getline.cpp	/^        _CS_XBS5_ILP32_OFF32_LIBS,$/;"	e	enum:__anon100	file:
_CS_XBS5_ILP32_OFF32_LINTFLAGS	test_getline.cpp	/^        _CS_XBS5_ILP32_OFF32_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_XBS5_ILP32_OFFBIG_CFLAGS	test_getline.cpp	/^        _CS_XBS5_ILP32_OFFBIG_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_XBS5_ILP32_OFFBIG_LDFLAGS	test_getline.cpp	/^        _CS_XBS5_ILP32_OFFBIG_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_XBS5_ILP32_OFFBIG_LIBS	test_getline.cpp	/^        _CS_XBS5_ILP32_OFFBIG_LIBS,$/;"	e	enum:__anon100	file:
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS	test_getline.cpp	/^        _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_XBS5_LP64_OFF64_CFLAGS	test_getline.cpp	/^        _CS_XBS5_LP64_OFF64_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_XBS5_LP64_OFF64_LDFLAGS	test_getline.cpp	/^        _CS_XBS5_LP64_OFF64_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_XBS5_LP64_OFF64_LIBS	test_getline.cpp	/^        _CS_XBS5_LP64_OFF64_LIBS,$/;"	e	enum:__anon100	file:
_CS_XBS5_LP64_OFF64_LINTFLAGS	test_getline.cpp	/^        _CS_XBS5_LP64_OFF64_LINTFLAGS,$/;"	e	enum:__anon100	file:
_CS_XBS5_LPBIG_OFFBIG_CFLAGS	test_getline.cpp	/^        _CS_XBS5_LPBIG_OFFBIG_CFLAGS,$/;"	e	enum:__anon100	file:
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS	test_getline.cpp	/^        _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,$/;"	e	enum:__anon100	file:
_CS_XBS5_LPBIG_OFFBIG_LIBS	test_getline.cpp	/^        _CS_XBS5_LPBIG_OFFBIG_LIBS,$/;"	e	enum:__anon100	file:
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS	test_getline.cpp	/^        _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,$/;"	e	enum:__anon100	file:
_Callback_list	test_getline.cpp	/^                _Callback_list(ios_base::event_callback __fn, int __index,$/;"	f	struct:std::ios_base::_Callback_list
_Callback_list	test_getline.cpp	/^            struct _Callback_list$/;"	s	class:std::ios_base	file:
_CharT_alloc_type	test_getline.cpp	/^            typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;$/;"	t	class:std::basic_string	file:
_Char_types	test_getline.cpp	/^        struct _Char_types$/;"	s	namespace:__gnu_cxx	file:
_ISalnum	test_getline.cpp	/^        _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))$/;"	e	enum:__anon73	file:
_ISalpha	test_getline.cpp	/^        _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),$/;"	e	enum:__anon73	file:
_ISblank	test_getline.cpp	/^        _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),$/;"	e	enum:__anon73	file:
_IScntrl	test_getline.cpp	/^        _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),$/;"	e	enum:__anon73	file:
_ISdigit	test_getline.cpp	/^        _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),$/;"	e	enum:__anon73	file:
_ISgraph	test_getline.cpp	/^        _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),$/;"	e	enum:__anon73	file:
_ISlower	test_getline.cpp	/^        _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),$/;"	e	enum:__anon73	file:
_ISprint	test_getline.cpp	/^        _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),$/;"	e	enum:__anon73	file:
_ISpunct	test_getline.cpp	/^        _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),$/;"	e	enum:__anon73	file:
_ISspace	test_getline.cpp	/^        _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),$/;"	e	enum:__anon73	file:
_ISupper	test_getline.cpp	/^        _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),$/;"	e	enum:__anon73	file:
_ISwalnum	test_getline.cpp	/^    _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))$/;"	e	enum:__anon103	file:
_ISwalpha	test_getline.cpp	/^    _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),$/;"	e	enum:__anon103	file:
_ISwblank	test_getline.cpp	/^    _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),$/;"	e	enum:__anon103	file:
_ISwcntrl	test_getline.cpp	/^    _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),$/;"	e	enum:__anon103	file:
_ISwdigit	test_getline.cpp	/^    _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),$/;"	e	enum:__anon103	file:
_ISwgraph	test_getline.cpp	/^    _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),$/;"	e	enum:__anon103	file:
_ISwlower	test_getline.cpp	/^    _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),$/;"	e	enum:__anon103	file:
_ISwprint	test_getline.cpp	/^    _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),$/;"	e	enum:__anon103	file:
_ISwpunct	test_getline.cpp	/^    _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),$/;"	e	enum:__anon103	file:
_ISwspace	test_getline.cpp	/^    _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),$/;"	e	enum:__anon103	file:
_ISwupper	test_getline.cpp	/^    _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),$/;"	e	enum:__anon103	file:
_ISwxdigit	test_getline.cpp	/^    _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),$/;"	e	enum:__anon103	file:
_ISxdigit	test_getline.cpp	/^        _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),$/;"	e	enum:__anon73	file:
_Identity	test_getline.cpp	/^        struct _Identity : public unary_function<_Tp,_Tp>$/;"	s	namespace:std	file:
_Impl	test_getline.cpp	/^    class locale::_Impl$/;"	c	class:std::locale	file:
_Ios_Fmtflags	test_getline.cpp	/^    enum _Ios_Fmtflags$/;"	g	namespace:std	file:
_Ios_Iostate	test_getline.cpp	/^    enum _Ios_Iostate$/;"	g	namespace:std	file:
_Ios_Openmode	test_getline.cpp	/^    enum _Ios_Openmode$/;"	g	namespace:std	file:
_Ios_Seekdir	test_getline.cpp	/^    enum _Ios_Seekdir$/;"	g	namespace:std	file:
_M_add_reference	test_getline.cpp	/^                    _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }$/;"	f	struct:std::ios_base::_Callback_list
_M_add_reference	test_getline.cpp	/^                _M_add_reference() const throw()$/;"	f	class:std::locale::facet	file:
_M_add_reference	test_getline.cpp	/^                _M_add_reference() throw()$/;"	f	class:std::locale::_Impl	file:
_M_allocated	test_getline.cpp	/^        bool _M_allocated;$/;"	m	struct:std::__numpunct_cache	file:
_M_assign	test_getline.cpp	/^                _M_assign(_CharT* __d, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	file:
_M_at_eof	test_getline.cpp	/^                _M_at_eof() const$/;"	f	class:std::istreambuf_iterator	file:
_M_atoms_in	test_getline.cpp	/^        _CharT _M_atoms_in[__num_base::_S_iend];$/;"	m	struct:std::__numpunct_cache	file:
_M_atoms_out	test_getline.cpp	/^        _CharT _M_atoms_out[__num_base::_S_oend];$/;"	m	struct:std::__numpunct_cache	file:
_M_bit	test_getline.cpp	/^                mask _M_bit[16];$/;"	m	class:std::ctype	file:
_M_buf_locale	test_getline.cpp	/^                locale _M_buf_locale;$/;"	m	class:std::basic_streambuf	file:
_M_c	test_getline.cpp	/^            mutable int_type _M_c;$/;"	m	class:std::istreambuf_iterator	file:
_M_c_locale_collate	test_getline.cpp	/^            __c_locale _M_c_locale_collate;$/;"	m	class:std::collate	file:
_M_c_locale_ctype	test_getline.cpp	/^                __c_locale _M_c_locale_ctype;$/;"	m	class:std::ctype	file:
_M_cache	test_getline.cpp	/^        __numpunct_cache<_CharT>::_M_cache(const locale& __loc)$/;"	f	class:std::__numpunct_cache
_M_cache_locale	test_getline.cpp	/^        basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)$/;"	f	class:std::basic_ios
_M_caches	test_getline.cpp	/^            const facet** _M_caches;$/;"	m	class:std::locale::_Impl	file:
_M_callbacks	test_getline.cpp	/^            _Callback_list* _M_callbacks;$/;"	m	class:std::ios_base	file:
_M_capacity	test_getline.cpp	/^                size_type _M_capacity;$/;"	m	struct:std::basic_string::_Rep_base	file:
_M_check	test_getline.cpp	/^                _M_check(size_type __pos, const char* __s) const$/;"	f	class:std::basic_string	file:
_M_check_length	test_getline.cpp	/^                _M_check_length(size_type __n1, size_type __n2, const char* __s) const$/;"	f	class:std::basic_string	file:
_M_check_same_name	test_getline.cpp	/^                _M_check_same_name()$/;"	f	class:std::locale::_Impl	file:
_M_clone	test_getline.cpp	/^        _M_clone(const _Alloc& __alloc, size_type __res)$/;"	f	class:std::basic_string::_Rep
_M_compare	test_getline.cpp	/^        collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const$/;"	f	class:std::collate
_M_copy	test_getline.cpp	/^                _M_copy(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	file:
_M_ctype	test_getline.cpp	/^            const __ctype_type* _M_ctype;$/;"	m	class:std::basic_ios	file:
_M_current	test_getline.cpp	/^                _Iterator _M_current;$/;"	m	class:__gnu_cxx::__normal_iterator	file:
_M_data	test_getline.cpp	/^                _M_data() const$/;"	f	class:std::basic_string	file:
_M_data	test_getline.cpp	/^                _M_data(_CharT* __p)$/;"	f	class:std::basic_string	file:
_M_data	test_getline.cpp	/^            __cache_type* _M_data;$/;"	m	class:std::numpunct	file:
_M_dataplus	test_getline.cpp	/^            mutable _Alloc_hider _M_dataplus;$/;"	m	class:std::basic_string	file:
_M_decimal_point	test_getline.cpp	/^        _CharT _M_decimal_point;$/;"	m	struct:std::__numpunct_cache	file:
_M_del	test_getline.cpp	/^                bool _M_del;$/;"	m	class:std::ctype	file:
_M_destroy	test_getline.cpp	/^        _M_destroy(const _Alloc& __a) throw ()$/;"	f	class:std::basic_string::_Rep
_M_disjunct	test_getline.cpp	/^                _M_disjunct(const _CharT* __s) const$/;"	f	class:std::basic_string	file:
_M_dispose	test_getline.cpp	/^                    _M_dispose(const _Alloc& __a)$/;"	f	struct:std::basic_string::_Rep
_M_exception	test_getline.cpp	/^            iostate _M_exception;$/;"	m	class:std::ios_base	file:
_M_extract	test_getline.cpp	/^        _M_extract(_ValueT& __v)$/;"	f	class:std::basic_istream
_M_extract_float	test_getline.cpp	/^        _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,$/;"	f	class:std::num_get
_M_extract_int	test_getline.cpp	/^        _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,$/;"	f	class:std::num_get
_M_f	test_getline.cpp	/^            _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_ref_t	file:
_M_f	test_getline.cpp	/^            _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_t	file:
_M_f	test_getline.cpp	/^            _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_ref_t	file:
_M_f	test_getline.cpp	/^            _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_t	file:
_M_f	test_getline.cpp	/^            _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_ref_t	file:
_M_f	test_getline.cpp	/^            _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_t	file:
_M_f	test_getline.cpp	/^            _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_ref_t	file:
_M_f	test_getline.cpp	/^            _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_t	file:
_M_facets	test_getline.cpp	/^            const facet** _M_facets;$/;"	m	class:std::locale::_Impl	file:
_M_facets_size	test_getline.cpp	/^            size_t _M_facets_size;$/;"	m	class:std::locale::_Impl	file:
_M_failed	test_getline.cpp	/^                bool _M_failed;$/;"	m	class:std::ostreambuf_iterator	file:
_M_falsename	test_getline.cpp	/^        const _CharT* _M_falsename;$/;"	m	struct:std::__numpunct_cache	file:
_M_falsename_size	test_getline.cpp	/^        size_t _M_falsename_size;$/;"	m	struct:std::__numpunct_cache	file:
_M_fill	test_getline.cpp	/^            mutable char_type _M_fill;$/;"	m	class:std::basic_ios	file:
_M_fill_init	test_getline.cpp	/^            mutable bool _M_fill_init;$/;"	m	class:std::basic_ios	file:
_M_find	test_getline.cpp	/^                             _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get
_M_find	test_getline.cpp	/^                _M_find(const _CharT2*, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get
_M_flags	test_getline.cpp	/^            fmtflags _M_flags;$/;"	m	class:std::ios_base	file:
_M_fn	test_getline.cpp	/^                ios_base::event_callback _M_fn;$/;"	m	struct:std::ios_base::_Callback_list	file:
_M_gcount	test_getline.cpp	/^            streamsize _M_gcount;$/;"	m	class:std::basic_istream	file:
_M_get	test_getline.cpp	/^                _M_get() const$/;"	f	class:std::istreambuf_iterator	file:
_M_getloc	test_getline.cpp	/^                _M_getloc() const$/;"	f	class:std::ios_base
_M_grab	test_getline.cpp	/^                    _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)$/;"	f	struct:std::basic_string::_Rep
_M_group_float	test_getline.cpp	/^        _M_group_float(const char* __grouping, size_t __grouping_size,$/;"	f	class:std::num_put
_M_group_int	test_getline.cpp	/^        _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,$/;"	f	class:std::num_put
_M_grouping	test_getline.cpp	/^        const char* _M_grouping;$/;"	m	struct:std::__numpunct_cache	file:
_M_grouping_size	test_getline.cpp	/^        size_t _M_grouping_size;$/;"	m	struct:std::__numpunct_cache	file:
_M_ibegin	test_getline.cpp	/^                _M_ibegin() const$/;"	f	class:std::basic_string	file:
_M_iend	test_getline.cpp	/^                _M_iend() const$/;"	f	class:std::basic_string	file:
_M_impl	test_getline.cpp	/^            _Impl* _M_impl;$/;"	m	class:std::locale	file:
_M_in_beg	test_getline.cpp	/^                char_type* _M_in_beg;$/;"	m	class:std::basic_streambuf	file:
_M_in_cur	test_getline.cpp	/^                char_type* _M_in_cur;$/;"	m	class:std::basic_streambuf	file:
_M_in_end	test_getline.cpp	/^                char_type* _M_in_end;$/;"	m	class:std::basic_streambuf	file:
_M_index	test_getline.cpp	/^                int _M_index;$/;"	m	struct:std::ios_base::_Callback_list	file:
_M_index	test_getline.cpp	/^            mutable size_t _M_index;$/;"	m	class:std::locale::id	file:
_M_init_facet	test_getline.cpp	/^                _M_init_facet(_Facet* __facet)$/;"	f	class:std::locale::_Impl	file:
_M_insert	test_getline.cpp	/^        _M_insert(_ValueT __v)$/;"	f	class:std::basic_ostream
_M_insert_float	test_getline.cpp	/^        _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,$/;"	f	class:std::num_put
_M_insert_int	test_getline.cpp	/^        _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,$/;"	f	class:std::num_put
_M_ios_locale	test_getline.cpp	/^            locale _M_ios_locale;$/;"	m	class:std::ios_base	file:
_M_is_leaked	test_getline.cpp	/^                    _M_is_leaked() const$/;"	f	struct:std::basic_string::_Rep
_M_is_shared	test_getline.cpp	/^                    _M_is_shared() const$/;"	f	struct:std::basic_string::_Rep
_M_iword	test_getline.cpp	/^                long _M_iword;$/;"	m	struct:std::ios_base::_Words	file:
_M_leak	test_getline.cpp	/^                _M_leak()$/;"	f	class:std::basic_string	file:
_M_leak_hard	test_getline.cpp	/^        _M_leak_hard()$/;"	f	class:std::basic_string
_M_length	test_getline.cpp	/^                size_type _M_length;$/;"	m	struct:std::basic_string::_Rep_base	file:
_M_limit	test_getline.cpp	/^                _M_limit(size_type __pos, size_type __off) const$/;"	f	class:std::basic_string	file:
_M_local_word	test_getline.cpp	/^            _Words _M_local_word[_S_local_word_size];$/;"	m	class:std::ios_base	file:
_M_move	test_getline.cpp	/^                _M_move(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	file:
_M_msg	test_getline.cpp	/^                string _M_msg;$/;"	m	class:std::ios_base::failure	file:
_M_mutate	test_getline.cpp	/^        _M_mutate(size_type __pos, size_type __len1, size_type __len2)$/;"	f	class:std::basic_string
_M_names	test_getline.cpp	/^            char** _M_names;$/;"	m	class:std::locale::_Impl	file:
_M_narrow	test_getline.cpp	/^                char _M_narrow[128];$/;"	m	class:std::ctype	file:
_M_narrow	test_getline.cpp	/^                mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	file:
_M_narrow_ok	test_getline.cpp	/^                bool _M_narrow_ok;$/;"	m	class:std::ctype	file:
_M_narrow_ok	test_getline.cpp	/^                mutable char _M_narrow_ok;$/;"	m	class:std::ctype	file:
_M_next	test_getline.cpp	/^                _Callback_list* _M_next;$/;"	m	struct:std::ios_base::_Callback_list	file:
_M_num_get	test_getline.cpp	/^            const __num_get_type* _M_num_get;$/;"	m	class:std::basic_ios	file:
_M_num_put	test_getline.cpp	/^            const __num_put_type* _M_num_put;$/;"	m	class:std::basic_ios	file:
_M_off	test_getline.cpp	/^                streamoff _M_off;$/;"	m	class:std::fpos	file:
_M_ok	test_getline.cpp	/^                bool _M_ok;$/;"	m	class:std::basic_istream::sentry	file:
_M_ok	test_getline.cpp	/^            bool _M_ok;$/;"	m	class:std::basic_ostream::sentry	file:
_M_os	test_getline.cpp	/^            basic_ostream<_CharT, _Traits>& _M_os;$/;"	m	class:std::basic_ostream::sentry	file:
_M_out_beg	test_getline.cpp	/^                char_type* _M_out_beg;$/;"	m	class:std::basic_streambuf	file:
_M_out_cur	test_getline.cpp	/^                char_type* _M_out_cur;$/;"	m	class:std::basic_streambuf	file:
_M_out_end	test_getline.cpp	/^                char_type* _M_out_end;$/;"	m	class:std::basic_streambuf	file:
_M_p	test_getline.cpp	/^                _CharT* _M_p;$/;"	m	struct:std::basic_string::_Alloc_hider	file:
_M_pad	test_getline.cpp	/^        _M_pad(_CharT __fill, streamsize __w, ios_base& __io,$/;"	f	class:std::num_put
_M_precision	test_getline.cpp	/^            streamsize _M_precision;$/;"	m	class:std::ios_base	file:
_M_pred	test_getline.cpp	/^                _Predicate _M_pred;$/;"	m	class:std::unary_negate	file:
_M_pred	test_getline.cpp	/^            _Predicate _M_pred;$/;"	m	class:std::binary_negate	file:
_M_ptr	test_getline.cpp	/^                _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:std::pointer_to_binary_function	file:
_M_ptr	test_getline.cpp	/^            _Result (*_M_ptr)(_Arg);$/;"	m	class:std::pointer_to_unary_function	file:
_M_put	test_getline.cpp	/^                    _M_put(const _CharT* __ws, streamsize __len)$/;"	f	class:std::ostreambuf_iterator
_M_pword	test_getline.cpp	/^                void* _M_pword;$/;"	m	struct:std::ios_base::_Words	file:
_M_refcopy	test_getline.cpp	/^                    _M_refcopy() throw()$/;"	f	struct:std::basic_string::_Rep
_M_refcount	test_getline.cpp	/^                _Atomic_word _M_refcount;$/;"	m	struct:std::basic_string::_Rep_base	file:
_M_refcount	test_getline.cpp	/^                _Atomic_word _M_refcount;$/;"	m	struct:std::ios_base::_Callback_list	file:
_M_refcount	test_getline.cpp	/^            _Atomic_word _M_refcount;$/;"	m	class:std::locale::_Impl	file:
_M_refcount	test_getline.cpp	/^            mutable _Atomic_word _M_refcount;$/;"	m	class:std::locale::facet	file:
_M_refdata	test_getline.cpp	/^                    _M_refdata() throw()$/;"	f	struct:std::basic_string::_Rep
_M_remove_reference	test_getline.cpp	/^                    _M_remove_reference()$/;"	f	struct:std::ios_base::_Callback_list
_M_remove_reference	test_getline.cpp	/^                _M_remove_reference() const throw()$/;"	f	class:std::locale::facet	file:
_M_remove_reference	test_getline.cpp	/^                _M_remove_reference() throw()$/;"	f	class:std::locale::_Impl	file:
_M_rep	test_getline.cpp	/^                _M_rep() const$/;"	f	class:std::basic_string	file:
_M_replace_aux	test_getline.cpp	/^        _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	f	class:std::basic_string
_M_replace_dispatch	test_getline.cpp	/^                _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,$/;"	f	class:std::basic_string	file:
_M_replace_dispatch	test_getline.cpp	/^        _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,$/;"	f	class:std::basic_string
_M_replace_safe	test_getline.cpp	/^        _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string
_M_sbuf	test_getline.cpp	/^                streambuf_type* _M_sbuf;$/;"	m	class:std::ostreambuf_iterator	file:
_M_sbuf	test_getline.cpp	/^            mutable streambuf_type* _M_sbuf;$/;"	m	class:std::istreambuf_iterator	file:
_M_set_leaked	test_getline.cpp	/^                    _M_set_leaked()$/;"	f	struct:std::basic_string::_Rep
_M_set_length_and_sharable	test_getline.cpp	/^                    _M_set_length_and_sharable(size_type __n)$/;"	f	struct:std::basic_string::_Rep
_M_set_sharable	test_getline.cpp	/^                    _M_set_sharable()$/;"	f	struct:std::basic_string::_Rep
_M_setstate	test_getline.cpp	/^                _M_setstate(iostate __state)$/;"	f	class:std::basic_ios
_M_state	test_getline.cpp	/^                _StateT _M_state;$/;"	m	class:std::fpos	file:
_M_streambuf	test_getline.cpp	/^            basic_streambuf<_CharT, _Traits>* _M_streambuf;$/;"	m	class:std::basic_ios	file:
_M_streambuf_state	test_getline.cpp	/^            iostate _M_streambuf_state;$/;"	m	class:std::ios_base	file:
_M_table	test_getline.cpp	/^                const mask* _M_table;$/;"	m	class:std::ctype	file:
_M_thousands_sep	test_getline.cpp	/^        _CharT _M_thousands_sep;$/;"	m	struct:std::__numpunct_cache	file:
_M_tie	test_getline.cpp	/^            basic_ostream<_CharT, _Traits>* _M_tie;$/;"	m	class:std::basic_ios	file:
_M_tolower	test_getline.cpp	/^                __to_type _M_tolower;$/;"	m	class:std::ctype	file:
_M_toupper	test_getline.cpp	/^                __to_type _M_toupper;$/;"	m	class:std::ctype	file:
_M_transform	test_getline.cpp	/^        collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const$/;"	f	class:std::collate
_M_truename	test_getline.cpp	/^        const _CharT* _M_truename;$/;"	m	struct:std::__numpunct_cache	file:
_M_truename_size	test_getline.cpp	/^        size_t _M_truename_size;$/;"	m	struct:std::__numpunct_cache	file:
_M_use_grouping	test_getline.cpp	/^        bool _M_use_grouping;$/;"	m	struct:std::__numpunct_cache	file:
_M_widen	test_getline.cpp	/^                mutable char _M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	file:
_M_widen	test_getline.cpp	/^                wint_t _M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	file:
_M_widen_ok	test_getline.cpp	/^                mutable char _M_widen_ok;$/;"	m	class:std::ctype	file:
_M_width	test_getline.cpp	/^            streamsize _M_width;$/;"	m	class:std::ios_base	file:
_M_wmask	test_getline.cpp	/^                __wmask_type _M_wmask[16];$/;"	m	class:std::ctype	file:
_M_word	test_getline.cpp	/^            _Words* _M_word;$/;"	m	class:std::ios_base	file:
_M_word_size	test_getline.cpp	/^            int _M_word_size;$/;"	m	class:std::ios_base	file:
_M_word_zero	test_getline.cpp	/^            _Words _M_word_zero;$/;"	m	class:std::ios_base	file:
_M_write	test_getline.cpp	/^                _M_write(const char_type* __s, streamsize __n)$/;"	f	class:std::basic_ostream
_PC_2_SYMLINKS	test_getline.cpp	/^        _PC_2_SYMLINKS$/;"	e	enum:__anon98	file:
_PC_ALLOC_SIZE_MIN	test_getline.cpp	/^        _PC_ALLOC_SIZE_MIN,$/;"	e	enum:__anon98	file:
_PC_ASYNC_IO	test_getline.cpp	/^        _PC_ASYNC_IO,$/;"	e	enum:__anon98	file:
_PC_CHOWN_RESTRICTED	test_getline.cpp	/^        _PC_CHOWN_RESTRICTED,$/;"	e	enum:__anon98	file:
_PC_FILESIZEBITS	test_getline.cpp	/^        _PC_FILESIZEBITS,$/;"	e	enum:__anon98	file:
_PC_LINK_MAX	test_getline.cpp	/^        _PC_LINK_MAX,$/;"	e	enum:__anon98	file:
_PC_MAX_CANON	test_getline.cpp	/^        _PC_MAX_CANON,$/;"	e	enum:__anon98	file:
_PC_MAX_INPUT	test_getline.cpp	/^        _PC_MAX_INPUT,$/;"	e	enum:__anon98	file:
_PC_NAME_MAX	test_getline.cpp	/^        _PC_NAME_MAX,$/;"	e	enum:__anon98	file:
_PC_NO_TRUNC	test_getline.cpp	/^        _PC_NO_TRUNC,$/;"	e	enum:__anon98	file:
_PC_PATH_MAX	test_getline.cpp	/^        _PC_PATH_MAX,$/;"	e	enum:__anon98	file:
_PC_PIPE_BUF	test_getline.cpp	/^        _PC_PIPE_BUF,$/;"	e	enum:__anon98	file:
_PC_PRIO_IO	test_getline.cpp	/^        _PC_PRIO_IO,$/;"	e	enum:__anon98	file:
_PC_REC_INCR_XFER_SIZE	test_getline.cpp	/^        _PC_REC_INCR_XFER_SIZE,$/;"	e	enum:__anon98	file:
_PC_REC_MAX_XFER_SIZE	test_getline.cpp	/^        _PC_REC_MAX_XFER_SIZE,$/;"	e	enum:__anon98	file:
_PC_REC_MIN_XFER_SIZE	test_getline.cpp	/^        _PC_REC_MIN_XFER_SIZE,$/;"	e	enum:__anon98	file:
_PC_REC_XFER_ALIGN	test_getline.cpp	/^        _PC_REC_XFER_ALIGN,$/;"	e	enum:__anon98	file:
_PC_SOCK_MAXBUF	test_getline.cpp	/^        _PC_SOCK_MAXBUF,$/;"	e	enum:__anon98	file:
_PC_SYMLINK_MAX	test_getline.cpp	/^        _PC_SYMLINK_MAX,$/;"	e	enum:__anon98	file:
_PC_SYNC_IO	test_getline.cpp	/^        _PC_SYNC_IO,$/;"	e	enum:__anon98	file:
_PC_VDISABLE	test_getline.cpp	/^        _PC_VDISABLE,$/;"	e	enum:__anon98	file:
_Raw_bytes_alloc	test_getline.cpp	/^                typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;$/;"	t	struct:std::basic_string::_Rep	file:
_Rep	test_getline.cpp	/^            struct _Rep : _Rep_base$/;"	s	class:std::basic_string	file:
_Rep_base	test_getline.cpp	/^            struct _Rep_base$/;"	s	class:std::basic_string	file:
_Ret	test_getline.cpp	/^                const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_ref_t
_Ret	test_getline.cpp	/^                const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_t
_Ret	test_getline.cpp	/^                const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_ref_t
_Ret	test_getline.cpp	/^                const_mem_fun_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_t
_Ret	test_getline.cpp	/^                mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_ref_t
_Ret	test_getline.cpp	/^                mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_t
_Ret	test_getline.cpp	/^                mem_fun_ref_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_ref_t
_Ret	test_getline.cpp	/^                mem_fun_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_t
_Ret	test_getline.cpp	/^        mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std
_Ret	test_getline.cpp	/^        mem_fun(_Ret (_Tp::*__f)())$/;"	f	namespace:std
_Ret	test_getline.cpp	/^        mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std
_Ret	test_getline.cpp	/^        mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std
_Ret	test_getline.cpp	/^        mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std
_Ret	test_getline.cpp	/^        mem_fun_ref(_Ret (_Tp::*__f)())$/;"	f	namespace:std
_Ret	test_getline.cpp	/^        mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std
_Ret	test_getline.cpp	/^        mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std
_SC_2_CHAR_TERM	test_getline.cpp	/^        _SC_2_CHAR_TERM,$/;"	e	enum:__anon99	file:
_SC_2_C_BIND	test_getline.cpp	/^        _SC_2_C_BIND,$/;"	e	enum:__anon99	file:
_SC_2_C_DEV	test_getline.cpp	/^        _SC_2_C_DEV,$/;"	e	enum:__anon99	file:
_SC_2_C_VERSION	test_getline.cpp	/^        _SC_2_C_VERSION,$/;"	e	enum:__anon99	file:
_SC_2_FORT_DEV	test_getline.cpp	/^        _SC_2_FORT_DEV,$/;"	e	enum:__anon99	file:
_SC_2_FORT_RUN	test_getline.cpp	/^        _SC_2_FORT_RUN,$/;"	e	enum:__anon99	file:
_SC_2_LOCALEDEF	test_getline.cpp	/^        _SC_2_LOCALEDEF,$/;"	e	enum:__anon99	file:
_SC_2_PBS	test_getline.cpp	/^        _SC_2_PBS,$/;"	e	enum:__anon99	file:
_SC_2_PBS_ACCOUNTING	test_getline.cpp	/^        _SC_2_PBS_ACCOUNTING,$/;"	e	enum:__anon99	file:
_SC_2_PBS_CHECKPOINT	test_getline.cpp	/^        _SC_2_PBS_CHECKPOINT,$/;"	e	enum:__anon99	file:
_SC_2_PBS_LOCATE	test_getline.cpp	/^        _SC_2_PBS_LOCATE,$/;"	e	enum:__anon99	file:
_SC_2_PBS_MESSAGE	test_getline.cpp	/^        _SC_2_PBS_MESSAGE,$/;"	e	enum:__anon99	file:
_SC_2_PBS_TRACK	test_getline.cpp	/^        _SC_2_PBS_TRACK,$/;"	e	enum:__anon99	file:
_SC_2_SW_DEV	test_getline.cpp	/^        _SC_2_SW_DEV,$/;"	e	enum:__anon99	file:
_SC_2_UPE	test_getline.cpp	/^        _SC_2_UPE,$/;"	e	enum:__anon99	file:
_SC_2_VERSION	test_getline.cpp	/^        _SC_2_VERSION,$/;"	e	enum:__anon99	file:
_SC_ADVISORY_INFO	test_getline.cpp	/^        _SC_ADVISORY_INFO,$/;"	e	enum:__anon99	file:
_SC_AIO_LISTIO_MAX	test_getline.cpp	/^        _SC_AIO_LISTIO_MAX,$/;"	e	enum:__anon99	file:
_SC_AIO_MAX	test_getline.cpp	/^        _SC_AIO_MAX,$/;"	e	enum:__anon99	file:
_SC_AIO_PRIO_DELTA_MAX	test_getline.cpp	/^        _SC_AIO_PRIO_DELTA_MAX,$/;"	e	enum:__anon99	file:
_SC_ARG_MAX	test_getline.cpp	/^        _SC_ARG_MAX,$/;"	e	enum:__anon99	file:
_SC_ASYNCHRONOUS_IO	test_getline.cpp	/^        _SC_ASYNCHRONOUS_IO,$/;"	e	enum:__anon99	file:
_SC_ATEXIT_MAX	test_getline.cpp	/^        _SC_ATEXIT_MAX,$/;"	e	enum:__anon99	file:
_SC_AVPHYS_PAGES	test_getline.cpp	/^        _SC_AVPHYS_PAGES,$/;"	e	enum:__anon99	file:
_SC_BARRIERS	test_getline.cpp	/^        _SC_BARRIERS,$/;"	e	enum:__anon99	file:
_SC_BASE	test_getline.cpp	/^        _SC_BASE,$/;"	e	enum:__anon99	file:
_SC_BC_BASE_MAX	test_getline.cpp	/^        _SC_BC_BASE_MAX,$/;"	e	enum:__anon99	file:
_SC_BC_DIM_MAX	test_getline.cpp	/^        _SC_BC_DIM_MAX,$/;"	e	enum:__anon99	file:
_SC_BC_SCALE_MAX	test_getline.cpp	/^        _SC_BC_SCALE_MAX,$/;"	e	enum:__anon99	file:
_SC_BC_STRING_MAX	test_getline.cpp	/^        _SC_BC_STRING_MAX,$/;"	e	enum:__anon99	file:
_SC_CHARCLASS_NAME_MAX	test_getline.cpp	/^        _SC_CHARCLASS_NAME_MAX,$/;"	e	enum:__anon99	file:
_SC_CHAR_BIT	test_getline.cpp	/^        _SC_CHAR_BIT,$/;"	e	enum:__anon99	file:
_SC_CHAR_MAX	test_getline.cpp	/^        _SC_CHAR_MAX,$/;"	e	enum:__anon99	file:
_SC_CHAR_MIN	test_getline.cpp	/^        _SC_CHAR_MIN,$/;"	e	enum:__anon99	file:
_SC_CHILD_MAX	test_getline.cpp	/^        _SC_CHILD_MAX,$/;"	e	enum:__anon99	file:
_SC_CLK_TCK	test_getline.cpp	/^        _SC_CLK_TCK,$/;"	e	enum:__anon99	file:
_SC_CLOCK_SELECTION	test_getline.cpp	/^        _SC_CLOCK_SELECTION,$/;"	e	enum:__anon99	file:
_SC_COLL_WEIGHTS_MAX	test_getline.cpp	/^        _SC_COLL_WEIGHTS_MAX,$/;"	e	enum:__anon99	file:
_SC_CPUTIME	test_getline.cpp	/^        _SC_CPUTIME,$/;"	e	enum:__anon99	file:
_SC_C_LANG_SUPPORT	test_getline.cpp	/^        _SC_C_LANG_SUPPORT,$/;"	e	enum:__anon99	file:
_SC_C_LANG_SUPPORT_R	test_getline.cpp	/^        _SC_C_LANG_SUPPORT_R,$/;"	e	enum:__anon99	file:
_SC_DELAYTIMER_MAX	test_getline.cpp	/^        _SC_DELAYTIMER_MAX,$/;"	e	enum:__anon99	file:
_SC_DEVICE_IO	test_getline.cpp	/^        _SC_DEVICE_IO,$/;"	e	enum:__anon99	file:
_SC_DEVICE_SPECIFIC	test_getline.cpp	/^        _SC_DEVICE_SPECIFIC,$/;"	e	enum:__anon99	file:
_SC_DEVICE_SPECIFIC_R	test_getline.cpp	/^        _SC_DEVICE_SPECIFIC_R,$/;"	e	enum:__anon99	file:
_SC_EQUIV_CLASS_MAX	test_getline.cpp	/^        _SC_EQUIV_CLASS_MAX,$/;"	e	enum:__anon99	file:
_SC_EXPR_NEST_MAX	test_getline.cpp	/^        _SC_EXPR_NEST_MAX,$/;"	e	enum:__anon99	file:
_SC_FD_MGMT	test_getline.cpp	/^        _SC_FD_MGMT,$/;"	e	enum:__anon99	file:
_SC_FIFO	test_getline.cpp	/^        _SC_FIFO,$/;"	e	enum:__anon99	file:
_SC_FILE_ATTRIBUTES	test_getline.cpp	/^        _SC_FILE_ATTRIBUTES,$/;"	e	enum:__anon99	file:
_SC_FILE_LOCKING	test_getline.cpp	/^        _SC_FILE_LOCKING,$/;"	e	enum:__anon99	file:
_SC_FILE_SYSTEM	test_getline.cpp	/^        _SC_FILE_SYSTEM,$/;"	e	enum:__anon99	file:
_SC_FSYNC	test_getline.cpp	/^        _SC_FSYNC,$/;"	e	enum:__anon99	file:
_SC_GETGR_R_SIZE_MAX	test_getline.cpp	/^        _SC_GETGR_R_SIZE_MAX,$/;"	e	enum:__anon99	file:
_SC_GETPW_R_SIZE_MAX	test_getline.cpp	/^        _SC_GETPW_R_SIZE_MAX,$/;"	e	enum:__anon99	file:
_SC_HOST_NAME_MAX	test_getline.cpp	/^        _SC_HOST_NAME_MAX,$/;"	e	enum:__anon99	file:
_SC_INT_MAX	test_getline.cpp	/^        _SC_INT_MAX,$/;"	e	enum:__anon99	file:
_SC_INT_MIN	test_getline.cpp	/^        _SC_INT_MIN,$/;"	e	enum:__anon99	file:
_SC_IOV_MAX	test_getline.cpp	/^        _SC_IOV_MAX = _SC_UIO_MAXIOV,$/;"	e	enum:__anon99	file:
_SC_IPV6	test_getline.cpp	/^        _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,$/;"	e	enum:__anon99	file:
_SC_JOB_CONTROL	test_getline.cpp	/^        _SC_JOB_CONTROL,$/;"	e	enum:__anon99	file:
_SC_LEVEL1_DCACHE_ASSOC	test_getline.cpp	/^        _SC_LEVEL1_DCACHE_ASSOC,$/;"	e	enum:__anon99	file:
_SC_LEVEL1_DCACHE_LINESIZE	test_getline.cpp	/^        _SC_LEVEL1_DCACHE_LINESIZE,$/;"	e	enum:__anon99	file:
_SC_LEVEL1_DCACHE_SIZE	test_getline.cpp	/^        _SC_LEVEL1_DCACHE_SIZE,$/;"	e	enum:__anon99	file:
_SC_LEVEL1_ICACHE_ASSOC	test_getline.cpp	/^        _SC_LEVEL1_ICACHE_ASSOC,$/;"	e	enum:__anon99	file:
_SC_LEVEL1_ICACHE_LINESIZE	test_getline.cpp	/^        _SC_LEVEL1_ICACHE_LINESIZE,$/;"	e	enum:__anon99	file:
_SC_LEVEL1_ICACHE_SIZE	test_getline.cpp	/^        _SC_LEVEL1_ICACHE_SIZE,$/;"	e	enum:__anon99	file:
_SC_LEVEL2_CACHE_ASSOC	test_getline.cpp	/^        _SC_LEVEL2_CACHE_ASSOC,$/;"	e	enum:__anon99	file:
_SC_LEVEL2_CACHE_LINESIZE	test_getline.cpp	/^        _SC_LEVEL2_CACHE_LINESIZE,$/;"	e	enum:__anon99	file:
_SC_LEVEL2_CACHE_SIZE	test_getline.cpp	/^        _SC_LEVEL2_CACHE_SIZE,$/;"	e	enum:__anon99	file:
_SC_LEVEL3_CACHE_ASSOC	test_getline.cpp	/^        _SC_LEVEL3_CACHE_ASSOC,$/;"	e	enum:__anon99	file:
_SC_LEVEL3_CACHE_LINESIZE	test_getline.cpp	/^        _SC_LEVEL3_CACHE_LINESIZE,$/;"	e	enum:__anon99	file:
_SC_LEVEL3_CACHE_SIZE	test_getline.cpp	/^        _SC_LEVEL3_CACHE_SIZE,$/;"	e	enum:__anon99	file:
_SC_LEVEL4_CACHE_ASSOC	test_getline.cpp	/^        _SC_LEVEL4_CACHE_ASSOC,$/;"	e	enum:__anon99	file:
_SC_LEVEL4_CACHE_LINESIZE	test_getline.cpp	/^        _SC_LEVEL4_CACHE_LINESIZE,$/;"	e	enum:__anon99	file:
_SC_LEVEL4_CACHE_SIZE	test_getline.cpp	/^        _SC_LEVEL4_CACHE_SIZE,$/;"	e	enum:__anon99	file:
_SC_LINE_MAX	test_getline.cpp	/^        _SC_LINE_MAX,$/;"	e	enum:__anon99	file:
_SC_LOGIN_NAME_MAX	test_getline.cpp	/^        _SC_LOGIN_NAME_MAX,$/;"	e	enum:__anon99	file:
_SC_LONG_BIT	test_getline.cpp	/^        _SC_LONG_BIT,$/;"	e	enum:__anon99	file:
_SC_MAPPED_FILES	test_getline.cpp	/^        _SC_MAPPED_FILES,$/;"	e	enum:__anon99	file:
_SC_MB_LEN_MAX	test_getline.cpp	/^        _SC_MB_LEN_MAX,$/;"	e	enum:__anon99	file:
_SC_MEMLOCK	test_getline.cpp	/^        _SC_MEMLOCK,$/;"	e	enum:__anon99	file:
_SC_MEMLOCK_RANGE	test_getline.cpp	/^        _SC_MEMLOCK_RANGE,$/;"	e	enum:__anon99	file:
_SC_MEMORY_PROTECTION	test_getline.cpp	/^        _SC_MEMORY_PROTECTION,$/;"	e	enum:__anon99	file:
_SC_MESSAGE_PASSING	test_getline.cpp	/^        _SC_MESSAGE_PASSING,$/;"	e	enum:__anon99	file:
_SC_MONOTONIC_CLOCK	test_getline.cpp	/^        _SC_MONOTONIC_CLOCK,$/;"	e	enum:__anon99	file:
_SC_MQ_OPEN_MAX	test_getline.cpp	/^        _SC_MQ_OPEN_MAX,$/;"	e	enum:__anon99	file:
_SC_MQ_PRIO_MAX	test_getline.cpp	/^        _SC_MQ_PRIO_MAX,$/;"	e	enum:__anon99	file:
_SC_MULTI_PROCESS	test_getline.cpp	/^        _SC_MULTI_PROCESS,$/;"	e	enum:__anon99	file:
_SC_NETWORKING	test_getline.cpp	/^        _SC_NETWORKING,$/;"	e	enum:__anon99	file:
_SC_NGROUPS_MAX	test_getline.cpp	/^        _SC_NGROUPS_MAX,$/;"	e	enum:__anon99	file:
_SC_NL_ARGMAX	test_getline.cpp	/^        _SC_NL_ARGMAX,$/;"	e	enum:__anon99	file:
_SC_NL_LANGMAX	test_getline.cpp	/^        _SC_NL_LANGMAX,$/;"	e	enum:__anon99	file:
_SC_NL_MSGMAX	test_getline.cpp	/^        _SC_NL_MSGMAX,$/;"	e	enum:__anon99	file:
_SC_NL_NMAX	test_getline.cpp	/^        _SC_NL_NMAX,$/;"	e	enum:__anon99	file:
_SC_NL_SETMAX	test_getline.cpp	/^        _SC_NL_SETMAX,$/;"	e	enum:__anon99	file:
_SC_NL_TEXTMAX	test_getline.cpp	/^        _SC_NL_TEXTMAX,$/;"	e	enum:__anon99	file:
_SC_NPROCESSORS_CONF	test_getline.cpp	/^        _SC_NPROCESSORS_CONF,$/;"	e	enum:__anon99	file:
_SC_NPROCESSORS_ONLN	test_getline.cpp	/^        _SC_NPROCESSORS_ONLN,$/;"	e	enum:__anon99	file:
_SC_NZERO	test_getline.cpp	/^        _SC_NZERO,$/;"	e	enum:__anon99	file:
_SC_OPEN_MAX	test_getline.cpp	/^        _SC_OPEN_MAX,$/;"	e	enum:__anon99	file:
_SC_PAGESIZE	test_getline.cpp	/^        _SC_PAGESIZE,$/;"	e	enum:__anon99	file:
_SC_PASS_MAX	test_getline.cpp	/^        _SC_PASS_MAX,$/;"	e	enum:__anon99	file:
_SC_PHYS_PAGES	test_getline.cpp	/^        _SC_PHYS_PAGES,$/;"	e	enum:__anon99	file:
_SC_PII	test_getline.cpp	/^        _SC_PII,$/;"	e	enum:__anon99	file:
_SC_PII_INTERNET	test_getline.cpp	/^        _SC_PII_INTERNET,$/;"	e	enum:__anon99	file:
_SC_PII_INTERNET_DGRAM	test_getline.cpp	/^        _SC_PII_INTERNET_DGRAM,$/;"	e	enum:__anon99	file:
_SC_PII_INTERNET_STREAM	test_getline.cpp	/^        _SC_PII_INTERNET_STREAM,$/;"	e	enum:__anon99	file:
_SC_PII_OSI	test_getline.cpp	/^        _SC_PII_OSI,$/;"	e	enum:__anon99	file:
_SC_PII_OSI_CLTS	test_getline.cpp	/^        _SC_PII_OSI_CLTS,$/;"	e	enum:__anon99	file:
_SC_PII_OSI_COTS	test_getline.cpp	/^        _SC_PII_OSI_COTS,$/;"	e	enum:__anon99	file:
_SC_PII_OSI_M	test_getline.cpp	/^        _SC_PII_OSI_M,$/;"	e	enum:__anon99	file:
_SC_PII_SOCKET	test_getline.cpp	/^        _SC_PII_SOCKET,$/;"	e	enum:__anon99	file:
_SC_PII_XTI	test_getline.cpp	/^        _SC_PII_XTI,$/;"	e	enum:__anon99	file:
_SC_PIPE	test_getline.cpp	/^        _SC_PIPE,$/;"	e	enum:__anon99	file:
_SC_POLL	test_getline.cpp	/^        _SC_POLL,$/;"	e	enum:__anon99	file:
_SC_PRIORITIZED_IO	test_getline.cpp	/^        _SC_PRIORITIZED_IO,$/;"	e	enum:__anon99	file:
_SC_PRIORITY_SCHEDULING	test_getline.cpp	/^        _SC_PRIORITY_SCHEDULING,$/;"	e	enum:__anon99	file:
_SC_RAW_SOCKETS	test_getline.cpp	/^        _SC_RAW_SOCKETS,$/;"	e	enum:__anon99	file:
_SC_READER_WRITER_LOCKS	test_getline.cpp	/^        _SC_READER_WRITER_LOCKS,$/;"	e	enum:__anon99	file:
_SC_REALTIME_SIGNALS	test_getline.cpp	/^        _SC_REALTIME_SIGNALS,$/;"	e	enum:__anon99	file:
_SC_REGEXP	test_getline.cpp	/^        _SC_REGEXP,$/;"	e	enum:__anon99	file:
_SC_REGEX_VERSION	test_getline.cpp	/^        _SC_REGEX_VERSION,$/;"	e	enum:__anon99	file:
_SC_RE_DUP_MAX	test_getline.cpp	/^        _SC_RE_DUP_MAX,$/;"	e	enum:__anon99	file:
_SC_RTSIG_MAX	test_getline.cpp	/^        _SC_RTSIG_MAX,$/;"	e	enum:__anon99	file:
_SC_SAVED_IDS	test_getline.cpp	/^        _SC_SAVED_IDS,$/;"	e	enum:__anon99	file:
_SC_SCHAR_MAX	test_getline.cpp	/^        _SC_SCHAR_MAX,$/;"	e	enum:__anon99	file:
_SC_SCHAR_MIN	test_getline.cpp	/^        _SC_SCHAR_MIN,$/;"	e	enum:__anon99	file:
_SC_SELECT	test_getline.cpp	/^        _SC_SELECT,$/;"	e	enum:__anon99	file:
_SC_SEMAPHORES	test_getline.cpp	/^        _SC_SEMAPHORES,$/;"	e	enum:__anon99	file:
_SC_SEM_NSEMS_MAX	test_getline.cpp	/^        _SC_SEM_NSEMS_MAX,$/;"	e	enum:__anon99	file:
_SC_SEM_VALUE_MAX	test_getline.cpp	/^        _SC_SEM_VALUE_MAX,$/;"	e	enum:__anon99	file:
_SC_SHARED_MEMORY_OBJECTS	test_getline.cpp	/^        _SC_SHARED_MEMORY_OBJECTS,$/;"	e	enum:__anon99	file:
_SC_SHELL	test_getline.cpp	/^        _SC_SHELL,$/;"	e	enum:__anon99	file:
_SC_SHRT_MAX	test_getline.cpp	/^        _SC_SHRT_MAX,$/;"	e	enum:__anon99	file:
_SC_SHRT_MIN	test_getline.cpp	/^        _SC_SHRT_MIN,$/;"	e	enum:__anon99	file:
_SC_SIGNALS	test_getline.cpp	/^        _SC_SIGNALS,$/;"	e	enum:__anon99	file:
_SC_SIGQUEUE_MAX	test_getline.cpp	/^        _SC_SIGQUEUE_MAX,$/;"	e	enum:__anon99	file:
_SC_SINGLE_PROCESS	test_getline.cpp	/^        _SC_SINGLE_PROCESS,$/;"	e	enum:__anon99	file:
_SC_SPAWN	test_getline.cpp	/^        _SC_SPAWN,$/;"	e	enum:__anon99	file:
_SC_SPIN_LOCKS	test_getline.cpp	/^        _SC_SPIN_LOCKS,$/;"	e	enum:__anon99	file:
_SC_SPORADIC_SERVER	test_getline.cpp	/^        _SC_SPORADIC_SERVER,$/;"	e	enum:__anon99	file:
_SC_SSIZE_MAX	test_getline.cpp	/^        _SC_SSIZE_MAX,$/;"	e	enum:__anon99	file:
_SC_SS_REPL_MAX	test_getline.cpp	/^        _SC_SS_REPL_MAX,$/;"	e	enum:__anon99	file:
_SC_STREAMS	test_getline.cpp	/^        _SC_STREAMS,$/;"	e	enum:__anon99	file:
_SC_STREAM_MAX	test_getline.cpp	/^        _SC_STREAM_MAX,$/;"	e	enum:__anon99	file:
_SC_SYMLOOP_MAX	test_getline.cpp	/^        _SC_SYMLOOP_MAX,$/;"	e	enum:__anon99	file:
_SC_SYNCHRONIZED_IO	test_getline.cpp	/^        _SC_SYNCHRONIZED_IO,$/;"	e	enum:__anon99	file:
_SC_SYSTEM_DATABASE	test_getline.cpp	/^        _SC_SYSTEM_DATABASE,$/;"	e	enum:__anon99	file:
_SC_SYSTEM_DATABASE_R	test_getline.cpp	/^        _SC_SYSTEM_DATABASE_R,$/;"	e	enum:__anon99	file:
_SC_THREADS	test_getline.cpp	/^        _SC_THREADS,$/;"	e	enum:__anon99	file:
_SC_THREAD_ATTR_STACKADDR	test_getline.cpp	/^        _SC_THREAD_ATTR_STACKADDR,$/;"	e	enum:__anon99	file:
_SC_THREAD_ATTR_STACKSIZE	test_getline.cpp	/^        _SC_THREAD_ATTR_STACKSIZE,$/;"	e	enum:__anon99	file:
_SC_THREAD_CPUTIME	test_getline.cpp	/^        _SC_THREAD_CPUTIME,$/;"	e	enum:__anon99	file:
_SC_THREAD_DESTRUCTOR_ITERATIONS	test_getline.cpp	/^        _SC_THREAD_DESTRUCTOR_ITERATIONS,$/;"	e	enum:__anon99	file:
_SC_THREAD_KEYS_MAX	test_getline.cpp	/^        _SC_THREAD_KEYS_MAX,$/;"	e	enum:__anon99	file:
_SC_THREAD_PRIORITY_SCHEDULING	test_getline.cpp	/^        _SC_THREAD_PRIORITY_SCHEDULING,$/;"	e	enum:__anon99	file:
_SC_THREAD_PRIO_INHERIT	test_getline.cpp	/^        _SC_THREAD_PRIO_INHERIT,$/;"	e	enum:__anon99	file:
_SC_THREAD_PRIO_PROTECT	test_getline.cpp	/^        _SC_THREAD_PRIO_PROTECT,$/;"	e	enum:__anon99	file:
_SC_THREAD_PROCESS_SHARED	test_getline.cpp	/^        _SC_THREAD_PROCESS_SHARED,$/;"	e	enum:__anon99	file:
_SC_THREAD_ROBUST_PRIO_INHERIT	test_getline.cpp	/^        _SC_THREAD_ROBUST_PRIO_INHERIT,$/;"	e	enum:__anon99	file:
_SC_THREAD_ROBUST_PRIO_PROTECT	test_getline.cpp	/^        _SC_THREAD_ROBUST_PRIO_PROTECT$/;"	e	enum:__anon99	file:
_SC_THREAD_SAFE_FUNCTIONS	test_getline.cpp	/^        _SC_THREAD_SAFE_FUNCTIONS,$/;"	e	enum:__anon99	file:
_SC_THREAD_SPORADIC_SERVER	test_getline.cpp	/^        _SC_THREAD_SPORADIC_SERVER,$/;"	e	enum:__anon99	file:
_SC_THREAD_STACK_MIN	test_getline.cpp	/^        _SC_THREAD_STACK_MIN,$/;"	e	enum:__anon99	file:
_SC_THREAD_THREADS_MAX	test_getline.cpp	/^        _SC_THREAD_THREADS_MAX,$/;"	e	enum:__anon99	file:
_SC_TIMEOUTS	test_getline.cpp	/^        _SC_TIMEOUTS,$/;"	e	enum:__anon99	file:
_SC_TIMERS	test_getline.cpp	/^        _SC_TIMERS,$/;"	e	enum:__anon99	file:
_SC_TIMER_MAX	test_getline.cpp	/^        _SC_TIMER_MAX,$/;"	e	enum:__anon99	file:
_SC_TRACE	test_getline.cpp	/^        _SC_TRACE,$/;"	e	enum:__anon99	file:
_SC_TRACE_EVENT_FILTER	test_getline.cpp	/^        _SC_TRACE_EVENT_FILTER,$/;"	e	enum:__anon99	file:
_SC_TRACE_EVENT_NAME_MAX	test_getline.cpp	/^        _SC_TRACE_EVENT_NAME_MAX,$/;"	e	enum:__anon99	file:
_SC_TRACE_INHERIT	test_getline.cpp	/^        _SC_TRACE_INHERIT,$/;"	e	enum:__anon99	file:
_SC_TRACE_LOG	test_getline.cpp	/^        _SC_TRACE_LOG,$/;"	e	enum:__anon99	file:
_SC_TRACE_NAME_MAX	test_getline.cpp	/^        _SC_TRACE_NAME_MAX,$/;"	e	enum:__anon99	file:
_SC_TRACE_SYS_MAX	test_getline.cpp	/^        _SC_TRACE_SYS_MAX,$/;"	e	enum:__anon99	file:
_SC_TRACE_USER_EVENT_MAX	test_getline.cpp	/^        _SC_TRACE_USER_EVENT_MAX,$/;"	e	enum:__anon99	file:
_SC_TTY_NAME_MAX	test_getline.cpp	/^        _SC_TTY_NAME_MAX,$/;"	e	enum:__anon99	file:
_SC_TYPED_MEMORY_OBJECTS	test_getline.cpp	/^        _SC_TYPED_MEMORY_OBJECTS,$/;"	e	enum:__anon99	file:
_SC_TZNAME_MAX	test_getline.cpp	/^        _SC_TZNAME_MAX,$/;"	e	enum:__anon99	file:
_SC_T_IOV_MAX	test_getline.cpp	/^        _SC_T_IOV_MAX,$/;"	e	enum:__anon99	file:
_SC_UCHAR_MAX	test_getline.cpp	/^        _SC_UCHAR_MAX,$/;"	e	enum:__anon99	file:
_SC_UINT_MAX	test_getline.cpp	/^        _SC_UINT_MAX,$/;"	e	enum:__anon99	file:
_SC_UIO_MAXIOV	test_getline.cpp	/^        _SC_UIO_MAXIOV,$/;"	e	enum:__anon99	file:
_SC_ULONG_MAX	test_getline.cpp	/^        _SC_ULONG_MAX,$/;"	e	enum:__anon99	file:
_SC_USER_GROUPS	test_getline.cpp	/^        _SC_USER_GROUPS,$/;"	e	enum:__anon99	file:
_SC_USER_GROUPS_R	test_getline.cpp	/^        _SC_USER_GROUPS_R,$/;"	e	enum:__anon99	file:
_SC_USHRT_MAX	test_getline.cpp	/^        _SC_USHRT_MAX,$/;"	e	enum:__anon99	file:
_SC_V6_ILP32_OFF32	test_getline.cpp	/^        _SC_V6_ILP32_OFF32,$/;"	e	enum:__anon99	file:
_SC_V6_ILP32_OFFBIG	test_getline.cpp	/^        _SC_V6_ILP32_OFFBIG,$/;"	e	enum:__anon99	file:
_SC_V6_LP64_OFF64	test_getline.cpp	/^        _SC_V6_LP64_OFF64,$/;"	e	enum:__anon99	file:
_SC_V6_LPBIG_OFFBIG	test_getline.cpp	/^        _SC_V6_LPBIG_OFFBIG,$/;"	e	enum:__anon99	file:
_SC_V7_ILP32_OFF32	test_getline.cpp	/^        _SC_V7_ILP32_OFF32,$/;"	e	enum:__anon99	file:
_SC_V7_ILP32_OFFBIG	test_getline.cpp	/^        _SC_V7_ILP32_OFFBIG,$/;"	e	enum:__anon99	file:
_SC_V7_LP64_OFF64	test_getline.cpp	/^        _SC_V7_LP64_OFF64,$/;"	e	enum:__anon99	file:
_SC_V7_LPBIG_OFFBIG	test_getline.cpp	/^        _SC_V7_LPBIG_OFFBIG,$/;"	e	enum:__anon99	file:
_SC_VERSION	test_getline.cpp	/^        _SC_VERSION,$/;"	e	enum:__anon99	file:
_SC_WORD_BIT	test_getline.cpp	/^        _SC_WORD_BIT,$/;"	e	enum:__anon99	file:
_SC_XBS5_ILP32_OFF32	test_getline.cpp	/^        _SC_XBS5_ILP32_OFF32,$/;"	e	enum:__anon99	file:
_SC_XBS5_ILP32_OFFBIG	test_getline.cpp	/^        _SC_XBS5_ILP32_OFFBIG,$/;"	e	enum:__anon99	file:
_SC_XBS5_LP64_OFF64	test_getline.cpp	/^        _SC_XBS5_LP64_OFF64,$/;"	e	enum:__anon99	file:
_SC_XBS5_LPBIG_OFFBIG	test_getline.cpp	/^        _SC_XBS5_LPBIG_OFFBIG,$/;"	e	enum:__anon99	file:
_SC_XOPEN_CRYPT	test_getline.cpp	/^        _SC_XOPEN_CRYPT,$/;"	e	enum:__anon99	file:
_SC_XOPEN_ENH_I18N	test_getline.cpp	/^        _SC_XOPEN_ENH_I18N,$/;"	e	enum:__anon99	file:
_SC_XOPEN_LEGACY	test_getline.cpp	/^        _SC_XOPEN_LEGACY,$/;"	e	enum:__anon99	file:
_SC_XOPEN_REALTIME	test_getline.cpp	/^        _SC_XOPEN_REALTIME,$/;"	e	enum:__anon99	file:
_SC_XOPEN_REALTIME_THREADS	test_getline.cpp	/^        _SC_XOPEN_REALTIME_THREADS,$/;"	e	enum:__anon99	file:
_SC_XOPEN_SHM	test_getline.cpp	/^        _SC_XOPEN_SHM,$/;"	e	enum:__anon99	file:
_SC_XOPEN_STREAMS	test_getline.cpp	/^        _SC_XOPEN_STREAMS,$/;"	e	enum:__anon99	file:
_SC_XOPEN_UNIX	test_getline.cpp	/^        _SC_XOPEN_UNIX,$/;"	e	enum:__anon99	file:
_SC_XOPEN_VERSION	test_getline.cpp	/^        _SC_XOPEN_VERSION,$/;"	e	enum:__anon99	file:
_SC_XOPEN_XCU_VERSION	test_getline.cpp	/^        _SC_XOPEN_XCU_VERSION,$/;"	e	enum:__anon99	file:
_SC_XOPEN_XPG2	test_getline.cpp	/^        _SC_XOPEN_XPG2,$/;"	e	enum:__anon99	file:
_SC_XOPEN_XPG3	test_getline.cpp	/^        _SC_XOPEN_XPG3,$/;"	e	enum:__anon99	file:
_SC_XOPEN_XPG4	test_getline.cpp	/^        _SC_XOPEN_XPG4,$/;"	e	enum:__anon99	file:
_S_adjustfield	test_getline.cpp	/^        _S_adjustfield = _S_left | _S_right | _S_internal,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_app	test_getline.cpp	/^        _S_app = 1L << 0,$/;"	e	enum:std::_Ios_Openmode	file:
_S_ate	test_getline.cpp	/^        _S_ate = 1L << 1,$/;"	e	enum:std::_Ios_Openmode	file:
_S_atoms_in	test_getline.cpp	/^            static const char* _S_atoms_in;$/;"	m	class:std::__num_base	file:
_S_atoms_out	test_getline.cpp	/^            static const char* _S_atoms_out;$/;"	m	class:std::__num_base	file:
_S_badbit	test_getline.cpp	/^        _S_badbit = 1L << 0,$/;"	e	enum:std::_Ios_Iostate	file:
_S_basefield	test_getline.cpp	/^        _S_basefield = _S_dec | _S_oct | _S_hex,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_beg	test_getline.cpp	/^        _S_beg = 0,$/;"	e	enum:std::_Ios_Seekdir	file:
_S_bin	test_getline.cpp	/^        _S_bin = 1L << 2,$/;"	e	enum:std::_Ios_Openmode	file:
_S_boolalpha	test_getline.cpp	/^        _S_boolalpha = 1L << 0,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_c_locale	test_getline.cpp	/^            static __c_locale _S_c_locale;$/;"	m	class:std::locale::facet	file:
_S_c_name	test_getline.cpp	/^            static const char _S_c_name[2];$/;"	m	class:std::locale::facet	file:
_S_categories	test_getline.cpp	/^            static const char* const* const _S_categories;$/;"	m	class:std::locale	file:
_S_categories_size	test_getline.cpp	/^            enum { _S_categories_size = 6 + 6 };$/;"	e	enum:std::locale::__anon101	file:
_S_classic	test_getline.cpp	/^            static _Impl* _S_classic;$/;"	m	class:std::locale	file:
_S_compare	test_getline.cpp	/^                _S_compare(size_type __n1, size_type __n2)$/;"	f	class:std::basic_string	file:
_S_construct	test_getline.cpp	/^                _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)$/;"	f	class:std::basic_string	file:
_S_construct	test_getline.cpp	/^        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	f	class:std::basic_string
_S_construct	test_getline.cpp	/^        _S_construct(size_type __n, _CharT __c, const _Alloc& __a)$/;"	f	class:std::basic_string
_S_construct_aux	test_getline.cpp	/^                _S_construct_aux(_InIterator __beg, _InIterator __end,$/;"	f	class:std::basic_string	file:
_S_construct_aux	test_getline.cpp	/^                _S_construct_aux(_Integer __beg, _Integer __end,$/;"	f	class:std::basic_string	file:
_S_copy_chars	test_getline.cpp	/^                _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)$/;"	f	class:std::basic_string	file:
_S_copy_chars	test_getline.cpp	/^                _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)$/;"	f	class:std::basic_string	file:
_S_copy_chars	test_getline.cpp	/^                _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)$/;"	f	class:std::basic_string	file:
_S_copy_chars	test_getline.cpp	/^                _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)$/;"	f	class:std::basic_string	file:
_S_copy_chars	test_getline.cpp	/^                _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)$/;"	f	class:std::basic_string	file:
_S_create	test_getline.cpp	/^        _S_create(size_type __capacity, size_type __old_capacity,$/;"	f	class:std::basic_string::_Rep
_S_cur	test_getline.cpp	/^        _S_cur = 1,$/;"	e	enum:std::_Ios_Seekdir	file:
_S_dec	test_getline.cpp	/^        _S_dec = 1L << 1,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_do_it	test_getline.cpp	/^                _S_do_it(_Alloc& __one, _Alloc& __two)$/;"	f	struct:std::__alloc_swap
_S_do_it	test_getline.cpp	/^                _S_do_it(const _Alloc& __one, const _Alloc& __two)$/;"	f	struct:std::__alloc_neq
_S_do_it	test_getline.cpp	/^                _S_do_it(const _Alloc&, const _Alloc&)$/;"	f	struct:std::__alloc_neq
_S_do_it	test_getline.cpp	/^        { static void _S_do_it(_Alloc&, _Alloc&) { } };$/;"	f	struct:std::__alloc_swap
_S_empty_rep	test_getline.cpp	/^                    _S_empty_rep()$/;"	f	struct:std::basic_string::_Rep
_S_empty_rep	test_getline.cpp	/^                _S_empty_rep()$/;"	f	class:std::basic_string	file:
_S_empty_rep_storage	test_getline.cpp	/^                static size_type _S_empty_rep_storage[];$/;"	m	struct:std::basic_string::_Rep	file:
_S_empty_rep_storage	test_getline.cpp	/^        basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[$/;"	m	class:std::basic_string::_Rep	file:
_S_end	test_getline.cpp	/^        _S_end = 2,$/;"	e	enum:std::_Ios_Seekdir	file:
_S_eofbit	test_getline.cpp	/^        _S_eofbit = 1L << 1,$/;"	e	enum:std::_Ios_Iostate	file:
_S_facet_categories	test_getline.cpp	/^            static const locale::id* const* const _S_facet_categories[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_failbit	test_getline.cpp	/^        _S_failbit = 1L << 2,$/;"	e	enum:std::_Ios_Iostate	file:
_S_fixed	test_getline.cpp	/^        _S_fixed = 1L << 2,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_floatfield	test_getline.cpp	/^        _S_floatfield = _S_scientific | _S_fixed,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_global	test_getline.cpp	/^            static _Impl* _S_global;$/;"	m	class:std::locale	file:
_S_goodbit	test_getline.cpp	/^        _S_goodbit = 0,$/;"	e	enum:std::_Ios_Iostate	file:
_S_hex	test_getline.cpp	/^        _S_hex = 1L << 3,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_iE	test_getline.cpp	/^                _S_iE = _S_izero + 20,$/;"	e	enum:std::__num_base::__anon105	file:
_S_iX	test_getline.cpp	/^                _S_iX,$/;"	e	enum:std::__num_base::__anon105	file:
_S_id_collate	test_getline.cpp	/^            static const locale::id* const _S_id_collate[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_id_ctype	test_getline.cpp	/^            static const locale::id* const _S_id_ctype[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_id_messages	test_getline.cpp	/^            static const locale::id* const _S_id_messages[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_id_monetary	test_getline.cpp	/^            static const locale::id* const _S_id_monetary[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_id_numeric	test_getline.cpp	/^            static const locale::id* const _S_id_numeric[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_id_time	test_getline.cpp	/^            static const locale::id* const _S_id_time[];$/;"	m	class:std::locale::_Impl::locale	file:
_S_ie	test_getline.cpp	/^                _S_ie = _S_izero + 14,$/;"	e	enum:std::__num_base::__anon105	file:
_S_iend	test_getline.cpp	/^                _S_iend = 26$/;"	e	enum:std::__num_base::__anon105	file:
_S_iminus	test_getline.cpp	/^                _S_iminus,$/;"	e	enum:std::__num_base::__anon105	file:
_S_in	test_getline.cpp	/^        _S_in = 1L << 3,$/;"	e	enum:std::_Ios_Openmode	file:
_S_internal	test_getline.cpp	/^        _S_internal = 1L << 4,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_ios_fmtflags_end	test_getline.cpp	/^        _S_ios_fmtflags_end = 1L << 16$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_ios_iostate_end	test_getline.cpp	/^        _S_ios_iostate_end = 1L << 16$/;"	e	enum:std::_Ios_Iostate	file:
_S_ios_openmode_end	test_getline.cpp	/^        _S_ios_openmode_end = 1L << 16$/;"	e	enum:std::_Ios_Openmode	file:
_S_ios_seekdir_end	test_getline.cpp	/^        _S_ios_seekdir_end = 1L << 16$/;"	e	enum:std::_Ios_Seekdir	file:
_S_iplus	test_getline.cpp	/^                _S_iplus,$/;"	e	enum:std::__num_base::__anon105	file:
_S_ix	test_getline.cpp	/^                _S_ix,$/;"	e	enum:std::__num_base::__anon105	file:
_S_izero	test_getline.cpp	/^                _S_izero,$/;"	e	enum:std::__num_base::__anon105	file:
_S_left	test_getline.cpp	/^        _S_left = 1L << 5,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_local_word_size	test_getline.cpp	/^            enum { _S_local_word_size = 8 };$/;"	e	enum:std::ios_base::__anon102	file:
_S_max_size	test_getline.cpp	/^                static const size_type _S_max_size;$/;"	m	struct:std::basic_string::_Rep	file:
_S_max_size	test_getline.cpp	/^        _Rep::_S_max_size = (((npos - sizeof(_Rep_base))\/sizeof(_CharT)) - 1) \/ 4;$/;"	m	class:std::basic_string::_Rep	file:
_S_oE	test_getline.cpp	/^                _S_oE = _S_oudigits + 14,$/;"	e	enum:std::__num_base::__anon104	file:
_S_oX	test_getline.cpp	/^                _S_oX,$/;"	e	enum:std::__num_base::__anon104	file:
_S_oct	test_getline.cpp	/^        _S_oct = 1L << 6,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_odigits	test_getline.cpp	/^                _S_odigits,$/;"	e	enum:std::__num_base::__anon104	file:
_S_odigits_end	test_getline.cpp	/^                _S_odigits_end = _S_odigits + 16,$/;"	e	enum:std::__num_base::__anon104	file:
_S_oe	test_getline.cpp	/^                _S_oe = _S_odigits + 14,$/;"	e	enum:std::__num_base::__anon104	file:
_S_oend	test_getline.cpp	/^                _S_oend = _S_oudigits_end$/;"	e	enum:std::__num_base::__anon104	file:
_S_ominus	test_getline.cpp	/^                _S_ominus,$/;"	e	enum:std::__num_base::__anon104	file:
_S_once	test_getline.cpp	/^            static __gthread_once_t _S_once;$/;"	m	class:std::locale	file:
_S_once	test_getline.cpp	/^            static __gthread_once_t _S_once;$/;"	m	class:std::locale::facet	file:
_S_oplus	test_getline.cpp	/^                _S_oplus,$/;"	e	enum:std::__num_base::__anon104	file:
_S_oudigits	test_getline.cpp	/^                _S_oudigits = _S_odigits_end,$/;"	e	enum:std::__num_base::__anon104	file:
_S_oudigits_end	test_getline.cpp	/^                _S_oudigits_end = _S_oudigits + 16,$/;"	e	enum:std::__num_base::__anon104	file:
_S_out	test_getline.cpp	/^        _S_out = 1L << 4,$/;"	e	enum:std::_Ios_Openmode	file:
_S_ox	test_getline.cpp	/^                _S_ox,$/;"	e	enum:std::__num_base::__anon104	file:
_S_pad	test_getline.cpp	/^        __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,$/;"	f	class:std::__pad
_S_refcount	test_getline.cpp	/^                static _Atomic_word _S_refcount;$/;"	m	class:std::ios_base::Init	file:
_S_refcount	test_getline.cpp	/^            static _Atomic_word _S_refcount;$/;"	m	class:std::locale::id	file:
_S_right	test_getline.cpp	/^        _S_right = 1L << 7,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_scientific	test_getline.cpp	/^        _S_scientific = 1L << 8,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_showbase	test_getline.cpp	/^        _S_showbase = 1L << 9,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_showpoint	test_getline.cpp	/^        _S_showpoint = 1L << 10,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_showpos	test_getline.cpp	/^        _S_showpos = 1L << 11,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_skipws	test_getline.cpp	/^        _S_skipws = 1L << 12,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_synced_with_stdio	test_getline.cpp	/^                static bool _S_synced_with_stdio;$/;"	m	class:std::ios_base::Init	file:
_S_terminal	test_getline.cpp	/^                static const _CharT _S_terminal;$/;"	m	struct:std::basic_string::_Rep	file:
_S_terminal	test_getline.cpp	/^        _Rep::_S_terminal = _CharT();$/;"	m	class:std::basic_string::_Rep	file:
_S_trunc	test_getline.cpp	/^        _S_trunc = 1L << 5,$/;"	e	enum:std::_Ios_Openmode	file:
_S_unitbuf	test_getline.cpp	/^        _S_unitbuf = 1L << 13,$/;"	e	enum:std::_Ios_Fmtflags	file:
_S_uppercase	test_getline.cpp	/^        _S_uppercase = 1L << 14,$/;"	e	enum:std::_Ios_Fmtflags	file:
_Select1st	test_getline.cpp	/^        struct _Select1st : public unary_function<_Pair,$/;"	s	namespace:std	file:
_Select2nd	test_getline.cpp	/^        struct _Select2nd : public unary_function<_Pair,$/;"	s	namespace:std	file:
_Tp	test_getline.cpp	/^        swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])$/;"	m	namespace:std	file:
_Words	test_getline.cpp	/^                _Words() : _M_pword(0), _M_iword(0) { }$/;"	f	struct:std::ios_base::_Words
_Words	test_getline.cpp	/^            struct _Words$/;"	s	class:std::ios_base	file:
__FILE	test_getline.cpp	/^typedef struct _IO_FILE __FILE;$/;"	t	typeref:struct:_IO_FILE	file:
__ISwalnum	test_getline.cpp	/^    __ISwalnum = 11,$/;"	e	enum:__anon103	file:
__ISwalpha	test_getline.cpp	/^    __ISwalpha = 2,$/;"	e	enum:__anon103	file:
__ISwblank	test_getline.cpp	/^    __ISwblank = 8,$/;"	e	enum:__anon103	file:
__ISwcntrl	test_getline.cpp	/^    __ISwcntrl = 9,$/;"	e	enum:__anon103	file:
__ISwdigit	test_getline.cpp	/^    __ISwdigit = 3,$/;"	e	enum:__anon103	file:
__ISwgraph	test_getline.cpp	/^    __ISwgraph = 7,$/;"	e	enum:__anon103	file:
__ISwlower	test_getline.cpp	/^    __ISwlower = 1,$/;"	e	enum:__anon103	file:
__ISwprint	test_getline.cpp	/^    __ISwprint = 6,$/;"	e	enum:__anon103	file:
__ISwpunct	test_getline.cpp	/^    __ISwpunct = 10,$/;"	e	enum:__anon103	file:
__ISwspace	test_getline.cpp	/^    __ISwspace = 5,$/;"	e	enum:__anon103	file:
__ISwupper	test_getline.cpp	/^    __ISwupper = 0,$/;"	e	enum:__anon103	file:
__ISwxdigit	test_getline.cpp	/^    __ISwxdigit = 4,$/;"	e	enum:__anon103	file:
__LC_ADDRESS	test_getline.cpp	/^    __LC_ADDRESS = 9,$/;"	e	enum:__anon71	file:
__LC_ALL	test_getline.cpp	/^    __LC_ALL = 6,$/;"	e	enum:__anon71	file:
__LC_COLLATE	test_getline.cpp	/^    __LC_COLLATE = 3,$/;"	e	enum:__anon71	file:
__LC_CTYPE	test_getline.cpp	/^    __LC_CTYPE = 0,$/;"	e	enum:__anon71	file:
__LC_IDENTIFICATION	test_getline.cpp	/^    __LC_IDENTIFICATION = 12$/;"	e	enum:__anon71	file:
__LC_MEASUREMENT	test_getline.cpp	/^    __LC_MEASUREMENT = 11,$/;"	e	enum:__anon71	file:
__LC_MESSAGES	test_getline.cpp	/^    __LC_MESSAGES = 5,$/;"	e	enum:__anon71	file:
__LC_MONETARY	test_getline.cpp	/^    __LC_MONETARY = 4,$/;"	e	enum:__anon71	file:
__LC_NAME	test_getline.cpp	/^    __LC_NAME = 8,$/;"	e	enum:__anon71	file:
__LC_NUMERIC	test_getline.cpp	/^    __LC_NUMERIC = 1,$/;"	e	enum:__anon71	file:
__LC_PAPER	test_getline.cpp	/^    __LC_PAPER = 7,$/;"	e	enum:__anon71	file:
__LC_TELEPHONE	test_getline.cpp	/^    __LC_TELEPHONE = 10,$/;"	e	enum:__anon71	file:
__LC_TIME	test_getline.cpp	/^    __LC_TIME = 2,$/;"	e	enum:__anon71	file:
__add_grouping	test_getline.cpp	/^        __add_grouping(_CharT* __s, _CharT __sep,$/;"	f	namespace:std
__add_unsigned	test_getline.cpp	/^        struct __add_unsigned$/;"	s	namespace:__gnu_cxx	file:
__add_unsigned	test_getline.cpp	/^        struct __add_unsigned<char>$/;"	s	namespace:__gnu_cxx	file:
__add_unsigned	test_getline.cpp	/^        struct __add_unsigned<int>$/;"	s	namespace:__gnu_cxx	file:
__add_unsigned	test_getline.cpp	/^        struct __add_unsigned<long long>$/;"	s	namespace:__gnu_cxx	file:
__add_unsigned	test_getline.cpp	/^        struct __add_unsigned<long>$/;"	s	namespace:__gnu_cxx	file:
__add_unsigned	test_getline.cpp	/^        struct __add_unsigned<short>$/;"	s	namespace:__gnu_cxx	file:
__add_unsigned	test_getline.cpp	/^        struct __add_unsigned<signed char>$/;"	s	namespace:__gnu_cxx	file:
__advance	test_getline.cpp	/^        __advance(_BidirectionalIterator& __i, _Distance __n,$/;"	f	namespace:std
__advance	test_getline.cpp	/^        __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)$/;"	f	namespace:std
__advance	test_getline.cpp	/^        __advance(_RandomAccessIterator& __i, _Distance __n,$/;"	f	namespace:std
__align	test_getline.cpp	/^    __extension__ long long int __align;$/;"	m	union:__anon78	file:
__align	test_getline.cpp	/^    int __align;$/;"	m	union:__anon77	file:
__align	test_getline.cpp	/^    int __align;$/;"	m	union:__anon80	file:
__align	test_getline.cpp	/^    int __align;$/;"	m	union:__anon85	file:
__align	test_getline.cpp	/^    long int __align;$/;"	m	union:__anon75	file:
__align	test_getline.cpp	/^    long int __align;$/;"	m	union:__anon76	file:
__align	test_getline.cpp	/^    long int __align;$/;"	m	union:__anon81	file:
__align	test_getline.cpp	/^    long int __align;$/;"	m	union:__anon83	file:
__align	test_getline.cpp	/^    long int __align;$/;"	m	union:__anon84	file:
__alloc_neq	test_getline.cpp	/^        struct __alloc_neq$/;"	s	namespace:std	file:
__alloc_neq	test_getline.cpp	/^        struct __alloc_neq<_Alloc, false>$/;"	s	namespace:std	file:
__alloc_swap	test_getline.cpp	/^        struct __alloc_swap$/;"	s	namespace:std	file:
__alloc_swap	test_getline.cpp	/^        struct __alloc_swap<_Alloc, false>$/;"	s	namespace:std	file:
__are_same	test_getline.cpp	/^        struct __are_same$/;"	s	namespace:std	file:
__are_same	test_getline.cpp	/^        struct __are_same<_Tp, _Tp>$/;"	s	namespace:std	file:
__arg	test_getline.cpp	/^    void *__arg;$/;"	m	struct:_pthread_cleanup_buffer	file:
__atomic_add	test_getline.cpp	/^        __atomic_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
__atomic_add_dispatch	test_getline.cpp	/^        __atomic_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
__atomic_add_single	test_getline.cpp	/^        __atomic_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
__b	test_getline.cpp	/^                    __b(_Iterator __it)$/;"	f	struct:std::__miter_base
__b	test_getline.cpp	/^                    __b(_Iterator __it)$/;"	f	struct:std::__niter_base
__b	test_getline.cpp	/^                __b(_Iterator __it)$/;"	f	struct:std::__miter_base
__b	test_getline.cpp	/^                __b(_Iterator __it)$/;"	f	struct:std::__niter_base
__bits	test_getline.cpp	/^    __cpu_mask __bits[1024 \/ (8 * sizeof (__cpu_mask))];$/;"	m	struct:__anon74	file:
__blkcnt64_t	test_getline.cpp	/^typedef long int __blkcnt64_t;$/;"	t	file:
__blkcnt_t	test_getline.cpp	/^typedef long int __blkcnt_t;$/;"	t	file:
__blksize_t	test_getline.cpp	/^typedef long int __blksize_t;$/;"	t	file:
__broadcast_seq	test_getline.cpp	/^        unsigned int __broadcast_seq;$/;"	m	struct:__anon78::__anon79	file:
__c_locale	test_getline.cpp	/^    typedef __locale_t __c_locale;$/;"	t	namespace:std	file:
__cache_type	test_getline.cpp	/^            typedef __numpunct_cache<_CharT> __cache_type;$/;"	t	class:std::numpunct	file:
__caddr_t	test_getline.cpp	/^typedef char *__caddr_t;$/;"	t	file:
__cancel_arg	test_getline.cpp	/^        void *__cancel_arg;$/;"	m	class:__pthread_cleanup_class	file:
__cancel_arg	test_getline.cpp	/^        void *__cancel_arg;$/;"	m	struct:__pthread_cleanup_frame	file:
__cancel_jmp_buf	test_getline.cpp	/^            __jmp_buf __cancel_jmp_buf;$/;"	m	struct:__anon96::__anon97	file:
__cancel_jmp_buf	test_getline.cpp	/^        } __cancel_jmp_buf[1];$/;"	m	struct:__anon96	typeref:struct:__anon96::__anon97	file:
__cancel_routine	test_getline.cpp	/^        void (*__cancel_routine) (void *);$/;"	m	class:__pthread_cleanup_class	file:
__cancel_routine	test_getline.cpp	/^        void (*__cancel_routine) (void *);$/;"	m	struct:__pthread_cleanup_frame	file:
__cancel_type	test_getline.cpp	/^        int __cancel_type;$/;"	m	class:__pthread_cleanup_class	file:
__cancel_type	test_getline.cpp	/^        int __cancel_type;$/;"	m	struct:__pthread_cleanup_frame	file:
__canceltype	test_getline.cpp	/^    int __canceltype;$/;"	m	struct:_pthread_cleanup_buffer	file:
__check_facet	test_getline.cpp	/^        __check_facet(const _Facet* __f)$/;"	f	namespace:std
__clock_t	test_getline.cpp	/^typedef long int __clock_t;$/;"	t	file:
__clockid_t	test_getline.cpp	/^typedef int __clockid_t;$/;"	t	file:
__cnd2	test_getline.cpp	/^                __cnd2(_II __first, _II __last)$/;"	f	struct:std::__lc_rai
__cnd2	test_getline.cpp	/^                __cnd2(_RAI, _RAI)$/;"	f	struct:std::__lc_rai
__conditional_type	test_getline.cpp	/^        struct __conditional_type$/;"	s	namespace:__gnu_cxx	file:
__conditional_type	test_getline.cpp	/^        struct __conditional_type<false, _Iftrue, _Iffalse>$/;"	s	namespace:__gnu_cxx	file:
__convert_from_v	test_getline.cpp	/^        __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),$/;"	f	namespace:std
__copy_m	test_getline.cpp	/^                __copy_m(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_move
__copy_m	test_getline.cpp	/^                __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy_move
__copy_move	test_getline.cpp	/^        struct __copy_move$/;"	s	namespace:std	file:
__copy_move	test_getline.cpp	/^        struct __copy_move<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std	file:
__copy_move	test_getline.cpp	/^        struct __copy_move<false, false, random_access_iterator_tag>$/;"	s	namespace:std	file:
__copy_move_a	test_getline.cpp	/^        __copy_move_a(_II __first, _II __last, _OI __result)$/;"	f	namespace:std
__copy_move_a2	test_getline.cpp	/^                     __copy_move_a2(_CharT* __first, _CharT* __last,$/;"	f	namespace:std
__copy_move_a2	test_getline.cpp	/^                     __copy_move_a2(const _CharT* __first, const _CharT* __last,$/;"	f	namespace:std
__copy_move_a2	test_getline.cpp	/^                     __copy_move_a2(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std
__copy_move_a2	test_getline.cpp	/^        __copy_move_a2(_II __first, _II __last, _OI __result)$/;"	f	namespace:std
__copy_move_b	test_getline.cpp	/^                __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_move_backward
__copy_move_b	test_getline.cpp	/^                __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy_move_backward
__copy_move_backward	test_getline.cpp	/^        struct __copy_move_backward$/;"	s	namespace:std	file:
__copy_move_backward	test_getline.cpp	/^        struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std	file:
__copy_move_backward	test_getline.cpp	/^        struct __copy_move_backward<false, false, random_access_iterator_tag>$/;"	s	namespace:std	file:
__copy_move_backward_a	test_getline.cpp	/^        __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std
__copy_move_backward_a2	test_getline.cpp	/^        __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std
__copy_streambufs	test_getline.cpp	/^        __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,$/;"	f	namespace:std
__copy_streambufs_eof	test_getline.cpp	/^        __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,$/;"	f	namespace:std
__count	test_getline.cpp	/^        unsigned int __count;$/;"	m	struct:__anon76::__pthread_mutex_s	file:
__count	test_getline.cpp	/^    int __count;$/;"	m	struct:__anon34	file:
__cpu_mask	test_getline.cpp	/^typedef unsigned long int __cpu_mask;$/;"	t	file:
__ctype_abstract_base	test_getline.cpp	/^                __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }$/;"	f	class:std::__ctype_abstract_base
__ctype_abstract_base	test_getline.cpp	/^        class __ctype_abstract_base : public locale::facet, public ctype_base$/;"	c	namespace:std	file:
__ctype_b	test_getline.cpp	/^        const unsigned short int *__ctype_b;$/;"	m	struct:__locale_struct	file:
__ctype_tolower	test_getline.cpp	/^        const int *__ctype_tolower;$/;"	m	struct:__locale_struct	file:
__ctype_toupper	test_getline.cpp	/^        const int *__ctype_toupper;$/;"	m	struct:__locale_struct	file:
__ctype_type	test_getline.cpp	/^                typedef typename __istream_type::__ctype_type __ctype_type;$/;"	t	class:std::basic_istream::sentry	file:
__ctype_type	test_getline.cpp	/^            typedef ctype<_CharT> __ctype_type;$/;"	t	class:std::basic_ios	file:
__ctype_type	test_getline.cpp	/^            typedef ctype<_CharT> __ctype_type;$/;"	t	class:std::basic_istream	file:
__ctype_type	test_getline.cpp	/^            typedef ctype<_CharT> __ctype_type;$/;"	t	class:std::basic_ostream	file:
__cxxabiv1	test_getline.cpp	/^namespace __cxxabiv1$/;"	n	file:
__daddr_t	test_getline.cpp	/^typedef int __daddr_t;$/;"	t	file:
__data	test_getline.cpp	/^    } __data;$/;"	m	union:__anon76	typeref:struct:__anon76::__pthread_mutex_s	file:
__data	test_getline.cpp	/^    } __data;$/;"	m	union:__anon78	typeref:struct:__anon78::__anon79	file:
__data	test_getline.cpp	/^    } __data;$/;"	m	union:__anon81	typeref:struct:__anon81::__anon82	file:
__debug	test_getline.cpp	/^    namespace __debug { }$/;"	n	namespace:std	file:
__defer	test_getline.cpp	/^        void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,$/;"	f	class:__pthread_cleanup_class
__dev_t	test_getline.cpp	/^typedef unsigned long int __dev_t;$/;"	t	file:
__digits	test_getline.cpp	/^            static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	file:
__digits	test_getline.cpp	/^        const int __numeric_traits_integer<_Value>::__digits;$/;"	m	class:__gnu_cxx::__numeric_traits_integer	file:
__digits10	test_getline.cpp	/^            static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	file:
__digits10	test_getline.cpp	/^        const int __numeric_traits_floating<_Value>::__digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating	file:
__distance	test_getline.cpp	/^        __distance(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std
__distance	test_getline.cpp	/^        __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std
__do_it	test_getline.cpp	/^        int __do_it;$/;"	m	class:__pthread_cleanup_class	file:
__do_it	test_getline.cpp	/^        int __do_it;$/;"	m	struct:__pthread_cleanup_frame	file:
__enable_if	test_getline.cpp	/^        struct __enable_if$/;"	s	namespace:__gnu_cxx	file:
__enable_if	test_getline.cpp	/^        struct __enable_if<true, _Tp>$/;"	s	namespace:__gnu_cxx	file:
__equal	test_getline.cpp	/^        struct __equal$/;"	s	namespace:std	file:
__equal	test_getline.cpp	/^        struct __equal<true>$/;"	s	namespace:std	file:
__equal_aux	test_getline.cpp	/^        __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std
__exchange_and_add	test_getline.cpp	/^        __exchange_and_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
__exchange_and_add_dispatch	test_getline.cpp	/^        __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
__exchange_and_add_single	test_getline.cpp	/^        __exchange_and_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx
__false_type	test_getline.cpp	/^    struct __false_type { };$/;"	s	namespace:std	file:
__fill_a	test_getline.cpp	/^        __fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std
__fill_a	test_getline.cpp	/^        __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)$/;"	f	namespace:std
__fill_n_a	test_getline.cpp	/^        __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std
__fill_n_a	test_getline.cpp	/^        __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)$/;"	f	namespace:std
__flags	test_getline.cpp	/^        unsigned int __flags;$/;"	m	struct:__anon81::__anon82	file:
__forced_unwind	test_getline.cpp	/^    class __forced_unwind$/;"	c	namespace:__cxxabiv1	file:
__fsblkcnt64_t	test_getline.cpp	/^typedef unsigned long int __fsblkcnt64_t;$/;"	t	file:
__fsblkcnt_t	test_getline.cpp	/^typedef unsigned long int __fsblkcnt_t;$/;"	t	file:
__fsfilcnt64_t	test_getline.cpp	/^typedef unsigned long int __fsfilcnt64_t;$/;"	t	file:
__fsfilcnt_t	test_getline.cpp	/^typedef unsigned long int __fsfilcnt_t;$/;"	t	file:
__fsid_t	test_getline.cpp	/^typedef struct { int __val[2]; } __fsid_t;$/;"	t	typeref:struct:__anon72	file:
__futex	test_getline.cpp	/^        unsigned int __futex;$/;"	m	struct:__anon78::__anon79	file:
__gid_t	test_getline.cpp	/^typedef unsigned int __gid_t;$/;"	t	file:
__gnu_cxx	test_getline.cpp	/^    namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {$/;"	n	file:
__gnu_cxx	test_getline.cpp	/^namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {$/;"	n	file:
__gnu_debug	test_getline.cpp	/^namespace __gnu_debug$/;"	n	file:
__gnuc_va_list	test_getline.cpp	/^typedef __builtin_va_list __gnuc_va_list;$/;"	t	file:
__gthread_active_p	test_getline.cpp	/^__gthread_active_p (void)$/;"	f	file:
__gthread_cond_broadcast	test_getline.cpp	/^__gthread_cond_broadcast (__gthread_cond_t *__cond)$/;"	f	file:
__gthread_cond_destroy	test_getline.cpp	/^__gthread_cond_destroy (__gthread_cond_t* __cond)$/;"	f	file:
__gthread_cond_signal	test_getline.cpp	/^__gthread_cond_signal (__gthread_cond_t *__cond)$/;"	f	file:
__gthread_cond_t	test_getline.cpp	/^typedef pthread_cond_t __gthread_cond_t;$/;"	t	file:
__gthread_cond_timedwait	test_getline.cpp	/^__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,$/;"	f	file:
__gthread_cond_timedwait_recursive	test_getline.cpp	/^__gthread_cond_timedwait_recursive (__gthread_cond_t *__cond,$/;"	f	file:
__gthread_cond_wait	test_getline.cpp	/^__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)$/;"	f	file:
__gthread_cond_wait_recursive	test_getline.cpp	/^__gthread_cond_wait_recursive (__gthread_cond_t *__cond,$/;"	f	file:
__gthread_create	test_getline.cpp	/^__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),$/;"	f	file:
__gthread_detach	test_getline.cpp	/^__gthread_detach (__gthread_t __threadid)$/;"	f	file:
__gthread_equal	test_getline.cpp	/^__gthread_equal (__gthread_t __t1, __gthread_t __t2)$/;"	f	file:
__gthread_getspecific	test_getline.cpp	/^__gthread_getspecific (__gthread_key_t __key)$/;"	f	file:
__gthread_join	test_getline.cpp	/^__gthread_join (__gthread_t __threadid, void **__value_ptr)$/;"	f	file:
__gthread_key_create	test_getline.cpp	/^__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))$/;"	f	file:
__gthread_key_delete	test_getline.cpp	/^__gthread_key_delete (__gthread_key_t __key)$/;"	f	file:
__gthread_key_t	test_getline.cpp	/^typedef pthread_key_t __gthread_key_t;$/;"	t	file:
__gthread_mutex_destroy	test_getline.cpp	/^__gthread_mutex_destroy (__gthread_mutex_t *__mutex)$/;"	f	file:
__gthread_mutex_lock	test_getline.cpp	/^__gthread_mutex_lock (__gthread_mutex_t *__mutex)$/;"	f	file:
__gthread_mutex_t	test_getline.cpp	/^typedef pthread_mutex_t __gthread_mutex_t;$/;"	t	file:
__gthread_mutex_timedlock	test_getline.cpp	/^__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,$/;"	f	file:
__gthread_mutex_trylock	test_getline.cpp	/^__gthread_mutex_trylock (__gthread_mutex_t *__mutex)$/;"	f	file:
__gthread_mutex_unlock	test_getline.cpp	/^__gthread_mutex_unlock (__gthread_mutex_t *__mutex)$/;"	f	file:
__gthread_once	test_getline.cpp	/^__gthread_once (__gthread_once_t *__once, void (*__func) (void))$/;"	f	file:
__gthread_once_t	test_getline.cpp	/^typedef pthread_once_t __gthread_once_t;$/;"	t	file:
__gthread_recursive_mutex_lock	test_getline.cpp	/^__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)$/;"	f	file:
__gthread_recursive_mutex_t	test_getline.cpp	/^typedef pthread_mutex_t __gthread_recursive_mutex_t;$/;"	t	file:
__gthread_recursive_mutex_timedlock	test_getline.cpp	/^__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,$/;"	f	file:
__gthread_recursive_mutex_trylock	test_getline.cpp	/^__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)$/;"	f	file:
__gthread_recursive_mutex_unlock	test_getline.cpp	/^__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)$/;"	f	file:
__gthread_self	test_getline.cpp	/^__gthread_self (void)$/;"	f	file:
__gthread_setspecific	test_getline.cpp	/^__gthread_setspecific (__gthread_key_t __key, const void *__ptr)$/;"	f	file:
__gthread_t	test_getline.cpp	/^typedef pthread_t __gthread_t;$/;"	t	file:
__gthread_time_t	test_getline.cpp	/^typedef struct timespec __gthread_time_t;$/;"	t	typeref:struct:timespec	file:
__gthread_yield	test_getline.cpp	/^__gthread_yield (void)$/;"	f	file:
__id_t	test_getline.cpp	/^typedef unsigned int __id_t;$/;"	t	file:
__if_type	test_getline.cpp	/^                typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__if_type	test_getline.cpp	/^                typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__ino64_t	test_getline.cpp	/^typedef unsigned long int __ino64_t;$/;"	t	file:
__ino_t	test_getline.cpp	/^typedef unsigned long int __ino_t;$/;"	t	file:
__int16_t	test_getline.cpp	/^typedef signed short int __int16_t;$/;"	t	file:
__int32_t	test_getline.cpp	/^typedef signed int __int32_t;$/;"	t	file:
__int64_t	test_getline.cpp	/^typedef signed long int __int64_t;$/;"	t	file:
__int8_t	test_getline.cpp	/^typedef signed char __int8_t;$/;"	t	file:
__int_to_char	test_getline.cpp	/^        __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,$/;"	f	namespace:std
__int_type	test_getline.cpp	/^                typedef typename _Traits::int_type __int_type;$/;"	t	class:std::basic_istream::sentry	file:
__intptr_t	test_getline.cpp	/^typedef long int __intptr_t;$/;"	t	file:
__ioinit	test_getline.cpp	/^    static ios_base::Init __ioinit;$/;"	m	namespace:std	file:
__ios_type	test_getline.cpp	/^            typedef basic_ios<_CharT, _Traits> __ios_type;$/;"	t	class:std::basic_istream	file:
__ios_type	test_getline.cpp	/^            typedef basic_ios<_CharT, _Traits> __ios_type;$/;"	t	class:std::basic_ostream	file:
__is_arithmetic	test_getline.cpp	/^        struct __is_arithmetic$/;"	s	namespace:std	file:
__is_byte	test_getline.cpp	/^        struct __is_byte$/;"	s	namespace:std	file:
__is_byte	test_getline.cpp	/^        struct __is_byte<char>$/;"	s	namespace:std	file:
__is_byte	test_getline.cpp	/^        struct __is_byte<signed char>$/;"	s	namespace:std	file:
__is_byte	test_getline.cpp	/^        struct __is_byte<unsigned char>$/;"	s	namespace:std	file:
__is_char	test_getline.cpp	/^        struct __is_char$/;"	s	namespace:std	file:
__is_char	test_getline.cpp	/^        struct __is_char<char>$/;"	s	namespace:std	file:
__is_char	test_getline.cpp	/^        struct __is_char<wchar_t>$/;"	s	namespace:std	file:
__is_floating	test_getline.cpp	/^        struct __is_floating$/;"	s	namespace:std	file:
__is_floating	test_getline.cpp	/^        struct __is_floating<double>$/;"	s	namespace:std	file:
__is_floating	test_getline.cpp	/^        struct __is_floating<float>$/;"	s	namespace:std	file:
__is_floating	test_getline.cpp	/^        struct __is_floating<long double>$/;"	s	namespace:std	file:
__is_fundamental	test_getline.cpp	/^        struct __is_fundamental$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<bool>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<char>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<int>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<long long>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<long>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<short>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<signed char>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<unsigned char>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<unsigned int>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<unsigned long long>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<unsigned long>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<unsigned short>$/;"	s	namespace:std	file:
__is_integer	test_getline.cpp	/^        struct __is_integer<wchar_t>$/;"	s	namespace:std	file:
__is_move_iterator	test_getline.cpp	/^        struct __is_move_iterator$/;"	s	namespace:std	file:
__is_normal_iterator	test_getline.cpp	/^        struct __is_normal_iterator$/;"	s	namespace:std	file:
__is_normal_iterator	test_getline.cpp	/^        struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,$/;"	s	namespace:std	file:
__is_null_pointer	test_getline.cpp	/^        __is_null_pointer(_Type)$/;"	f	namespace:__gnu_cxx
__is_null_pointer	test_getline.cpp	/^        __is_null_pointer(_Type* __ptr)$/;"	f	namespace:__gnu_cxx
__is_pointer	test_getline.cpp	/^        struct __is_pointer$/;"	s	namespace:std	file:
__is_pointer	test_getline.cpp	/^        struct __is_pointer<_Tp*>$/;"	s	namespace:std	file:
__is_scalar	test_getline.cpp	/^        struct __is_scalar$/;"	s	namespace:std	file:
__is_signed	test_getline.cpp	/^            static const bool __is_signed = ((_Value)(-1) < 0);$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	file:
__is_signed	test_getline.cpp	/^            static const bool __is_signed = true;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	file:
__is_signed	test_getline.cpp	/^        const bool __numeric_traits_floating<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_floating	file:
__is_signed	test_getline.cpp	/^        const bool __numeric_traits_integer<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_integer	file:
__is_void	test_getline.cpp	/^        struct __is_void$/;"	s	namespace:std	file:
__is_void	test_getline.cpp	/^        struct __is_void<void>$/;"	s	namespace:std	file:
__istream_type	test_getline.cpp	/^                typedef basic_istream<_CharT, _Traits> __istream_type;$/;"	t	class:std::basic_istream::sentry	file:
__istream_type	test_getline.cpp	/^            typedef basic_istream<_CharT, _Traits> __istream_type;$/;"	t	class:std::basic_iostream	file:
__istream_type	test_getline.cpp	/^            typedef basic_istream<_CharT, _Traits> __istream_type;$/;"	t	class:std::basic_istream	file:
__iter_swap	test_getline.cpp	/^        struct __iter_swap$/;"	s	namespace:std	file:
__iter_swap	test_getline.cpp	/^        struct __iter_swap<true>$/;"	s	namespace:std	file:
__iterator_category	test_getline.cpp	/^        __iterator_category(const _Iter&)$/;"	f	namespace:std
__jmp_buf	test_getline.cpp	/^typedef long int __jmp_buf[8];$/;"	t	file:
__key_t	test_getline.cpp	/^typedef int __key_t;$/;"	t	file:
__kind	test_getline.cpp	/^        int __kind;$/;"	m	struct:__anon76::__pthread_mutex_s	file:
__lc	test_getline.cpp	/^                __lc(const _Tp* __first1, const _Tp* __last1,$/;"	f	struct:std::__lexicographical_compare
__lc	test_getline.cpp	/^        __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	class:std::__lexicographical_compare
__lc_rai	test_getline.cpp	/^        struct __lc_rai$/;"	s	namespace:std	file:
__lc_rai	test_getline.cpp	/^        struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>$/;"	s	namespace:std	file:
__lexicographical_compare	test_getline.cpp	/^        struct __lexicographical_compare$/;"	s	namespace:std	file:
__lexicographical_compare	test_getline.cpp	/^        struct __lexicographical_compare<true>$/;"	s	namespace:std	file:
__lexicographical_compare_aux	test_getline.cpp	/^        __lexicographical_compare_aux(_II1 __first1, _II1 __last1,$/;"	f	namespace:std
__list	test_getline.cpp	/^        __pthread_list_t __list;$/;"	m	struct:__anon76::__pthread_mutex_s	file:
__locale_struct	test_getline.cpp	/^    typedef struct __locale_struct$/;"	s	file:
__locale_t	test_getline.cpp	/^    } *__locale_t;$/;"	t	typeref:struct:__locale_struct	file:
__locales	test_getline.cpp	/^        struct __locale_data *__locales[13];$/;"	m	struct:__locale_struct	typeref:struct:__locale_struct::__locale_data	file:
__lock	test_getline.cpp	/^        int __lock;$/;"	m	struct:__anon76::__pthread_mutex_s	file:
__lock	test_getline.cpp	/^        int __lock;$/;"	m	struct:__anon78::__anon79	file:
__lock	test_getline.cpp	/^        int __lock;$/;"	m	struct:__anon81::__anon82	file:
__loff_t	test_getline.cpp	/^typedef __off64_t __loff_t;$/;"	t	file:
__mask_was_saved	test_getline.cpp	/^            int __mask_was_saved;$/;"	m	struct:__anon96::__anon97	file:
__max	test_getline.cpp	/^            static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	file:
__max	test_getline.cpp	/^        const _Value __numeric_traits_integer<_Value>::__max;$/;"	m	class:__gnu_cxx::__numeric_traits_integer	file:
__max_digits10	test_getline.cpp	/^            static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 3010 \/ 10000);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	file:
__max_digits10	test_getline.cpp	/^        const int __numeric_traits_floating<_Value>::__max_digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating	file:
__max_exponent10	test_getline.cpp	/^            static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	file:
__max_exponent10	test_getline.cpp	/^        const int __numeric_traits_floating<_Value>::__max_exponent10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating	file:
__mbstate_t	test_getline.cpp	/^} __mbstate_t;$/;"	t	typeref:struct:__anon34	file:
__min	test_getline.cpp	/^            static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	file:
__min	test_getline.cpp	/^        const _Value __numeric_traits_integer<_Value>::__min;$/;"	m	class:__gnu_cxx::__numeric_traits_integer	file:
__miter_base	test_getline.cpp	/^            struct __miter_base$/;"	s	namespace:std	file:
__miter_base	test_getline.cpp	/^        struct __miter_base<_Iterator, true>$/;"	s	namespace:std	file:
__mode_t	test_getline.cpp	/^typedef unsigned int __mode_t;$/;"	t	file:
__mutex	test_getline.cpp	/^        void *__mutex;$/;"	m	struct:__anon78::__anon79	file:
__names	test_getline.cpp	/^        const char *__names[13];$/;"	m	struct:__locale_struct	file:
__newlast1	test_getline.cpp	/^                __newlast1(_II1, _II1 __last1, _II2, _II2)$/;"	f	struct:std::__lc_rai
__newlast1	test_getline.cpp	/^                __newlast1(_RAI1 __first1, _RAI1 __last1,$/;"	f	struct:std::__lc_rai
__next	test_getline.cpp	/^    struct __pthread_internal_list *__next;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list::__pthread_internal_list	file:
__niter_base	test_getline.cpp	/^            struct __niter_base$/;"	s	namespace:std	file:
__niter_base	test_getline.cpp	/^        struct __niter_base<_Iterator, true>$/;"	s	namespace:std	file:
__nlink_t	test_getline.cpp	/^typedef unsigned long int __nlink_t;$/;"	t	file:
__normal_iterator	test_getline.cpp	/^                    __normal_iterator(const _Iterator& __i) : _M_current(__i) { }$/;"	f	class:__gnu_cxx::__normal_iterator
__normal_iterator	test_getline.cpp	/^                    __normal_iterator(const __normal_iterator<_Iter,$/;"	f	class:__gnu_cxx::__normal_iterator
__normal_iterator	test_getline.cpp	/^                __normal_iterator() : _M_current(_Iterator()) { }$/;"	f	class:__gnu_cxx::__normal_iterator
__normal_iterator	test_getline.cpp	/^        class __normal_iterator$/;"	c	namespace:__gnu_cxx	file:
__nr_readers	test_getline.cpp	/^        unsigned int __nr_readers;$/;"	m	struct:__anon81::__anon82	file:
__nr_readers_queued	test_getline.cpp	/^        unsigned int __nr_readers_queued;$/;"	m	struct:__anon81::__anon82	file:
__nr_writers_queued	test_getline.cpp	/^        unsigned int __nr_writers_queued;$/;"	m	struct:__anon81::__anon82	file:
__num_base	test_getline.cpp	/^    class __num_base$/;"	c	namespace:std	file:
__num_get_type	test_getline.cpp	/^                __num_get_type;$/;"	t	class:std::basic_ios	file:
__num_get_type	test_getline.cpp	/^                __num_get_type;$/;"	t	class:std::basic_istream	file:
__num_put_type	test_getline.cpp	/^                __num_put_type;$/;"	t	class:std::basic_ios	file:
__num_put_type	test_getline.cpp	/^                __num_put_type;$/;"	t	class:std::basic_ostream	file:
__numeric_traits	test_getline.cpp	/^        struct __numeric_traits$/;"	s	namespace:__gnu_cxx	file:
__numeric_traits_floating	test_getline.cpp	/^        struct __numeric_traits_floating$/;"	s	namespace:__gnu_cxx	file:
__numeric_traits_integer	test_getline.cpp	/^        struct __numeric_traits_integer$/;"	s	namespace:__gnu_cxx	file:
__numpunct_cache	test_getline.cpp	/^        __numpunct_cache(size_t __refs = 0) : facet(__refs),$/;"	f	struct:std::__numpunct_cache
__numpunct_cache	test_getline.cpp	/^        struct __numpunct_cache : public locale::facet$/;"	s	namespace:std	file:
__nusers	test_getline.cpp	/^        unsigned int __nusers;$/;"	m	struct:__anon76::__pthread_mutex_s	file:
__nwaiters	test_getline.cpp	/^        unsigned int __nwaiters;$/;"	m	struct:__anon78::__anon79	file:
__off64_t	test_getline.cpp	/^typedef long int __off64_t;$/;"	t	file:
__off_t	test_getline.cpp	/^typedef long int __off_t;$/;"	t	file:
__ostream_fill	test_getline.cpp	/^        __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)$/;"	f	namespace:std
__ostream_insert	test_getline.cpp	/^        __ostream_insert(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std
__ostream_type	test_getline.cpp	/^            typedef basic_ostream<_CharT, _Traits> __ostream_type;$/;"	t	class:std::basic_iostream	file:
__ostream_type	test_getline.cpp	/^            typedef basic_ostream<_CharT, _Traits> __ostream_type;$/;"	t	class:std::basic_ostream	file:
__ostream_write	test_getline.cpp	/^        __ostream_write(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std
__owner	test_getline.cpp	/^        int __owner;$/;"	m	struct:__anon76::__pthread_mutex_s	file:
__pad	test_getline.cpp	/^        struct __pad$/;"	s	namespace:std	file:
__pad	test_getline.cpp	/^        void *__pad[4];$/;"	m	struct:__anon96	file:
__pad1	test_getline.cpp	/^        unsigned long int __pad1;$/;"	m	struct:__anon81::__anon82	file:
__pad2	test_getline.cpp	/^        unsigned long int __pad2;$/;"	m	struct:__anon81::__anon82	file:
__pf	test_getline.cpp	/^                operator<<(__ios_type& (*__pf)(__ios_type&))$/;"	f	class:std::basic_ostream
__pf	test_getline.cpp	/^                operator<<(__ostream_type& (*__pf)(__ostream_type&))$/;"	f	class:std::basic_ostream
__pf	test_getline.cpp	/^                operator<<(ios_base& (*__pf) (ios_base&))$/;"	f	class:std::basic_ostream
__pf	test_getline.cpp	/^                operator>>(__ios_type& (*__pf)(__ios_type&))$/;"	f	class:std::basic_istream
__pf	test_getline.cpp	/^                operator>>(__istream_type& (*__pf)(__istream_type&))$/;"	f	class:std::basic_istream
__pf	test_getline.cpp	/^                operator>>(ios_base& (*__pf)(ios_base&))$/;"	f	class:std::basic_istream
__pid_t	test_getline.cpp	/^typedef int __pid_t;$/;"	t	file:
__prev	test_getline.cpp	/^    struct __pthread_internal_list *__prev;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list::__pthread_internal_list	file:
__prev	test_getline.cpp	/^    struct _pthread_cleanup_buffer *__prev;$/;"	m	struct:_pthread_cleanup_buffer	typeref:struct:_pthread_cleanup_buffer::_pthread_cleanup_buffer	file:
__promote	test_getline.cpp	/^        struct __promote$/;"	s	namespace:__gnu_cxx	file:
__promote	test_getline.cpp	/^        struct __promote<_Tp, false>$/;"	s	namespace:__gnu_cxx	file:
__promote_2	test_getline.cpp	/^        struct __promote_2$/;"	s	namespace:__gnu_cxx	file:
__promote_3	test_getline.cpp	/^        struct __promote_3$/;"	s	namespace:__gnu_cxx	file:
__promote_4	test_getline.cpp	/^        struct __promote_4$/;"	s	namespace:__gnu_cxx	file:
__pthread_cleanup_class	test_getline.cpp	/^        __pthread_cleanup_class (void (*__fct) (void *), void *__arg)$/;"	f	class:__pthread_cleanup_class
__pthread_cleanup_class	test_getline.cpp	/^    class __pthread_cleanup_class$/;"	c	file:
__pthread_cleanup_frame	test_getline.cpp	/^    struct __pthread_cleanup_frame$/;"	s	file:
__pthread_internal_list	test_getline.cpp	/^typedef struct __pthread_internal_list$/;"	s	file:
__pthread_list_t	test_getline.cpp	/^} __pthread_list_t;$/;"	t	typeref:struct:__pthread_internal_list	file:
__pthread_mutex_s	test_getline.cpp	/^    struct __pthread_mutex_s$/;"	s	union:__anon76	file:
__pthread_unwind_buf_t	test_getline.cpp	/^    } __pthread_unwind_buf_t __attribute__ ((__aligned__));$/;"	t	typeref:struct:__anon96	file:
__qaddr_t	test_getline.cpp	/^typedef __quad_t *__qaddr_t;$/;"	t	file:
__quad_t	test_getline.cpp	/^typedef long int __quad_t;$/;"	t	file:
__readers_wakeup	test_getline.cpp	/^        unsigned int __readers_wakeup;$/;"	m	struct:__anon81::__anon82	file:
__remove_unsigned	test_getline.cpp	/^        struct __remove_unsigned$/;"	s	namespace:__gnu_cxx	file:
__remove_unsigned	test_getline.cpp	/^        struct __remove_unsigned<char>$/;"	s	namespace:__gnu_cxx	file:
__remove_unsigned	test_getline.cpp	/^        struct __remove_unsigned<unsigned char>$/;"	s	namespace:__gnu_cxx	file:
__remove_unsigned	test_getline.cpp	/^        struct __remove_unsigned<unsigned int>$/;"	s	namespace:__gnu_cxx	file:
__remove_unsigned	test_getline.cpp	/^        struct __remove_unsigned<unsigned long long>$/;"	s	namespace:__gnu_cxx	file:
__remove_unsigned	test_getline.cpp	/^        struct __remove_unsigned<unsigned long>$/;"	s	namespace:__gnu_cxx	file:
__remove_unsigned	test_getline.cpp	/^        struct __remove_unsigned<unsigned short>$/;"	s	namespace:__gnu_cxx	file:
__restore	test_getline.cpp	/^        void __restore () const { pthread_setcanceltype (__cancel_type, 0); }$/;"	f	class:__pthread_cleanup_class
__rlim64_t	test_getline.cpp	/^typedef unsigned long int __rlim64_t;$/;"	t	file:
__rlim_t	test_getline.cpp	/^typedef unsigned long int __rlim_t;$/;"	t	file:
__routine	test_getline.cpp	/^    void (*__routine) (void *);$/;"	m	struct:_pthread_cleanup_buffer	file:
__sched_param	test_getline.cpp	/^struct __sched_param$/;"	s	file:
__sched_priority	test_getline.cpp	/^    int __sched_priority;$/;"	m	struct:__sched_param	file:
__sched_priority	test_getline.cpp	/^    int __sched_priority;$/;"	m	struct:sched_param	file:
__setdoit	test_getline.cpp	/^        void __setdoit (int __newval) { __do_it = __newval; }$/;"	f	class:__pthread_cleanup_class
__shared	test_getline.cpp	/^        int __shared;$/;"	m	struct:__anon81::__anon82	file:
__size	test_getline.cpp	/^    char __size[32];$/;"	m	union:__anon84	file:
__size	test_getline.cpp	/^    char __size[40];$/;"	m	union:__anon76	file:
__size	test_getline.cpp	/^    char __size[48];$/;"	m	union:__anon78	file:
__size	test_getline.cpp	/^    char __size[4];$/;"	m	union:__anon77	file:
__size	test_getline.cpp	/^    char __size[4];$/;"	m	union:__anon80	file:
__size	test_getline.cpp	/^    char __size[4];$/;"	m	union:__anon85	file:
__size	test_getline.cpp	/^    char __size[56];$/;"	m	union:__anon75	file:
__size	test_getline.cpp	/^    char __size[56];$/;"	m	union:__anon81	file:
__size	test_getline.cpp	/^    char __size[8];$/;"	m	union:__anon83	file:
__socklen_t	test_getline.cpp	/^typedef unsigned int __socklen_t;$/;"	t	file:
__spins	test_getline.cpp	/^        int __spins;$/;"	m	struct:__anon76::__pthread_mutex_s	file:
__ssize_t	test_getline.cpp	/^typedef long int __ssize_t;$/;"	t	file:
__streambuf_type	test_getline.cpp	/^                typedef basic_streambuf<_CharT, _Traits> __streambuf_type;$/;"	t	class:std::basic_istream::sentry	file:
__streambuf_type	test_getline.cpp	/^                typedef basic_streambuf<char_type, traits_type> __streambuf_type;$/;"	t	class:std::basic_streambuf	file:
__streambuf_type	test_getline.cpp	/^            typedef basic_streambuf<_CharT, _Traits> __streambuf_type;$/;"	t	class:std::basic_istream	file:
__streambuf_type	test_getline.cpp	/^            typedef basic_streambuf<_CharT, _Traits> __streambuf_type;$/;"	t	class:std::basic_ostream	file:
__suseconds_t	test_getline.cpp	/^typedef long int __suseconds_t;$/;"	t	file:
__swblk_t	test_getline.cpp	/^typedef long int __swblk_t;$/;"	t	file:
__time_t	test_getline.cpp	/^typedef long int __time_t;$/;"	t	file:
__timer_t	test_getline.cpp	/^typedef void * __timer_t;$/;"	t	file:
__to_type	test_getline.cpp	/^        typedef const int* __to_type;$/;"	t	struct:std::ctype_base	file:
__total_seq	test_getline.cpp	/^        __extension__ unsigned long long int __total_seq;$/;"	m	struct:__anon78::__anon79	file:
__traitor	test_getline.cpp	/^        struct __traitor$/;"	s	namespace:std	file:
__true_type	test_getline.cpp	/^    struct __true_type { };$/;"	s	namespace:std	file:
__truth_type	test_getline.cpp	/^        struct __truth_type$/;"	s	namespace:std	file:
__truth_type	test_getline.cpp	/^        struct __truth_type<true>$/;"	s	namespace:std	file:
__type	test_getline.cpp	/^                typedef __typeof__(__type1() + __type2() + __type3() + __type4()) __type;$/;"	t	struct:__gnu_cxx::__promote_4	file:
__type	test_getline.cpp	/^                typedef __typeof__(__type1() + __type2() + __type3()) __type;$/;"	t	struct:__gnu_cxx::__promote_3	file:
__type	test_getline.cpp	/^                typedef __typeof__(__type1() + __type2()) __type;$/;"	t	struct:__gnu_cxx::__promote_2	file:
__type	test_getline.cpp	/^                typedef typename __if_type::__type __type;$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__type	test_getline.cpp	/^                typedef typename __if_type::__type __type;$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__type	test_getline.cpp	/^            typedef __false_type __type;$/;"	t	struct:std::__are_same	file:
__type	test_getline.cpp	/^            typedef __false_type __type;$/;"	t	struct:std::__is_byte	file:
__type	test_getline.cpp	/^            typedef __false_type __type;$/;"	t	struct:std::__is_char	file:
__type	test_getline.cpp	/^            typedef __false_type __type;$/;"	t	struct:std::__is_floating	file:
__type	test_getline.cpp	/^            typedef __false_type __type;$/;"	t	struct:std::__is_integer	file:
__type	test_getline.cpp	/^            typedef __false_type __type;$/;"	t	struct:std::__is_move_iterator	file:
__type	test_getline.cpp	/^            typedef __false_type __type;$/;"	t	struct:std::__is_normal_iterator	file:
__type	test_getline.cpp	/^            typedef __false_type __type;$/;"	t	struct:std::__is_pointer	file:
__type	test_getline.cpp	/^            typedef __false_type __type;$/;"	t	struct:std::__is_void	file:
__type	test_getline.cpp	/^            typedef __true_type __type;$/;"	t	struct:std::__are_same	file:
__type	test_getline.cpp	/^            typedef __true_type __type;$/;"	t	struct:std::__is_byte	file:
__type	test_getline.cpp	/^            typedef __true_type __type;$/;"	t	struct:std::__is_char	file:
__type	test_getline.cpp	/^            typedef __true_type __type;$/;"	t	struct:std::__is_floating	file:
__type	test_getline.cpp	/^            typedef __true_type __type;$/;"	t	struct:std::__is_integer	file:
__type	test_getline.cpp	/^            typedef __true_type __type;$/;"	t	struct:std::__is_normal_iterator	file:
__type	test_getline.cpp	/^            typedef __true_type __type;$/;"	t	struct:std::__is_pointer	file:
__type	test_getline.cpp	/^            typedef __true_type __type;$/;"	t	struct:std::__is_void	file:
__type	test_getline.cpp	/^            typedef typename __truth_type<__value>::__type __type;$/;"	t	struct:std::__traitor	file:
__type	test_getline.cpp	/^        { typedef _Iffalse __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	file:
__type	test_getline.cpp	/^        { typedef _Iftrue __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	file:
__type	test_getline.cpp	/^        { typedef _Tp __type; };$/;"	t	struct:__gnu_cxx::__enable_if	file:
__type	test_getline.cpp	/^        { typedef _Tp __type; };$/;"	t	struct:__gnu_cxx::__promote	file:
__type	test_getline.cpp	/^        { typedef __false_type __type; };$/;"	t	struct:std::__truth_type	file:
__type	test_getline.cpp	/^        { typedef __true_type __type; };$/;"	t	struct:std::__truth_type	file:
__type	test_getline.cpp	/^        { typedef double __type; };$/;"	t	struct:__gnu_cxx::__promote	file:
__type	test_getline.cpp	/^        { typedef int __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__type	test_getline.cpp	/^        { typedef long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__type	test_getline.cpp	/^        { typedef long long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__type	test_getline.cpp	/^        { typedef short __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__type	test_getline.cpp	/^        { typedef signed char __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	file:
__type	test_getline.cpp	/^        { typedef unsigned char __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__type	test_getline.cpp	/^        { typedef unsigned int __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__type	test_getline.cpp	/^        { typedef unsigned long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__type	test_getline.cpp	/^        { typedef unsigned long long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__type	test_getline.cpp	/^        { typedef unsigned short __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	file:
__type1	test_getline.cpp	/^                typedef typename __promote<_Tp>::__type __type1;$/;"	t	struct:__gnu_cxx::__promote_2	file:
__type1	test_getline.cpp	/^                typedef typename __promote<_Tp>::__type __type1;$/;"	t	struct:__gnu_cxx::__promote_3	file:
__type1	test_getline.cpp	/^                typedef typename __promote<_Tp>::__type __type1;$/;"	t	struct:__gnu_cxx::__promote_4	file:
__type2	test_getline.cpp	/^                typedef typename __promote<_Up>::__type __type2;$/;"	t	struct:__gnu_cxx::__promote_2	file:
__type2	test_getline.cpp	/^                typedef typename __promote<_Up>::__type __type2;$/;"	t	struct:__gnu_cxx::__promote_3	file:
__type2	test_getline.cpp	/^                typedef typename __promote<_Up>::__type __type2;$/;"	t	struct:__gnu_cxx::__promote_4	file:
__type3	test_getline.cpp	/^                typedef typename __promote<_Vp>::__type __type3;$/;"	t	struct:__gnu_cxx::__promote_3	file:
__type3	test_getline.cpp	/^                typedef typename __promote<_Vp>::__type __type3;$/;"	t	struct:__gnu_cxx::__promote_4	file:
__type4	test_getline.cpp	/^                typedef typename __promote<_Wp>::__type __type4;$/;"	t	struct:__gnu_cxx::__promote_4	file:
__u_char	test_getline.cpp	/^typedef unsigned char __u_char;$/;"	t	file:
__u_int	test_getline.cpp	/^typedef unsigned int __u_int;$/;"	t	file:
__u_long	test_getline.cpp	/^typedef unsigned long int __u_long;$/;"	t	file:
__u_quad_t	test_getline.cpp	/^typedef unsigned long int __u_quad_t;$/;"	t	file:
__u_short	test_getline.cpp	/^typedef unsigned short int __u_short;$/;"	t	file:
__uid_t	test_getline.cpp	/^typedef unsigned int __uid_t;$/;"	t	file:
__uint16_t	test_getline.cpp	/^typedef unsigned short int __uint16_t;$/;"	t	file:
__uint32_t	test_getline.cpp	/^typedef unsigned int __uint32_t;$/;"	t	file:
__uint64_t	test_getline.cpp	/^typedef unsigned long int __uint64_t;$/;"	t	file:
__uint8_t	test_getline.cpp	/^typedef unsigned char __uint8_t;$/;"	t	file:
__use_cache	test_getline.cpp	/^        struct __use_cache$/;"	s	namespace:std	file:
__use_cache	test_getline.cpp	/^        struct __use_cache<__numpunct_cache<_CharT> >$/;"	s	namespace:std	file:
__useconds_t	test_getline.cpp	/^typedef unsigned int __useconds_t;$/;"	t	file:
__uselocale	test_getline.cpp	/^    extern "C" __typeof(uselocale) __uselocale;$/;"	m	namespace:__gnu_cxx	file:
__val	test_getline.cpp	/^typedef struct { int __val[2]; } __fsid_t;$/;"	m	struct:__anon72	file:
__value	test_getline.cpp	/^            enum { __value = 0 };$/;"	e	enum:std::__are_same::__anon37	file:
__value	test_getline.cpp	/^            enum { __value = 0 };$/;"	e	enum:std::__is_byte::__anon66	file:
__value	test_getline.cpp	/^            enum { __value = 0 };$/;"	e	enum:std::__is_char::__anon63	file:
__value	test_getline.cpp	/^            enum { __value = 0 };$/;"	e	enum:std::__is_floating::__anon55	file:
__value	test_getline.cpp	/^            enum { __value = 0 };$/;"	e	enum:std::__is_integer::__anon41	file:
__value	test_getline.cpp	/^            enum { __value = 0 };$/;"	e	enum:std::__is_move_iterator::__anon70	file:
__value	test_getline.cpp	/^            enum { __value = 0 };$/;"	e	enum:std::__is_normal_iterator::__anon61	file:
__value	test_getline.cpp	/^            enum { __value = 0 };$/;"	e	enum:std::__is_pointer::__anon59	file:
__value	test_getline.cpp	/^            enum { __value = 0 };$/;"	e	enum:std::__is_void::__anon39	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__are_same::__anon38	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon67	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon68	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon69	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_char::__anon64	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_char::__anon65	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon56	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon57	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon58	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon42	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon43	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon44	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon45	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon46	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon47	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon48	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon49	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon50	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon51	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon52	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon53	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon54	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_normal_iterator::__anon62	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_pointer::__anon60	file:
__value	test_getline.cpp	/^            enum { __value = 1 };$/;"	e	enum:std::__is_void::__anon40	file:
__value	test_getline.cpp	/^            enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };$/;"	e	enum:std::__traitor::__anon36	file:
__value	test_getline.cpp	/^    } __value;$/;"	m	struct:__anon34	typeref:union:__anon34::__anon35	file:
__wakeup_seq	test_getline.cpp	/^        __extension__ unsigned long long int __wakeup_seq;$/;"	m	struct:__anon78::__anon79	file:
__wch	test_getline.cpp	/^        unsigned int __wch;$/;"	m	union:__anon34::__anon35	file:
__wchb	test_getline.cpp	/^        char __wchb[4];$/;"	m	union:__anon34::__anon35	file:
__wmask_type	test_getline.cpp	/^                typedef wctype_t __wmask_type;$/;"	t	class:std::ctype	file:
__woken_seq	test_getline.cpp	/^        __extension__ unsigned long long int __woken_seq;$/;"	m	struct:__anon78::__anon79	file:
__write	test_getline.cpp	/^        __write(_OutIter __s, const _CharT* __ws, int __len)$/;"	f	namespace:std
__write	test_getline.cpp	/^        __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)$/;"	f	namespace:std
__writer	test_getline.cpp	/^        int __writer;$/;"	m	struct:__anon81::__anon82	file:
__writer_wakeup	test_getline.cpp	/^        unsigned int __writer_wakeup;$/;"	m	struct:__anon81::__anon82	file:
_pthread_cleanup_buffer	test_getline.cpp	/^struct _pthread_cleanup_buffer$/;"	s	file:
a	study/CppDesign/C03/aaa.cpp	/^const int a = 10;$/;"	v
a	study/CppDesign/C03/pass_address.c	/^const int a = 10;$/;"	v
access_ctr	study/CppPrimer/chap07/class2/Screen.h	/^		mutable size_t access_ctr; \/\/ 即使在一个const对象也能改变,可变的成员变量$/;"	m	class:Screen
add	study/CppDesign/C06/CLib.cpp	/^int add(CStash* s, const void* elements) {$/;"	f
add	study/CppPrimer/chap07/class1/Sales_data.cpp	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
add	study/dada/overload/friend.cpp	/^A add (const A a1, const A a2) {$/;"	f
added_files	github/leveldb-1.18/db/version_set.cc	/^    FileSet* added_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
address	test_getline.cpp	/^                    address(const_reference __x) const { return &__x; }$/;"	f	class:__gnu_cxx::new_allocator
address	test_getline.cpp	/^                    address(reference __x) const { return &__x; }$/;"	f	class:__gnu_cxx::new_allocator
adjustfield	test_getline.cpp	/^            static const fmtflags adjustfield = _S_adjustfield;$/;"	m	class:std::ios_base	file:
advance	test_getline.cpp	/^        advance(_InputIterator& __i, _Distance __n)$/;"	f	namespace:std
age	study/dada/animal/animal.h	/^		int 	age;$/;"	m	class:Animal
age	study/dada/person/person.h	/^		int  age;$/;"	m	class:Person
age	study/dada/person_job/person.h	/^		int  age;$/;"	m	class:Human
all	test_getline.cpp	/^            static const category all = (ctype | numeric | collate |$/;"	m	class:std::locale	file:
alloc_bytes_remaining_	github/leveldb-1.18/util/arena.h	/^  size_t alloc_bytes_remaining_;$/;"	m	class:leveldb::Arena
alloc_ptr_	github/leveldb-1.18/util/arena.h	/^  char* alloc_ptr_;$/;"	m	class:leveldb::Arena
allocate	test_getline.cpp	/^                    allocate(size_type __n, const void* = 0)$/;"	f	class:__gnu_cxx::new_allocator
allocator	test_getline.cpp	/^                allocator(const allocator<_Tp1>&) throw() { }$/;"	f	class:std::allocator
allocator	test_getline.cpp	/^            allocator() throw() { }$/;"	f	class:std::allocator
allocator	test_getline.cpp	/^            allocator(const allocator& __a) throw()$/;"	f	class:std::allocator
allocator	test_getline.cpp	/^        class allocator: public __gnu_cxx::new_allocator<_Tp>$/;"	c	namespace:std	file:
allocator	test_getline.cpp	/^        class allocator<void>$/;"	c	namespace:std	file:
allocator_type	test_getline.cpp	/^            typedef _Alloc allocator_type;$/;"	t	class:std::basic_string	file:
allowed_	github/leveldb-1.18/util/env_posix.cc	/^  port::AtomicPointer allowed_;$/;"	m	class:leveldb::__anon32::MmapLimiter	file:
allowed_seeks	github/leveldb-1.18/db/version_edit.h	/^  int allowed_seeks;          \/\/ Seeks allowed until compaction$/;"	m	struct:leveldb::FileMetaData
alnum	test_getline.cpp	/^        static const mask alnum = _ISalpha | _ISdigit;$/;"	m	struct:std::ctype_base	file:
alpha	test_getline.cpp	/^        static const mask alpha = _ISalpha;$/;"	m	struct:std::ctype_base	file:
app	test_getline.cpp	/^            static const openmode app = _S_app;$/;"	m	class:std::ios_base	file:
append	test_getline.cpp	/^                append(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string
append	test_getline.cpp	/^                append(const _CharT* __s)$/;"	f	class:std::basic_string
append	test_getline.cpp	/^        append(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string
append	test_getline.cpp	/^        append(const basic_string& __str)$/;"	f	class:std::basic_string
append	test_getline.cpp	/^        append(const basic_string& __str, size_type __pos, size_type __n)$/;"	f	class:std::basic_string
append	test_getline.cpp	/^        append(size_type __n, _CharT __c)$/;"	f	class:std::basic_string
arena_	github/leveldb-1.18/db/memtable.h	/^  Arena arena_;$/;"	m	class:leveldb::MemTable
arena_	github/leveldb-1.18/db/skiplist.h	/^  Arena* const arena_;    \/\/ Arena used for allocations of nodes$/;"	m	class:leveldb::SkipList
arena_	github/leveldb-1.18/db/skiplist_test.cc	/^  Arena arena_;$/;"	m	class:leveldb::ConcurrentTest	file:
arg	github/leveldb-1.18/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon32::PosixEnv::BGItem	file:
arg	github/leveldb-1.18/util/env_posix.cc	/^  void* arg;$/;"	m	struct:leveldb::__anon32::__anon33::StartThreadState	file:
arg1	github/leveldb-1.18/include/leveldb/iterator.h	/^    void* arg1;$/;"	m	struct:leveldb::Iterator::Cleanup
arg2	github/leveldb-1.18/include/leveldb/iterator.h	/^    void* arg2;$/;"	m	struct:leveldb::Iterator::Cleanup
arg_	github/leveldb-1.18/table/two_level_iterator.cc	/^  void* arg_;$/;"	m	class:leveldb::__anon19::TwoLevelIterator	file:
argument_type	test_getline.cpp	/^            typedef _Arg argument_type;$/;"	t	struct:std::unary_function	file:
arr	work/test_job/day12/data_packet/include/DataPacket.h	/^		int  arr[DATA_SIZE];$/;"	m	class:DataPacket
arr	work/test_job/day17/data_packet/include/DataPacket.h	/^		int  arr[DATA_SIZE];$/;"	m	class:DataPacket
arr_num	work/test_job/day10/SortTime.h	/^		int arr_num;$/;"	m	class:SortTime
arr_num	work/test_job/sort/include/SortTime.h	/^		int arr_num;$/;"	m	class:SortTime
arr_num	work/test_job/sort_job/SortTime.h	/^		int arr_num;$/;"	m	class:SortTime
array	work/test_job/day10/SortTime.h	/^		int *array;$/;"	m	class:SortTime
array	work/test_job/sort/include/SortTime.h	/^		int *array;$/;"	m	class:SortTime
array	work/test_job/sort_job/SortTime.h	/^		int *array;$/;"	m	class:SortTime
array_init	work/test_job/day10/SortTime.h	/^		int *array_init;$/;"	m	class:SortTime
array_init	work/test_job/sort/include/SortTime.h	/^		int *array_init;$/;"	m	class:SortTime
array_init	work/test_job/sort_job/SortTime.h	/^		int *array_init;$/;"	m	class:SortTime
assign	test_getline.cpp	/^                assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string
assign	test_getline.cpp	/^                assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits
assign	test_getline.cpp	/^                assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits
assign	test_getline.cpp	/^                assign(char_type* __s, size_t __n, char_type __a)$/;"	f	struct:std::char_traits
assign	test_getline.cpp	/^                assign(const _CharT* __s)$/;"	f	class:std::basic_string
assign	test_getline.cpp	/^                assign(const basic_string& __str, size_type __pos, size_type __n)$/;"	f	class:std::basic_string
assign	test_getline.cpp	/^                assign(size_type __n, _CharT __c)$/;"	f	class:std::basic_string
assign	test_getline.cpp	/^        assign(char_type* __s, std::size_t __n, char_type __a)$/;"	f	class:__gnu_cxx::char_traits
assign	test_getline.cpp	/^        assign(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string
assign	test_getline.cpp	/^        assign(const basic_string& __str)$/;"	f	class:std::basic_string
at	test_getline.cpp	/^                at(size_type __n) const$/;"	f	class:std::basic_string
at	test_getline.cpp	/^                at(size_type __n)$/;"	f	class:std::basic_string
ate	test_getline.cpp	/^            static const openmode ate = _S_ate;$/;"	m	class:std::ios_base	file:
back_insert_iterator	test_getline.cpp	/^                    back_insert_iterator(_Container& __x) : container(&__x) { }$/;"	f	class:std::back_insert_iterator
back_insert_iterator	test_getline.cpp	/^        class back_insert_iterator$/;"	c	namespace:std	file:
back_inserter	test_getline.cpp	/^        back_inserter(_Container& __x)$/;"	f	namespace:std
backing_store_	github/leveldb-1.18/db/log_reader.h	/^  char* const backing_store_;$/;"	m	class:leveldb::log::Reader
bad	test_getline.cpp	/^                bad() const$/;"	f	class:std::basic_ios
bad_alloc	test_getline.cpp	/^                bad_alloc() throw() { }$/;"	f	class:std::bad_alloc
bad_alloc	test_getline.cpp	/^        class bad_alloc : public exception$/;"	c	namespace:std	file:
bad_exception	test_getline.cpp	/^                bad_exception() throw() { }$/;"	f	class:std::bad_exception
bad_exception	test_getline.cpp	/^        class bad_exception : public exception$/;"	c	namespace:std	file:
badbit	test_getline.cpp	/^            static const iostate badbit = _S_badbit;$/;"	m	class:std::ios_base	file:
base	github/leveldb-1.18/util/testharness.cc	/^  const char* base;$/;"	m	struct:leveldb::test::__anon29::Test	file:
base	test_getline.cpp	/^                    base() const$/;"	f	class:__gnu_cxx::__normal_iterator
base	test_getline.cpp	/^                base() const$/;"	f	class:std::reverse_iterator
base_	github/leveldb-1.18/db/version_set.cc	/^  Version* base_;$/;"	m	class:leveldb::VersionSet::Builder	file:
base_lg_	github/leveldb-1.18/table/filter_block.h	/^  size_t base_lg_;      \/\/ Encoding parameter (see kFilterBaseLg in .cc file)$/;"	m	class:leveldb::FilterBlockReader
base_pay	test_base_child.cpp	/^        double base_pay;$/;"	m	class:Staff	file:
basefield	test_getline.cpp	/^            static const fmtflags basefield = _S_basefield;$/;"	m	class:std::ios_base	file:
basic_ios	test_getline.cpp	/^                basic_ios(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios
basic_ios	test_getline.cpp	/^            basic_ios()$/;"	f	class:std::basic_ios
basic_ios	test_getline.cpp	/^        class basic_ios : public ios_base$/;"	c	namespace:std	file:
basic_iostream	test_getline.cpp	/^                basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_iostream
basic_iostream	test_getline.cpp	/^            basic_iostream()$/;"	f	class:std::basic_iostream
basic_iostream	test_getline.cpp	/^        class basic_iostream$/;"	c	namespace:std	file:
basic_istream	test_getline.cpp	/^                basic_istream(__streambuf_type* __sb)$/;"	f	class:std::basic_istream
basic_istream	test_getline.cpp	/^            basic_istream()$/;"	f	class:std::basic_istream
basic_istream	test_getline.cpp	/^        class basic_istream : virtual public basic_ios<_CharT, _Traits>$/;"	c	namespace:std	file:
basic_ostream	test_getline.cpp	/^                basic_ostream(__streambuf_type* __sb)$/;"	f	class:std::basic_ostream
basic_ostream	test_getline.cpp	/^            basic_ostream()$/;"	f	class:std::basic_ostream
basic_ostream	test_getline.cpp	/^        class basic_ostream : virtual public basic_ios<_CharT, _Traits>$/;"	c	namespace:std	file:
basic_streambuf	test_getline.cpp	/^                basic_streambuf()$/;"	f	class:std::basic_streambuf
basic_streambuf	test_getline.cpp	/^                basic_streambuf(const __streambuf_type& __sb)$/;"	f	class:std::basic_streambuf	file:
basic_streambuf	test_getline.cpp	/^        class basic_streambuf$/;"	c	namespace:std	file:
basic_string	test_getline.cpp	/^        basic_string()$/;"	f	class:std::basic_string
basic_string	test_getline.cpp	/^        basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)$/;"	f	class:std::basic_string
basic_string	test_getline.cpp	/^        basic_string(const _Alloc& __a)$/;"	f	class:std::basic_string
basic_string	test_getline.cpp	/^        basic_string(const _CharT* __s, const _Alloc& __a)$/;"	f	class:std::basic_string
basic_string	test_getline.cpp	/^        basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)$/;"	f	class:std::basic_string
basic_string	test_getline.cpp	/^        basic_string(const basic_string& __str)$/;"	f	class:std::basic_string
basic_string	test_getline.cpp	/^        basic_string(const basic_string& __str, size_type __pos, size_type __n)$/;"	f	class:std::basic_string
basic_string	test_getline.cpp	/^        basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string
basic_string	test_getline.cpp	/^        basic_string(size_type __n, _CharT __c, const _Alloc& __a)$/;"	f	class:std::basic_string
basic_string	test_getline.cpp	/^        class basic_string$/;"	c	namespace:std	file:
batch	github/leveldb-1.18/db/db_impl.cc	/^  WriteBatch* batch;$/;"	m	struct:leveldb::DBImpl::Writer	file:
beg	test_getline.cpp	/^            static const seekdir beg = _S_beg;$/;"	m	class:std::ios_base	file:
begin	github/leveldb-1.18/db/db_impl.h	/^    const InternalKey* begin;   \/\/ NULL means beginning of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
begin	test_getline.cpp	/^                begin() const$/;"	f	class:std::basic_string
begin	test_getline.cpp	/^                begin()$/;"	f	class:std::basic_string
bg_compaction_scheduled_	github/leveldb-1.18/db/db_impl.h	/^  bool bg_compaction_scheduled_;$/;"	m	class:leveldb::DBImpl
bg_cv_	github/leveldb-1.18/db/db_impl.h	/^  port::CondVar bg_cv_;          \/\/ Signalled when background work finishes$/;"	m	class:leveldb::DBImpl
bg_error_	github/leveldb-1.18/db/db_impl.h	/^  Status bg_error_;$/;"	m	class:leveldb::DBImpl
bgsignal_	github/leveldb-1.18/util/env_posix.cc	/^  pthread_cond_t bgsignal_;$/;"	m	class:leveldb::__anon32::PosixEnv	file:
bgthread_	github/leveldb-1.18/util/env_posix.cc	/^  pthread_t bgthread_;$/;"	m	class:leveldb::__anon32::PosixEnv	file:
bidirectional_iterator_tag	test_getline.cpp	/^    struct bidirectional_iterator_tag : public forward_iterator_tag { };$/;"	s	namespace:std	file:
binary	test_getline.cpp	/^            static const openmode binary = _S_bin;$/;"	m	class:std::ios_base	file:
binary_function	test_getline.cpp	/^        struct binary_function$/;"	s	namespace:std	file:
binary_negate	test_getline.cpp	/^                binary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::binary_negate
binary_negate	test_getline.cpp	/^        class binary_negate$/;"	c	namespace:std	file:
bind1st	test_getline.cpp	/^        bind1st(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std
bind2nd	test_getline.cpp	/^        bind2nd(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std
binder1st	test_getline.cpp	/^            binder1st(const _Operation& __x,$/;"	f	class:std::binder1st
binder1st	test_getline.cpp	/^        class binder1st$/;"	c	namespace:std	file:
binder2nd	test_getline.cpp	/^            binder2nd(const _Operation& __x,$/;"	f	class:std::binder2nd
binder2nd	test_getline.cpp	/^        class binder2nd$/;"	c	namespace:std	file:
bit_and	test_getline.cpp	/^        struct bit_and : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
bit_or	test_getline.cpp	/^        struct bit_or : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
bit_xor	test_getline.cpp	/^        struct bit_xor : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
bits_per_key_	github/leveldb-1.18/util/bloom.cc	/^  size_t bits_per_key_;$/;"	m	class:leveldb::__anon31::BloomFilterPolicy	file:
block_	github/leveldb-1.18/table/table_test.cc	/^  Block* block_;$/;"	m	class:leveldb::BlockConstructor	file:
block_cache	github/leveldb-1.18/include/leveldb/options.h	/^  Cache* block_cache;$/;"	m	struct:leveldb::Options
block_function_	github/leveldb-1.18/table/two_level_iterator.cc	/^  BlockFunction block_function_;$/;"	m	class:leveldb::__anon19::TwoLevelIterator	file:
block_offset_	github/leveldb-1.18/db/log_writer.h	/^  int block_offset_;       \/\/ Current offset in block$/;"	m	class:leveldb::log::Writer
block_restart_interval	github/leveldb-1.18/include/leveldb/options.h	/^  int block_restart_interval;$/;"	m	struct:leveldb::Options
block_size	github/leveldb-1.18/include/leveldb/options.h	/^  size_t block_size;$/;"	m	struct:leveldb::Options
blocks_	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::__anon25::FileState	file:
blocks_	github/leveldb-1.18/util/arena.h	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::Arena
blocks_memory_	github/leveldb-1.18/util/arena.h	/^  size_t blocks_memory_;$/;"	m	class:leveldb::Arena
bm	github/leveldb-1.18/db/db_bench.cc	/^    Benchmark* bm;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
bookNo	study/CppPrimer/chap07/class1/Sales_data.h	/^		string			bookNo;$/;"	m	class:Sales_data
boolalpha	test_getline.cpp	/^            static const fmtflags boolalpha = _S_boolalpha;$/;"	m	class:std::ios_base	file:
boolalpha	test_getline.cpp	/^        boolalpha(ios_base& __base)$/;"	f	namespace:std
boost	study/Impala/runtime/timestamp-parse-util.h	/^namespace boost {$/;"	n
buckets_	github/leveldb-1.18/util/histogram.h	/^  double buckets_[kNumBuckets];$/;"	m	class:leveldb::Histogram
buffer	github/leveldb-1.18/db/version_set.h	/^    char buffer[100];$/;"	m	struct:leveldb::VersionSet::LevelSummaryStorage
buffer_	github/leveldb-1.18/db/log_reader.h	/^  Slice buffer_;$/;"	m	class:leveldb::log::Reader
buffer_	github/leveldb-1.18/table/block_builder.h	/^  std::string           buffer_;      \/\/ Destination buffer$/;"	m	class:leveldb::BlockBuilder
builder	github/leveldb-1.18/db/db_impl.cc	/^  TableBuilder* builder;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
bytes_	github/leveldb-1.18/db/db_bench.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::__anon7::Stats	file:
bytes_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_counter_	github/leveldb-1.18/db/db_iter.cc	/^  ssize_t bytes_counter_;$/;"	m	class:leveldb::__anon10::DBIter	file:
bytes_read	github/leveldb-1.18/db/db_impl.h	/^    int64_t bytes_read;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytes_written	github/leveldb-1.18/db/db_impl.h	/^    int64_t bytes_written;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytewise	github/leveldb-1.18/util/comparator.cc	/^static const Comparator* bytewise;$/;"	m	namespace:leveldb	file:
c_str	test_getline.cpp	/^                c_str() const$/;"	f	class:std::basic_string
cachable	github/leveldb-1.18/table/format.h	/^  bool cachable;        \/\/ True iff data can be cached$/;"	m	struct:leveldb::BlockContents
cache_	github/leveldb-1.18/db/db_bench.cc	/^  Cache* cache_;$/;"	m	class:leveldb::Benchmark	file:
cache_	github/leveldb-1.18/db/table_cache.h	/^  Cache* cache_;$/;"	m	class:leveldb::TableCache
cache_	github/leveldb-1.18/util/cache_test.cc	/^  Cache* cache_;$/;"	m	class:leveldb::CacheTest	file:
cache_id	github/leveldb-1.18/table/table.cc	/^  uint64_t cache_id;$/;"	m	struct:leveldb::Table::Rep	file:
capacity	test_getline.cpp	/^                capacity() const$/;"	f	class:std::basic_string
capacity_	github/leveldb-1.18/util/cache.cc	/^  size_t capacity_;$/;"	m	class:leveldb::__anon27::LRUCache	file:
category	test_getline.cpp	/^            typedef int category;$/;"	t	class:std::locale	file:
ch	study/test/test.cpp	/^    char ch[sizeof(short)];$/;"	m	union:judge	file:
char_traits	test_getline.cpp	/^        struct char_traits : public __gnu_cxx::char_traits<_CharT>$/;"	s	namespace:std	file:
char_traits	test_getline.cpp	/^        struct char_traits$/;"	s	namespace:__gnu_cxx	file:
char_traits	test_getline.cpp	/^        struct char_traits<char>$/;"	s	namespace:std	file:
char_traits	test_getline.cpp	/^        struct char_traits<wchar_t>$/;"	s	namespace:std	file:
char_type	test_getline.cpp	/^                typedef _CharT char_type;$/;"	t	class:std::basic_streambuf	file:
char_type	test_getline.cpp	/^                typedef _CharT char_type;$/;"	t	class:std::ostreambuf_iterator	file:
char_type	test_getline.cpp	/^                typedef char char_type;$/;"	t	class:std::ctype	file:
char_type	test_getline.cpp	/^                typedef wchar_t char_type;$/;"	t	class:std::ctype	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::__ctype_abstract_base	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::basic_ios	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::basic_iostream	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::basic_istream	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::basic_ostream	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::collate	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::collate_byname	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::ctype	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::istreambuf_iterator	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::num_get	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::num_put	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::numpunct	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	class:std::numpunct_byname	file:
char_type	test_getline.cpp	/^            typedef _CharT char_type;$/;"	t	struct:__gnu_cxx::char_traits	file:
char_type	test_getline.cpp	/^            typedef char char_type;$/;"	t	struct:std::char_traits	file:
char_type	test_getline.cpp	/^            typedef wchar_t char_type;$/;"	t	struct:std::char_traits	file:
charge	github/leveldb-1.18/util/cache.cc	/^  size_t charge;      \/\/ TODO(opt): Only allow uint32_t?$/;"	m	struct:leveldb::__anon27::LRUHandle	file:
checkCUPendian	work/test_job/test.cpp	/^void checkCUPendian() {$/;"	f
checksum_	github/leveldb-1.18/db/log_reader.h	/^  bool const checksum_;$/;"	m	class:leveldb::log::Reader
children_	github/leveldb-1.18/table/merger.cc	/^  IteratorWrapper* children_;$/;"	m	class:leveldb::__anon20::MergingIterator	file:
classroom	study/dada/person/person.h	/^		int classroom;$/;"	m	class:Student
classroom	study/dada/person_job/person.h	/^		int classroom;$/;"	m	class:Student
clean	work/test_job/day10/SortTime.h	/^		void clean()$/;"	f	class:SortTime
clean	work/test_job/sort/include/SortTime.h	/^		void clean()$/;"	f	class:SortTime
clean	work/test_job/sort_job/SortTime.h	/^		void clean()$/;"	f	class:SortTime
cleanup_	github/leveldb-1.18/include/leveldb/iterator.h	/^  Cleanup cleanup_;$/;"	m	class:leveldb::Iterator
clear	github/leveldb-1.18/include/leveldb/slice.h	/^  void clear() { data_ = ""; size_ = 0; }$/;"	f	class:leveldb::Slice
clear	study/CppPrimer/chap07/class2/Window_mgr.h	/^void Window_mgr::clear(ScreenIndex i)$/;"	f	class:Window_mgr
clear	test_getline.cpp	/^                clear()$/;"	f	class:std::basic_string
clear	test_getline.cpp	/^        basic_ios<_CharT, _Traits>::clear(iostate __state)$/;"	f	class:std::basic_ios
clock_t	test_getline.cpp	/^    typedef __clock_t clock_t;$/;"	t	file:
clockid_t	test_getline.cpp	/^    typedef __clockid_t clockid_t;$/;"	t	file:
closed	github/leveldb-1.18/table/table_builder.cc	/^  bool closed;          \/\/ Either Finish() or Abandon() has been called.$/;"	m	struct:leveldb::TableBuilder::Rep	file:
cmp	github/leveldb-1.18/table/table_test.cc	/^  const Comparator* cmp;$/;"	m	struct:leveldb::__anon22::STLLessThan	file:
cmp	work/test_job/day12/data_packet/src/DataMain.cpp	/^bool cmp(BakPacket a, BakPacket b)$/;"	f
cmp	work/test_job/day17/data_packet/include/BakPacket.h	/^		Enumcmp cmp;$/;"	m	class:compare
cntrl	test_getline.cpp	/^        static const mask cntrl = _IScntrl;$/;"	m	struct:std::ctype_base	file:
code	github/leveldb-1.18/include/leveldb/status.h	/^  Code code() const {$/;"	f	class:leveldb::Status
collate	test_getline.cpp	/^                collate(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::collate
collate	test_getline.cpp	/^                collate(size_t __refs = 0)$/;"	f	class:std::collate
collate	test_getline.cpp	/^            static const category collate = 1L << 2;$/;"	m	class:std::locale	file:
collate	test_getline.cpp	/^        class collate : public locale::facet$/;"	c	namespace:std	file:
collate_byname	test_getline.cpp	/^                collate_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::collate_byname
collate_byname	test_getline.cpp	/^        class collate_byname : public collate<_CharT>$/;"	c	namespace:std	file:
combine	study/CppPrimer/chap07/class1/Sales_data.cpp	/^Sales_data& Sales_data::combine(const Sales_data &rhs)$/;"	f	class:Sales_data
combine	test_getline.cpp	/^        combine(const locale& __other) const$/;"	f	class:std::locale
comp_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::LZOCompressor<kyotocabinet::LZO::RAW> comp_;$/;"	m	class:leveldb::Benchmark	file:
compact_pointer_	github/leveldb-1.18/db/version_set.h	/^  std::string compact_pointer_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet
compact_pointers_	github/leveldb-1.18/db/version_edit.h	/^  std::vector< std::pair<int, InternalKey> > compact_pointers_;$/;"	m	class:leveldb::VersionEdit
compaction	github/leveldb-1.18/db/db_impl.cc	/^  Compaction* const compaction;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
compaction_level_	github/leveldb-1.18/db/version_set.h	/^  int compaction_level_;$/;"	m	class:leveldb::Version
compaction_score_	github/leveldb-1.18/db/version_set.h	/^  double compaction_score_;$/;"	m	class:leveldb::Version
comparator	github/leveldb-1.18/db/memtable.h	/^    const InternalKeyComparator comparator;$/;"	m	struct:leveldb::MemTable::KeyComparator
comparator	github/leveldb-1.18/include/leveldb/options.h	/^  const Comparator* comparator;$/;"	m	struct:leveldb::Options
comparator_	github/leveldb-1.18/db/memtable.h	/^  KeyComparator comparator_;$/;"	m	class:leveldb::MemTable
comparator_	github/leveldb-1.18/db/version_edit.h	/^  std::string comparator_;$/;"	m	class:leveldb::VersionEdit
comparator_	github/leveldb-1.18/table/block.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::Block::Iter	file:
comparator_	github/leveldb-1.18/table/merger.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::__anon20::MergingIterator	file:
comparator_	github/leveldb-1.18/table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::BlockConstructor	file:
comparator_	github/leveldb-1.18/table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::DBConstructor	file:
compare	github/leveldb-1.18/include/leveldb/slice.h	/^inline int Slice::compare(const Slice& b) const {$/;"	f	class:leveldb::Slice
compare	study/CppPrimer/chap16/template.cpp	/^int compare(const T& v1, const T& v2) {$/;"	f
compare	test_getline.cpp	/^                compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	f	class:std::collate
compare	test_getline.cpp	/^                compare(const basic_string& __str) const$/;"	f	class:std::basic_string
compare	test_getline.cpp	/^                compare(const char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits
compare	test_getline.cpp	/^        compare(const _CharT* __s) const$/;"	f	class:std::basic_string
compare	test_getline.cpp	/^        compare(const char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits
compare	test_getline.cpp	/^        compare(size_type __pos, size_type __n, const basic_string& __str) const$/;"	f	class:std::basic_string
compare	test_getline.cpp	/^        compare(size_type __pos, size_type __n1, const _CharT* __s) const$/;"	f	class:std::basic_string
compare	test_getline.cpp	/^        compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string
compare	test_getline.cpp	/^        compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string
compare	work/test_job/day17/data_packet/include/BakPacket.h	/^		compare(Enumcmp c):cmp(c) {};$/;"	f	class:compare
compare	work/test_job/day17/data_packet/include/BakPacket.h	/^class compare$/;"	c
compare_	github/leveldb-1.18/db/c.cc	/^  int (*compare_)($/;"	m	struct:leveldb_comparator_t	file:
compare_	github/leveldb-1.18/db/skiplist.h	/^  Comparator const compare_;$/;"	m	class:leveldb::SkipList
compressed_output	github/leveldb-1.18/table/table_builder.cc	/^  std::string compressed_output;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
compression	github/leveldb-1.18/include/leveldb/options.h	/^  CompressionType compression;$/;"	m	struct:leveldb::Options
config	github/leveldb-1.18/db/dbformat.h	/^namespace config {$/;"	n	namespace:leveldb
const_iterator	test_getline.cpp	/^                const_iterator;$/;"	t	class:std::basic_string	file:
const_mem_fun1_ref_t	test_getline.cpp	/^        class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	file:
const_mem_fun1_t	test_getline.cpp	/^        class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>$/;"	c	namespace:std	file:
const_mem_fun_ref_t	test_getline.cpp	/^        class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	file:
const_mem_fun_t	test_getline.cpp	/^        class const_mem_fun_t : public unary_function<const _Tp*, _Ret>$/;"	c	namespace:std	file:
const_pointer	test_getline.cpp	/^                typedef const _Tp* const_pointer;$/;"	t	class:__gnu_cxx::new_allocator	file:
const_pointer	test_getline.cpp	/^                typedef const void* const_pointer;$/;"	t	class:std::allocator	file:
const_pointer	test_getline.cpp	/^            typedef const _Tp* const_pointer;$/;"	t	class:std::allocator	file:
const_pointer	test_getline.cpp	/^            typedef typename _CharT_alloc_type::const_pointer const_pointer;$/;"	t	class:std::basic_string	file:
const_reference	test_getline.cpp	/^                typedef const _Tp& const_reference;$/;"	t	class:__gnu_cxx::new_allocator	file:
const_reference	test_getline.cpp	/^            typedef const _Tp& const_reference;$/;"	t	class:std::allocator	file:
const_reference	test_getline.cpp	/^            typedef typename _CharT_alloc_type::const_reference const_reference;$/;"	t	class:std::basic_string	file:
const_reverse_iterator	test_getline.cpp	/^            typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::basic_string	file:
construct	test_getline.cpp	/^                    construct(pointer __p, const _Tp& __val)$/;"	f	class:__gnu_cxx::new_allocator
constructor_	github/leveldb-1.18/table/table_test.cc	/^  Constructor* constructor_;$/;"	m	class:leveldb::Harness	file:
container	test_getline.cpp	/^                _Container* container;$/;"	m	class:std::back_insert_iterator	file:
container	test_getline.cpp	/^                _Container* container;$/;"	m	class:std::front_insert_iterator	file:
container	test_getline.cpp	/^                _Container* container;$/;"	m	class:std::insert_iterator	file:
container_type	test_getline.cpp	/^                typedef _Container container_type;$/;"	t	class:std::back_insert_iterator	file:
container_type	test_getline.cpp	/^                typedef _Container container_type;$/;"	t	class:std::front_insert_iterator	file:
container_type	test_getline.cpp	/^                typedef _Container container_type;$/;"	t	class:std::insert_iterator	file:
contents	github/leveldb-1.18/table/table_test.cc	/^  const std::string& contents() const { return contents_; }$/;"	f	class:leveldb::StringSink
contents	study/CppPrimer/chap07/class2/Screen.h	/^		std::string		contents;$/;"	m	class:Screen
contents_	github/leveldb-1.18/db/log_test.cc	/^    Slice contents_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
contents_	github/leveldb-1.18/db/log_test.cc	/^    std::string contents_;$/;"	m	class:leveldb::log::LogTest::StringDest	file:
contents_	github/leveldb-1.18/table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSink	file:
contents_	github/leveldb-1.18/table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSource	file:
copy	test_getline.cpp	/^                     copy(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std
copy	test_getline.cpp	/^                copy(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits
copy	test_getline.cpp	/^        copy(_CharT* __s, size_type __n, size_type __pos) const$/;"	f	class:std::basic_string
copy	test_getline.cpp	/^        copy(_II __first, _II __last, _OI __result)$/;"	f	namespace:std
copy	test_getline.cpp	/^        copy(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits
copy_backward	test_getline.cpp	/^        copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std
copyfmt	test_getline.cpp	/^        basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)$/;"	f	class:std::basic_ios
copyfmt_event	test_getline.cpp	/^                copyfmt_event$/;"	e	enum:std::ios_base::event	file:
count_	github/leveldb-1.18/db/db_test.cc	/^  int count_;$/;"	m	class:leveldb::__anon14::AtomicCounter	file:
count_random_reads_	github/leveldb-1.18/db/db_test.cc	/^  bool count_random_reads_;$/;"	m	class:leveldb::SpecialEnv	file:
counter	github/leveldb-1.18/db/db_test.cc	/^  port::AtomicPointer counter[kNumThreads];$/;"	m	struct:leveldb::__anon15::MTState	file:
counter_	github/leveldb-1.18/table/block_builder.h	/^  int                   counter_;     \/\/ Number of entries emitted since restart$/;"	m	class:leveldb::BlockBuilder
cpu_set_t	test_getline.cpp	/^} cpu_set_t;$/;"	t	typeref:struct:__anon74	file:
crc32c	github/leveldb-1.18/util/crc32c.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
crc32c	github/leveldb-1.18/util/crc32c.h	/^namespace crc32c {$/;"	n	namespace:leveldb
crc32c	github/leveldb-1.18/util/crc32c_test.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
create_	github/leveldb-1.18/db/c.cc	/^  char* (*create_)($/;"	m	struct:leveldb_filterpolicy_t	file:
create_if_missing	github/leveldb-1.18/include/leveldb/options.h	/^  bool create_if_missing;$/;"	m	struct:leveldb::Options
ctype	test_getline.cpp	/^                ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }$/;"	f	class:std::ctype
ctype	test_getline.cpp	/^            static const category ctype = 1L << 0;$/;"	m	class:std::locale	file:
ctype	test_getline.cpp	/^        class ctype : public __ctype_abstract_base<_CharT>$/;"	c	namespace:std	file:
ctype	test_getline.cpp	/^        class ctype<char> : public locale::facet, public ctype_base$/;"	c	namespace:std	file:
ctype	test_getline.cpp	/^        class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>$/;"	c	namespace:std	file:
ctype_base	test_getline.cpp	/^    struct ctype_base$/;"	s	namespace:std	file:
ctype_byname	test_getline.cpp	/^        class ctype_byname : public ctype<_CharT>$/;"	c	namespace:std	file:
ctype_byname	test_getline.cpp	/^        class ctype_byname<char> : public ctype<char>$/;"	c	namespace:std	file:
ctype_byname	test_getline.cpp	/^        class ctype_byname<wchar_t> : public ctype<wchar_t>$/;"	c	namespace:std	file:
cur	test_getline.cpp	/^            static const seekdir cur = _S_cur;$/;"	m	class:std::ios_base	file:
currency_symbol	test_getline.cpp	/^        char *currency_symbol;$/;"	m	struct:lconv	file:
current	github/leveldb-1.18/db/version_set.h	/^  Version* current() const { return current_; }$/;"	f	class:leveldb::VersionSet
current	test_getline.cpp	/^            _Iterator current;$/;"	m	class:std::reverse_iterator	file:
current_	github/leveldb-1.18/db/skiplist_test.cc	/^  State current_;$/;"	m	class:leveldb::ConcurrentTest	file:
current_	github/leveldb-1.18/db/version_set.h	/^  Version* current_;        \/\/ == dummy_versions_.prev_$/;"	m	class:leveldb::VersionSet
current_	github/leveldb-1.18/table/block.cc	/^  uint32_t current_;$/;"	m	class:leveldb::Block::Iter	file:
current_	github/leveldb-1.18/table/merger.cc	/^  IteratorWrapper* current_;$/;"	m	class:leveldb::__anon20::MergingIterator	file:
current_	github/leveldb-1.18/util/cache_test.cc	/^  static CacheTest* current_;$/;"	m	class:leveldb::CacheTest	file:
current_	github/leveldb-1.18/util/cache_test.cc	/^CacheTest* CacheTest::current_;$/;"	m	class:leveldb::CacheTest	file:
current_output	github/leveldb-1.18/db/db_impl.cc	/^  Output* current_output() { return &outputs[outputs.size()-1]; }$/;"	f	struct:leveldb::DBImpl::CompactionState
cursor	study/CppPrimer/chap07/class2/Screen.h	/^		pos	cursor		= 0;$/;"	m	class:Screen
cv	github/leveldb-1.18/db/db_bench.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::__anon7::SharedState	file:
cv	github/leveldb-1.18/db/db_impl.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::DBImpl::Writer	file:
cv_	github/leveldb-1.18/port/port_posix.h	/^  pthread_cond_t cv_;$/;"	m	class:leveldb::port::CondVar
d_num	work/test_job/day12/data_packet/include/BakPacket.h	/^	double 	d_num;$/;"	m	struct:BakPacket
d_num	work/test_job/day16/data_packet/include/BakPacket.h	/^		double 	d_num;$/;"	m	class:BakPacket
d_num	work/test_job/day17/data_packet/include/BakPacket.h	/^	double 	d_num;$/;"	m	struct:BakPacket_
d_vec	work/test_job/day12/data_packet/include/DataPacket.h	/^		vector<double>  	d_vec;$/;"	m	class:DataPacket
d_vec	work/test_job/day16/data_packet/include/DataPacket.h	/^		vector<double>  	d_vec;$/;"	m	class:DataPacket
d_vec	work/test_job/day17/data_packet/include/DataPacket.h	/^		vector<double>  	d_vec;$/;"	m	class:DataPacket
data	github/leveldb-1.18/include/leveldb/slice.h	/^  const char* data() const { return data_; }$/;"	f	class:leveldb::Slice
data	github/leveldb-1.18/table/format.h	/^  Slice data;           \/\/ Actual contents of data$/;"	m	struct:leveldb::BlockContents
data	github/leveldb-1.18/table/table_test.cc	/^  virtual const KVMap& data() { return data_; }$/;"	f	class:leveldb::Constructor
data	study/dada/noname_obj/const_obj.h	/^		int data;$/;"	m	class:A
data	study/dada/noname_obj/noname_obj.h	/^		int data;$/;"	m	class:A
data	study/dada/overload/copy_constructor.cpp	/^		int data;$/;"	m	class:A	file:
data	study/dada/overload/custom_copy.cpp	/^		int data;$/;"	m	class:A	file:
data	study/dada/overload/friend.cpp	/^		int data;$/;"	m	class:A	file:
data	study/dada/overload/reference.cpp	/^		int data;$/;"	m	class:A	file:
data	test_getline.cpp	/^                data() const$/;"	f	class:std::basic_string
data_	github/leveldb-1.18/db/db_bench.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon7::RandomGenerator	file:
data_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon2::RandomGenerator	file:
data_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon3::RandomGenerator	file:
data_	github/leveldb-1.18/include/leveldb/slice.h	/^  const char* data_;$/;"	m	class:leveldb::Slice
data_	github/leveldb-1.18/table/block.cc	/^  const char* const data_;      \/\/ underlying block contents$/;"	m	class:leveldb::Block::Iter	file:
data_	github/leveldb-1.18/table/block.h	/^  const char* data_;$/;"	m	class:leveldb::Block
data_	github/leveldb-1.18/table/filter_block.h	/^  const char* data_;    \/\/ Pointer to filter data (at block-start)$/;"	m	class:leveldb::FilterBlockReader
data_	github/leveldb-1.18/table/table_test.cc	/^  KVMap data_;$/;"	m	class:leveldb::Constructor	file:
data_	github/leveldb-1.18/table/table_test.cc	/^  std::string data_;$/;"	m	class:leveldb::BlockConstructor	file:
data_block	github/leveldb-1.18/table/table_builder.cc	/^  BlockBuilder data_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
data_block_handle_	github/leveldb-1.18/table/two_level_iterator.cc	/^  std::string data_block_handle_;$/;"	m	class:leveldb::__anon19::TwoLevelIterator	file:
data_iter_	github/leveldb-1.18/table/two_level_iterator.cc	/^  IteratorWrapper data_iter_; \/\/ May be NULL$/;"	m	class:leveldb::__anon19::TwoLevelIterator	file:
data_sync_error_	github/leveldb-1.18/db/db_test.cc	/^  port::AtomicPointer data_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
date	study/Impala/runtime/timestamp-value.h	/^            const boost::gregorian::date& date() const { return date_; }$/;"	f	class:impala::TimestampValue
date_	study/Impala/runtime/timestamp-value.h	/^            boost::gregorian::date date_;$/;"	m	class:impala::TimestampValue
day	study/Impala/runtime/timestamp-parse-util.cpp	/^  int day;$/;"	m	struct:impala::DateTimeParseResult	file:
db	github/leveldb-1.18/table/table_test.cc	/^  DB* db() const { return constructor_->db(); }$/;"	f	class:leveldb::Harness
db	github/leveldb-1.18/table/table_test.cc	/^  virtual DB* db() const { return NULL; }  \/\/ Overridden in DBConstructor$/;"	f	class:leveldb::Constructor
db	github/leveldb-1.18/table/table_test.cc	/^  virtual DB* db() const { return db_; }$/;"	f	class:leveldb::DBConstructor
db_	github/leveldb-1.18/db/autocompact_test.cc	/^  DB* db_;$/;"	m	class:leveldb::AutoCompactTest	file:
db_	github/leveldb-1.18/db/corruption_test.cc	/^  DB* db_;$/;"	m	class:leveldb::CorruptionTest	file:
db_	github/leveldb-1.18/db/db_bench.cc	/^  DB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	github/leveldb-1.18/db/db_iter.cc	/^  DBImpl* db_;$/;"	m	class:leveldb::__anon10::DBIter	file:
db_	github/leveldb-1.18/db/db_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBTest	file:
db_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  sqlite3* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::TreeDB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	github/leveldb-1.18/table/table_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBConstructor	file:
db_lock_	github/leveldb-1.18/db/db_impl.h	/^  FileLock* db_lock_;$/;"	m	class:leveldb::DBImpl
db_num_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
db_num_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
dbfull	github/leveldb-1.18/db/db_test.cc	/^  DBImpl* dbfull() {$/;"	f	class:leveldb::DBTest
dbname	github/leveldb-1.18/db/c_test.c	/^static char dbname[200];$/;"	v	file:
dbname_	github/leveldb-1.18/db/autocompact_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::AutoCompactTest	file:
dbname_	github/leveldb-1.18/db/corruption_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::CorruptionTest	file:
dbname_	github/leveldb-1.18/db/db_impl.h	/^  const std::string dbname_;$/;"	m	class:leveldb::DBImpl
dbname_	github/leveldb-1.18/db/db_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::DBTest	file:
dbname_	github/leveldb-1.18/db/repair.cc	/^  std::string const dbname_;$/;"	m	class:leveldb::__anon5::Repairer::std	file:
dbname_	github/leveldb-1.18/db/table_cache.h	/^  const std::string dbname_;$/;"	m	class:leveldb::TableCache
dbname_	github/leveldb-1.18/db/version_set.h	/^  const std::string dbname_;$/;"	m	class:leveldb::VersionSet
deallocate	test_getline.cpp	/^                    deallocate(pointer __p, size_type)$/;"	f	class:__gnu_cxx::new_allocator
dec	test_getline.cpp	/^            static const fmtflags dec = _S_dec;$/;"	m	class:std::ios_base	file:
dec	test_getline.cpp	/^        dec(ios_base& __base)$/;"	f	namespace:std
decimal_point	test_getline.cpp	/^                decimal_point() const$/;"	f	class:std::numpunct
decimal_point	test_getline.cpp	/^        char *decimal_point;$/;"	m	struct:lconv	file:
default_env	github/leveldb-1.18/util/env_posix.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
delay_data_sync_	github/leveldb-1.18/db/db_test.cc	/^  port::AtomicPointer delay_data_sync_;$/;"	m	class:leveldb::SpecialEnv	file:
deleted_files	github/leveldb-1.18/db/version_set.cc	/^    std::set<uint64_t> deleted_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
deleted_files_	github/leveldb-1.18/db/version_edit.h	/^  DeletedFileSet deleted_files_;$/;"	m	class:leveldb::VersionEdit
deleted_keys_	github/leveldb-1.18/util/cache_test.cc	/^  std::vector<int> deleted_keys_;$/;"	m	class:leveldb::CacheTest	file:
deleted_values_	github/leveldb-1.18/util/cache_test.cc	/^  std::vector<int> deleted_values_;$/;"	m	class:leveldb::CacheTest	file:
deleter	github/leveldb-1.18/util/cache.cc	/^  void (*deleter)(const Slice&, void* value);$/;"	m	struct:leveldb::__anon27::LRUHandle	file:
descriptor_file_	github/leveldb-1.18/db/version_set.h	/^  WritableFile* descriptor_file_;$/;"	m	class:leveldb::VersionSet
descriptor_log_	github/leveldb-1.18/db/version_set.h	/^  log::Writer* descriptor_log_;$/;"	m	class:leveldb::VersionSet
dest_	github/leveldb-1.18/db/log_test.cc	/^  StringDest dest_;$/;"	m	class:leveldb::log::LogTest	file:
dest_	github/leveldb-1.18/db/log_writer.h	/^  WritableFile* dest_;$/;"	m	class:leveldb::log::Writer
destroy	test_getline.cpp	/^                    destroy(pointer __p) { __p->~_Tp(); }$/;"	f	class:__gnu_cxx::new_allocator
destructor_	github/leveldb-1.18/db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
destructor_	github/leveldb-1.18/db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
difference_type	test_getline.cpp	/^                    difference_type;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
difference_type	test_getline.cpp	/^                difference_type;$/;"	t	class:std::reverse_iterator	file:
difference_type	test_getline.cpp	/^                typedef _Distance difference_type;$/;"	t	struct:std::iterator	file:
difference_type	test_getline.cpp	/^                typedef ptrdiff_t difference_type;$/;"	t	class:__gnu_cxx::new_allocator	file:
difference_type	test_getline.cpp	/^                typedef ptrdiff_t difference_type;$/;"	t	class:std::allocator	file:
difference_type	test_getline.cpp	/^            typedef ptrdiff_t difference_type;$/;"	t	class:std::allocator	file:
difference_type	test_getline.cpp	/^            typedef ptrdiff_t difference_type;$/;"	t	struct:std::iterator_traits	file:
difference_type	test_getline.cpp	/^            typedef typename _CharT_alloc_type::difference_type difference_type;$/;"	t	class:std::basic_string	file:
difference_type	test_getline.cpp	/^            typedef typename _Iterator::difference_type difference_type;$/;"	t	struct:std::iterator_traits	file:
digit	test_getline.cpp	/^        static const mask digit = _ISdigit;$/;"	m	struct:std::ctype_base	file:
direction_	github/leveldb-1.18/db/db_iter.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon10::DBIter	file:
direction_	github/leveldb-1.18/table/merger.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon20::MergingIterator	file:
disjoint_sorted_files_	github/leveldb-1.18/db/version_set_test.cc	/^  bool disjoint_sorted_files_;$/;"	m	class:leveldb::FindFileTest	file:
display	study/CppPrimer/chap07/class2/Screen.h	/^		Screen &display(std::ostream &os) $/;"	f	class:Screen
display	study/CppPrimer/chap07/class2/Screen.h	/^		const Screen &display(std::ostream &os) const$/;"	f	class:Screen
distance	test_getline.cpp	/^        distance(_InputIterator __first, _InputIterator __last)$/;"	f	namespace:std
divides	test_getline.cpp	/^        struct divides : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
doAction	work/person_design/src/basketball_player.cpp	/^void BasketballPlayer::doAction() const {$/;"	f	class:BasketballPlayer
doAction	work/person_design/src/firemen.cpp	/^void Firemen::doAction() const {$/;"	f	class:Firemen
doAction	work/person_design/src/football_player.cpp	/^void FootballPlayer::doAction() const {$/;"	f	class:FootballPlayer
doAction	work/person_design/src/mid_school_stu.cpp	/^void MidSchoolStu::doAction() const {$/;"	f	class:MidSchoolStu
doAction	work/person_design/src/one_hundred_m_runner.cpp	/^void Runners::doAction() const {$/;"	f	class:Runners
doAction	work/person_design/src/pilot.cpp	/^void Pilot::doAction() const {$/;"	f	class:Pilot
doAction	work/person_design/src/university_stu.cpp	/^void UniversityStu::doAction() const {$/;"	f	class:UniversityStu
doSport	work/person_design/src/basketball_player.cpp	/^void BasketballPlayer::doSport() const {$/;"	f	class:BasketballPlayer
doSport	work/person_design/src/football_player.cpp	/^void FootballPlayer::doSport() const {$/;"	f	class:FootballPlayer
doSport	work/person_design/src/one_hundred_m_runner.cpp	/^void Runners::doSport() const {$/;"	f	class:Runners
do_compare	test_getline.cpp	/^        do_compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	f	class:std::collate
do_decimal_point	test_getline.cpp	/^                do_decimal_point() const$/;"	f	class:std::numpunct
do_display	study/CppPrimer/chap07/class2/Screen.h	/^		void do_display(std::ostream &os) const { os << contents; }\/\/ 显示屏幕内容$/;"	f	class:Screen
do_falsename	test_getline.cpp	/^                do_falsename() const$/;"	f	class:std::numpunct
do_get	test_getline.cpp	/^                do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_get	test_getline.cpp	/^        do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
do_grouping	test_getline.cpp	/^                do_grouping() const$/;"	f	class:std::numpunct
do_hash	test_getline.cpp	/^        do_hash(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate
do_narrow	test_getline.cpp	/^                    do_narrow(char_type __c, char) const$/;"	f	class:std::ctype
do_narrow	test_getline.cpp	/^                    do_narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype
do_put	test_getline.cpp	/^                do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const$/;"	f	class:std::num_put
do_put	test_getline.cpp	/^                do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put
do_put	test_getline.cpp	/^        do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const$/;"	f	class:std::num_put
do_put	test_getline.cpp	/^        do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const$/;"	f	class:std::num_put
do_put	test_getline.cpp	/^        do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put
do_thousands_sep	test_getline.cpp	/^                do_thousands_sep() const$/;"	f	class:std::numpunct
do_transform	test_getline.cpp	/^        do_transform(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate
do_truename	test_getline.cpp	/^                do_truename() const$/;"	f	class:std::numpunct
do_widen	test_getline.cpp	/^                    do_widen(char __c) const$/;"	f	class:std::ctype
do_widen	test_getline.cpp	/^                    do_widen(const char* __lo, const char* __hi, char_type* __dest) const$/;"	f	class:std::ctype
done	github/leveldb-1.18/db/db_impl.cc	/^  bool done;$/;"	m	struct:leveldb::DBImpl::Writer	file:
done	github/leveldb-1.18/db/db_impl.h	/^    bool done;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
done_	github/leveldb-1.18/db/db_bench.cc	/^  int done_;$/;"	m	class:leveldb::__anon7::Stats	file:
done_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
done_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
drivePlane	work/person_design/src/pilot.cpp	/^void Pilot::drivePlane() const {$/;"	f	class:Pilot
dropped_bytes_	github/leveldb-1.18/db/log_test.cc	/^    size_t dropped_bytes_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
dst_	github/leveldb-1.18/db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon12::CorruptionReporter	file:
dst_	github/leveldb-1.18/db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon12::WriteBatchItemPrinter	file:
dummy_versions_	github/leveldb-1.18/db/version_set.h	/^  Version dummy_versions_;  \/\/ Head of circular doubly-linked list of versions.$/;"	m	class:leveldb::VersionSet
eat	study/dada/fenshu/virtual.cpp	/^		virtual void eat(){$/;"	f	class:Animal
eat	study/dada/fenshu/virtual.cpp	/^		virtual void eat(){$/;"	f	class:Cat
eat	study/dada/fenshu/virtual.cpp	/^		void eat(){$/;"	f	class:Dog
eat	study/dada/fenshu/virtual.cpp	/^		void eat(){$/;"	f	class:Jiafeimao
eat	work/person_design/src/human.cpp	/^void Human::eat() const { cout << "I am eating rice!" << endl; }$/;"	f	class:Human
eback	test_getline.cpp	/^                    eback() const { return _M_in_beg; }$/;"	f	class:std::basic_streambuf
edit	github/leveldb-1.18/db/version_set.h	/^  VersionEdit* edit() { return &edit_; }$/;"	f	class:leveldb::Compaction
edit_	github/leveldb-1.18/db/repair.cc	/^  VersionEdit edit_;$/;"	m	class:leveldb::__anon5::Repairer	file:
edit_	github/leveldb-1.18/db/version_set.h	/^  VersionEdit edit_;$/;"	m	class:leveldb::Compaction
egptr	test_getline.cpp	/^                    egptr() const { return _M_in_end; }$/;"	f	class:std::basic_streambuf
element_cpy	work/test_job/day12/data_packet/src/BakPacket.cpp	/^void element_cpy(struct BakPacket b_stru[], $/;"	f
element_cpy	work/test_job/day16/data_packet/src/BakPacket.cpp	/^void BakPacket::element_cpy(vector<BakPacket> &b_vec, $/;"	f	class:BakPacket
element_cpy	work/test_job/day17/data_packet/src/BakPacket.cpp	/^void element_cpy(BakPacket b_stru[], $/;"	f
element_cpy_new	work/test_job/day17/data_packet/src/BakPacket.cpp	/^void element_cpy_new(BakPacket b_stru[], $/;"	f
elems_	github/leveldb-1.18/util/cache.cc	/^  uint32_t elems_;$/;"	m	class:leveldb::__anon27::HandleTable	file:
empty	github/leveldb-1.18/db/snapshot.h	/^  bool empty() const { return list_.next_ == &list_; }$/;"	f	class:leveldb::SnapshotList
empty	github/leveldb-1.18/include/leveldb/slice.h	/^  bool empty() const { return size_ == 0; }$/;"	f	class:leveldb::Slice
empty	github/leveldb-1.18/table/block_builder.h	/^  bool empty() const {$/;"	f	class:leveldb::BlockBuilder
empty	test_getline.cpp	/^                empty() const$/;"	f	class:std::basic_string
end	github/leveldb-1.18/db/db_impl.h	/^    const InternalKey* end;     \/\/ NULL means end of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
end	test_getline.cpp	/^                end() const$/;"	f	class:std::basic_string
end	test_getline.cpp	/^                end()$/;"	f	class:std::basic_string
end	test_getline.cpp	/^            static const seekdir end = _S_end;$/;"	m	class:std::ios_base	file:
end_	github/leveldb-1.18/db/dbformat.h	/^  const char* end_;$/;"	m	class:leveldb::LookupKey
end_of_buffer_offset_	github/leveldb-1.18/db/log_reader.h	/^  uint64_t end_of_buffer_offset_;$/;"	m	class:leveldb::log::Reader
endl	test_getline.cpp	/^        endl(basic_ostream<_CharT, _Traits>& __os)$/;"	f	namespace:std
ends	test_getline.cpp	/^        ends(basic_ostream<_CharT, _Traits>& __os)$/;"	f	namespace:std
entertain	work/person_design/src/basketball_player.cpp	/^void BasketballPlayer::entertain() const {$/;"	f	class:BasketballPlayer
entertain	work/person_design/src/firemen.cpp	/^void Firemen::entertain() const {$/;"	f	class:Firemen
entertain	work/person_design/src/football_player.cpp	/^void FootballPlayer::entertain() const {$/;"	f	class:FootballPlayer
entertain	work/person_design/src/one_hundred_m_runner.cpp	/^void Runners::entertain() const { $/;"	f	class:Runners
entertain	work/person_design/src/pilot.cpp	/^void Pilot::entertain() const {$/;"	f	class:Pilot
entertain	work/person_design/src/student.cpp	/^void Student::entertain() const {$/;"	f	class:Student
entries_per_batch_	github/leveldb-1.18/db/db_bench.cc	/^  int entries_per_batch_;$/;"	m	class:leveldb::Benchmark	file:
env	github/leveldb-1.18/include/leveldb/options.h	/^  Env* env;$/;"	m	struct:leveldb::Options
env_	github/leveldb-1.18/db/corruption_test.cc	/^  test::ErrorEnv env_;$/;"	m	class:leveldb::CorruptionTest	file:
env_	github/leveldb-1.18/db/db_impl.h	/^  Env* const env_;$/;"	m	class:leveldb::DBImpl
env_	github/leveldb-1.18/db/db_test.cc	/^  SpecialEnv* env_;$/;"	m	class:leveldb::DBTest	file:
env_	github/leveldb-1.18/db/repair.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon5::Repairer	file:
env_	github/leveldb-1.18/db/table_cache.h	/^  Env* const env_;$/;"	m	class:leveldb::TableCache
env_	github/leveldb-1.18/db/version_set.h	/^  Env* const env_;$/;"	m	class:leveldb::VersionSet
env_	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^  Env* env_;$/;"	m	class:leveldb::MemEnvTest	file:
env_	github/leveldb-1.18/util/env_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvPosixTest	file:
eof	test_getline.cpp	/^                eof() const$/;"	f	class:std::basic_ios
eof	test_getline.cpp	/^                eof()$/;"	f	struct:__gnu_cxx::char_traits
eof	test_getline.cpp	/^                eof()$/;"	f	struct:std::char_traits
eof_	github/leveldb-1.18/db/log_reader.h	/^  bool eof_;   \/\/ Last Read() indicated EOF by returning < kBlockSize$/;"	m	class:leveldb::log::Reader
eofbit	test_getline.cpp	/^            static const iostate eofbit = _S_eofbit;$/;"	m	class:std::ios_base	file:
epptr	test_getline.cpp	/^                    epptr() const { return _M_out_end; }$/;"	f	class:std::basic_streambuf
eq	test_getline.cpp	/^                eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits
eq	test_getline.cpp	/^                eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits
eq_int_type	test_getline.cpp	/^                eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits
eq_int_type	test_getline.cpp	/^                eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:std::char_traits
equal	test_getline.cpp	/^                equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	struct:std::__equal
equal	test_getline.cpp	/^                equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)$/;"	f	struct:std::__equal
equal	test_getline.cpp	/^                equal(const istreambuf_iterator& __b) const$/;"	f	class:std::istreambuf_iterator
equal	test_getline.cpp	/^        equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std
equal	test_getline.cpp	/^        equal(_IIter1 __first1, _IIter1 __last1,$/;"	f	namespace:std
equal_to	test_getline.cpp	/^        struct equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
erase	test_getline.cpp	/^                erase(iterator __position)$/;"	f	class:std::basic_string
erase	test_getline.cpp	/^                erase(size_type __pos = 0, size_type __n = npos)$/;"	f	class:std::basic_string
erase	test_getline.cpp	/^        erase(iterator __first, iterator __last)$/;"	f	class:std::basic_string
erase_event	test_getline.cpp	/^                erase_event,$/;"	e	enum:std::ios_base::event	file:
error_if_exists	github/leveldb-1.18/include/leveldb/options.h	/^  bool error_if_exists;$/;"	m	struct:leveldb::Options
event	test_getline.cpp	/^            enum event$/;"	g	class:std::ios_base	file:
event_callback	test_getline.cpp	/^            typedef void (*event_callback) (event, ios_base&, int);$/;"	t	class:std::ios_base	file:
events_	github/leveldb-1.18/util/env_test.cc	/^  std::string events_;$/;"	m	class:leveldb::EnvPosixTest	file:
exam	work/person_design/src/mid_school_stu.cpp	/^void MidSchoolStu::exam() const {$/;"	f	class:MidSchoolStu
exam	work/person_design/src/university_stu.cpp	/^void UniversityStu::exam() const {$/;"	f	class:UniversityStu
exception	test_getline.cpp	/^                exception() throw() { }$/;"	f	class:std::exception
exception	test_getline.cpp	/^        class exception$/;"	c	namespace:std	file:
exceptions	test_getline.cpp	/^                exceptions() const$/;"	f	class:std::basic_ios
exceptions	test_getline.cpp	/^                exceptions(iostate __except)$/;"	f	class:std::basic_ios
expected_day	study/Impala/runtime/timestamp-test.cpp	/^  int expected_day;$/;"	m	struct:impala::TimestampTC	file:
expected_fraction	study/Impala/runtime/timestamp-test.cpp	/^  int expected_fraction;$/;"	m	struct:impala::TimestampTC	file:
expected_hours	study/Impala/runtime/timestamp-test.cpp	/^  int expected_hours;$/;"	m	struct:impala::TimestampTC	file:
expected_minutes	study/Impala/runtime/timestamp-test.cpp	/^  int expected_minutes;$/;"	m	struct:impala::TimestampTC	file:
expected_month	study/Impala/runtime/timestamp-test.cpp	/^  int expected_month;$/;"	m	struct:impala::TimestampTC	file:
expected_seconds	study/Impala/runtime/timestamp-test.cpp	/^  int expected_seconds;$/;"	m	struct:impala::TimestampTC	file:
expected_year	study/Impala/runtime/timestamp-test.cpp	/^  int expected_year;$/;"	m	struct:impala::TimestampTC	file:
f	study/CppDesign/C03/pass_address.cpp	/^void f(int* const p) {$/;"	f
facet	test_getline.cpp	/^                facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)$/;"	f	class:std::locale::facet
facet	test_getline.cpp	/^    class locale::facet$/;"	c	class:std::locale	file:
fail	test_getline.cpp	/^                fail() const$/;"	f	class:std::basic_ios
failbit	test_getline.cpp	/^            static const iostate failbit = _S_failbit;$/;"	m	class:std::ios_base	file:
failed	test_getline.cpp	/^                    failed() const throw()$/;"	f	class:std::ostreambuf_iterator
failure	test_getline.cpp	/^            class failure : public exception$/;"	c	class:std::ios_base	file:
fake_filter_result	github/leveldb-1.18/db/c_test.c	/^static unsigned char fake_filter_result = 1;$/;"	v	file:
falsename	test_getline.cpp	/^                falsename() const$/;"	f	class:std::numpunct
fd_	github/leveldb-1.18/util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon32::PosixFileLock	file:
fd_	github/leveldb-1.18/util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon32::PosixRandomAccessFile	file:
fdatasync	github/leveldb-1.18/port/port_posix.h	65;"	d
fdatasync	github/leveldb-1.18/port/port_posix.h	71;"	d
fflush_unlocked	github/leveldb-1.18/port/port_posix.h	59;"	d
file	github/leveldb-1.18/db/table_cache.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::TableAndFile	file:
file	github/leveldb-1.18/table/table.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::Table::Rep	file:
file	github/leveldb-1.18/table/table_builder.cc	/^  WritableFile* file;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
file_	github/leveldb-1.18/db/log_reader.h	/^  SequentialFile* const file_;$/;"	m	class:leveldb::log::Reader
file_	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon25::RandomAccessFileImpl	file:
file_	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon25::SequentialFileImpl	file:
file_	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon25::WritableFileImpl	file:
file_	github/leveldb-1.18/util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon32::PosixSequentialFile	file:
file_	github/leveldb-1.18/util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon32::PosixWritableFile	file:
file_	github/leveldb-1.18/util/posix_logger.h	/^  FILE* file_;$/;"	m	class:leveldb::PosixLogger
file_map_	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  FileSystem file_map_;  \/\/ Protected by mutex_.$/;"	m	class:leveldb::__anon25::InMemoryEnv	file:
file_size	github/leveldb-1.18/db/db_impl.cc	/^    uint64_t file_size;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
file_size	github/leveldb-1.18/db/version_edit.h	/^  uint64_t file_size;         \/\/ File size in bytes$/;"	m	struct:leveldb::FileMetaData
file_to_compact_	github/leveldb-1.18/db/version_set.h	/^  FileMetaData* file_to_compact_;$/;"	m	class:leveldb::Version
file_to_compact_level_	github/leveldb-1.18/db/version_set.h	/^  int file_to_compact_level_;$/;"	m	class:leveldb::Version
filebuf	test_getline.cpp	/^    typedef basic_filebuf<char> filebuf;$/;"	t	namespace:std	file:
filename_	github/leveldb-1.18/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon32::PosixMmapReadableFile	file:
filename_	github/leveldb-1.18/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon32::PosixRandomAccessFile	file:
filename_	github/leveldb-1.18/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon32::PosixSequentialFile	file:
filename_	github/leveldb-1.18/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon32::PosixWritableFile	file:
files_	github/leveldb-1.18/db/version_set.h	/^  std::vector<FileMetaData*> files_[config::kNumLevels];$/;"	m	class:leveldb::Version
files_	github/leveldb-1.18/db/version_set_test.cc	/^  std::vector<FileMetaData*> files_;$/;"	m	class:leveldb::FindFileTest	file:
fill	study/dada/overload/array_another.cpp	/^		void fill(char start, int skip) {$/;"	f	class:Array
fill	test_getline.cpp	/^                fill() const$/;"	f	class:std::basic_ios
fill	test_getline.cpp	/^                fill(char_type __ch)$/;"	f	class:std::basic_ios
fill	test_getline.cpp	/^        fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)$/;"	f	namespace:std
fill_cache	github/leveldb-1.18/include/leveldb/options.h	/^  bool fill_cache;$/;"	m	struct:leveldb::ReadOptions
fill_n	test_getline.cpp	/^        fill_n(_OI __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std
filter	github/leveldb-1.18/table/table.cc	/^  FilterBlockReader* filter;$/;"	m	struct:leveldb::Table::Rep	file:
filter_	github/leveldb-1.18/util/bloom_test.cc	/^  std::string filter_;$/;"	m	class:leveldb::BloomTest	file:
filter_block	github/leveldb-1.18/table/table_builder.cc	/^  FilterBlockBuilder* filter_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
filter_data	github/leveldb-1.18/table/table.cc	/^  const char* filter_data;$/;"	m	struct:leveldb::Table::Rep	file:
filter_offsets_	github/leveldb-1.18/table/filter_block.h	/^  std::vector<uint32_t> filter_offsets_;$/;"	m	class:leveldb::FilterBlockBuilder
filter_policy	github/leveldb-1.18/include/leveldb/options.h	/^  const FilterPolicy* filter_policy;$/;"	m	struct:leveldb::Options
filter_policy_	github/leveldb-1.18/db/db_bench.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::Benchmark	file:
filter_policy_	github/leveldb-1.18/db/db_test.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::DBTest	file:
find	test_getline.cpp	/^                     find(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std
find	test_getline.cpp	/^                find(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string
find	test_getline.cpp	/^                find(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string
find	test_getline.cpp	/^                find(const char_type* __s, size_t __n, const char_type& __a)$/;"	f	struct:std::char_traits
find	test_getline.cpp	/^        find(_CharT __c, size_type __pos) const$/;"	f	class:std::basic_string
find	test_getline.cpp	/^        find(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
find	test_getline.cpp	/^        find(const char_type* __s, std::size_t __n, const char_type& __a)$/;"	f	class:__gnu_cxx::char_traits
find	test_pattern.cpp	/^unsigned int find(const std::string& src, const std::string& pattern,$/;"	f
find_first_not_of	test_getline.cpp	/^                find_first_not_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string
find_first_not_of	test_getline.cpp	/^                find_first_not_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string
find_first_not_of	test_getline.cpp	/^        find_first_not_of(_CharT __c, size_type __pos) const$/;"	f	class:std::basic_string
find_first_not_of	test_getline.cpp	/^        find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
find_first_of	test_getline.cpp	/^                find_first_of(_CharT __c, size_type __pos = 0) const$/;"	f	class:std::basic_string
find_first_of	test_getline.cpp	/^                find_first_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string
find_first_of	test_getline.cpp	/^                find_first_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string
find_first_of	test_getline.cpp	/^        find_first_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
find_last_not_of	test_getline.cpp	/^                find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string
find_last_not_of	test_getline.cpp	/^                find_last_not_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string
find_last_not_of	test_getline.cpp	/^        find_last_not_of(_CharT __c, size_type __pos) const$/;"	f	class:std::basic_string
find_last_not_of	test_getline.cpp	/^        find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
find_last_of	test_getline.cpp	/^                find_last_of(_CharT __c, size_type __pos = npos) const$/;"	f	class:std::basic_string
find_last_of	test_getline.cpp	/^                find_last_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string
find_last_of	test_getline.cpp	/^                find_last_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string
find_last_of	test_getline.cpp	/^        find_last_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
finish_	github/leveldb-1.18/db/db_bench.cc	/^  double finish_;$/;"	m	class:leveldb::__anon7::Stats	file:
finished_	github/leveldb-1.18/table/block_builder.h	/^  bool                  finished_;    \/\/ Has Finish() been called?$/;"	m	class:leveldb::BlockBuilder
first	test_getline.cpp	/^            _T1 first;$/;"	m	struct:std::pair	file:
first_argument_type	test_getline.cpp	/^            typedef _Arg1 first_argument_type;$/;"	t	struct:std::binary_function	file:
first_type	test_getline.cpp	/^            typedef _T1 first_type;$/;"	t	struct:std::pair	file:
fixed	test_getline.cpp	/^            static const fmtflags fixed = _S_fixed;$/;"	m	class:std::ios_base	file:
fixed	test_getline.cpp	/^        fixed(ios_base& __base)$/;"	f	namespace:std
flags	test_getline.cpp	/^                flags() const$/;"	f	class:std::ios_base
flags	test_getline.cpp	/^                flags(fmtflags __fmtfl)$/;"	f	class:std::ios_base
flist_	github/leveldb-1.18/db/version_set.cc	/^  const std::vector<FileMetaData*>* const flist_;$/;"	m	class:leveldb::Version::LevelFileNumIterator::std	file:
floatfield	test_getline.cpp	/^            static const fmtflags floatfield = _S_floatfield;$/;"	m	class:std::ios_base	file:
flush	test_getline.cpp	/^        flush()$/;"	f	class:std::basic_ostream
flush	test_getline.cpp	/^        flush(basic_ostream<_CharT, _Traits>& __os)$/;"	f	namespace:std
fly	study/dada/animal/animal.h	/^		void fly(){$/;"	f	class:Bird
fmt	study/Impala/runtime/timestamp-parse-util.h	/^        const char* fmt;$/;"	m	struct:impala::DateTimeFormatContext
fmt	study/Impala/runtime/timestamp-test.cpp	/^  const char* fmt;$/;"	m	struct:impala::TimestampFormatTC	file:
fmt	study/Impala/runtime/timestamp-test.cpp	/^  const char* fmt;$/;"	m	struct:impala::TimestampTC	file:
fmt	study/Impala/runtime/timestamp-test.cpp	/^  const char* fmt;$/;"	m	struct:impala::TimestampToken	file:
fmt_has_date_toks	study/Impala/runtime/timestamp-test.cpp	/^  bool fmt_has_date_toks;$/;"	m	struct:impala::TimestampTC	file:
fmt_has_time_toks	study/Impala/runtime/timestamp-test.cpp	/^  bool fmt_has_time_toks;$/;"	m	struct:impala::TimestampTC	file:
fmt_len	study/Impala/runtime/timestamp-parse-util.h	/^        int fmt_len;$/;"	m	struct:impala::DateTimeFormatContext
fmt_out_len	study/Impala/runtime/timestamp-parse-util.h	/^        int fmt_out_len;$/;"	m	struct:impala::DateTimeFormatContext
fmt_should_fail	study/Impala/runtime/timestamp-test.cpp	/^  bool fmt_should_fail;$/;"	m	struct:impala::TimestampTC	file:
fmtflags	test_getline.cpp	/^            typedef _Ios_Fmtflags fmtflags;$/;"	t	class:std::ios_base	file:
fname_	github/leveldb-1.18/util/testharness.h	/^  const char* fname_;$/;"	m	class:leveldb::test::Tester
force_error_	github/leveldb-1.18/db/log_test.cc	/^    bool force_error_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
forward_iterator_tag	test_getline.cpp	/^    struct forward_iterator_tag : public input_iterator_tag { };$/;"	s	namespace:std	file:
fpos	test_getline.cpp	/^                fpos()$/;"	f	class:std::fpos
fpos	test_getline.cpp	/^                fpos(streamoff __off)$/;"	f	class:std::fpos
fpos	test_getline.cpp	/^        class fpos$/;"	c	namespace:std	file:
frac_digits	test_getline.cpp	/^        char frac_digits;$/;"	m	struct:lconv	file:
fraction	study/Impala/runtime/timestamp-parse-util.cpp	/^  int32_t fraction;$/;"	m	struct:impala::DateTimeParseResult	file:
fread_unlocked	github/leveldb-1.18/port/port_posix.h	57;"	d
front_insert_iterator	test_getline.cpp	/^                explicit front_insert_iterator(_Container& __x) : container(&__x) { }$/;"	f	class:std::front_insert_iterator
front_insert_iterator	test_getline.cpp	/^        class front_insert_iterator$/;"	c	namespace:std	file:
front_inserter	test_getline.cpp	/^        front_inserter(_Container& __x)$/;"	f	namespace:std
fstream	test_getline.cpp	/^    typedef basic_fstream<char> fstream;$/;"	t	namespace:std	file:
func	github/leveldb-1.18/util/testharness.cc	/^  void (*func)();$/;"	m	struct:leveldb::test::__anon29::Test	file:
func	study/CppDesign/C03/pass_address.c	/^void func(void)$/;"	f
func	study/dada/overload/reference.cpp	/^void func(const A& obj) {$/;"	f
func	test.c	/^int func () {$/;"	f
function	github/leveldb-1.18/include/leveldb/iterator.h	/^    CleanupFunction function;$/;"	m	struct:leveldb::Iterator::Cleanup
function	github/leveldb-1.18/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon32::PosixEnv::BGItem	file:
fwrite_unlocked	github/leveldb-1.18/port/port_posix.h	58;"	d
gbump	test_getline.cpp	/^                    gbump(int __n) { _M_in_cur += __n; }$/;"	f	class:std::basic_streambuf
gcount	test_getline.cpp	/^                gcount() const$/;"	f	class:std::basic_istream
gen	github/leveldb-1.18/db/skiplist_test.cc	/^  static uint64_t gen(Key key) { return (key >> 8) & 0xffffffffu; }$/;"	f	class:leveldb::ConcurrentTest	file:
gen_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
gen_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
gender	study/dada/person/person.h	/^		bool gender;$/;"	m	class:Person
generation	github/leveldb-1.18/db/skiplist_test.cc	/^    port::AtomicPointer generation[K];$/;"	m	struct:leveldb::ConcurrentTest::State	file:
get	study/CppPrimer/chap07/class2/Screen.h	/^		char get() const$/;"	f	class:Screen
get	study/CppPrimer/chap07/class2/Screen.h	/^char Screen::get(pos ht, pos wd) const  \/\/ 在类的内部声明成inline$/;"	f	class:Screen
get	study/dada/overload/array.cpp	/^		char get(int index) {$/;"	f	class:Array
get	test_getline.cpp	/^                get(__streambuf_type& __sb)$/;"	f	class:std::basic_istream
get	test_getline.cpp	/^                get(char_type* __s, streamsize __n)$/;"	f	class:std::basic_istream
get	test_getline.cpp	/^                get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get
get	test_getline.cpp	/^        get(__streambuf_type& __sb, char_type __delim)$/;"	f	class:std::basic_istream
get	test_getline.cpp	/^        get(char_type& __c)$/;"	f	class:std::basic_istream
get	test_getline.cpp	/^        get(char_type* __s, streamsize __n, char_type __delim)$/;"	f	class:std::basic_istream
get	test_getline.cpp	/^        get(void)$/;"	f	class:std::basic_istream
getAge	study/dada/animal/animal.h	/^		int getAge(){ return age; }$/;"	f	class:Animal
getName	study/dada/animal/animal.h	/^		string getName(){ return name; }$/;"	f	class:Animal
getWeight	study/dada/animal/animal.h	/^		double getWeight(){$/;"	f	class:Bird
get_allocator	test_getline.cpp	/^                get_allocator() const$/;"	f	class:std::basic_string
getline	test_getline.cpp	/^                getline(char_type* __s, streamsize __n)$/;"	f	class:std::basic_istream
getline	test_getline.cpp	/^        getline(basic_istream<_CharT, _Traits>& __in,$/;"	f	namespace:std
getline	test_getline.cpp	/^        getline(basic_istream<_CharT, _Traits>& __is,$/;"	f	namespace:std
getline	test_getline.cpp	/^        getline(char_type* __s, streamsize __n, char_type __delim)$/;"	f	class:std::basic_istream
getloc	test_getline.cpp	/^                    getloc() const$/;"	f	class:std::basic_streambuf
getloc	test_getline.cpp	/^                getloc() const$/;"	f	class:std::ios_base
gettid	github/leveldb-1.18/util/env_posix.cc	/^  static uint64_t gettid() {$/;"	f	class:leveldb::__anon32::PosixEnv
gettid_	github/leveldb-1.18/util/posix_logger.h	/^  uint64_t (*gettid_)();  \/\/ Return the thread id for the current thread$/;"	m	class:leveldb::PosixLogger
gid_t	test_getline.cpp	/^    typedef __gid_t gid_t;$/;"	t	file:
good	test_getline.cpp	/^                good() const$/;"	f	class:std::basic_ios
goodbit	test_getline.cpp	/^            static const iostate goodbit = _S_goodbit;$/;"	m	class:std::ios_base	file:
gptr	test_getline.cpp	/^                    gptr() const { return _M_in_cur; }$/;"	f	class:std::basic_streambuf
grandparent_index_	github/leveldb-1.18/db/version_set.h	/^  size_t grandparent_index_;  \/\/ Index in grandparent_starts_$/;"	m	class:leveldb::Compaction
grandparents_	github/leveldb-1.18/db/version_set.h	/^  std::vector<FileMetaData*> grandparents_;$/;"	m	class:leveldb::Compaction
graph	test_getline.cpp	/^        static const mask graph = _ISalpha | _ISdigit | _ISpunct;$/;"	m	struct:std::ctype_base	file:
greater	test_getline.cpp	/^        struct greater : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
greater_equal	test_getline.cpp	/^        struct greater_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
gregorian	study/Impala/runtime/timestamp-parse-util.h	/^    namespace gregorian {$/;"	n	namespace:boost
grouping	test_getline.cpp	/^                grouping() const$/;"	f	class:std::numpunct
grouping	test_getline.cpp	/^        char *grouping;$/;"	m	struct:lconv	file:
has_comparator_	github/leveldb-1.18/db/version_edit.h	/^  bool has_comparator_;$/;"	m	class:leveldb::VersionEdit
has_date_toks	study/Impala/runtime/timestamp-parse-util.h	/^        bool has_date_toks;$/;"	m	struct:impala::DateTimeFormatContext
has_facet	test_getline.cpp	/^        has_facet(const locale& __loc) throw()$/;"	f	namespace:std
has_imm_	github/leveldb-1.18/db/db_impl.h	/^  port::AtomicPointer has_imm_;  \/\/ So bg thread can detect non-NULL imm_$/;"	m	class:leveldb::DBImpl
has_last_sequence_	github/leveldb-1.18/db/version_edit.h	/^  bool has_last_sequence_;$/;"	m	class:leveldb::VersionEdit
has_log_number_	github/leveldb-1.18/db/version_edit.h	/^  bool has_log_number_;$/;"	m	class:leveldb::VersionEdit
has_next_file_number_	github/leveldb-1.18/db/version_edit.h	/^  bool has_next_file_number_;$/;"	m	class:leveldb::VersionEdit
has_prev_log_number_	github/leveldb-1.18/db/version_edit.h	/^  bool has_prev_log_number_;$/;"	m	class:leveldb::VersionEdit
has_time_toks	study/Impala/runtime/timestamp-parse-util.h	/^        bool has_time_toks;$/;"	m	struct:impala::DateTimeFormatContext
hash	github/leveldb-1.18/db/skiplist_test.cc	/^  static uint64_t hash(Key key) { return key & 0xff; }$/;"	f	class:leveldb::ConcurrentTest	file:
hash	github/leveldb-1.18/util/cache.cc	/^  uint32_t hash;      \/\/ Hash of key(); used for fast sharding and comparisons$/;"	m	struct:leveldb::__anon27::LRUHandle	file:
hash	test_getline.cpp	/^                hash(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate
hash_value	study/Impala/runtime/timestamp-value.h	/^    inline std::size_t hash_value(const TimestampValue& v) {$/;"	f	namespace:impala
head_	github/leveldb-1.18/db/skiplist.h	/^  Node* const head_;$/;"	m	class:leveldb::SkipList
heap_allocated	github/leveldb-1.18/table/format.h	/^  bool heap_allocated;  \/\/ True iff caller should delete[] data.data()$/;"	m	struct:leveldb::BlockContents
heap_counter_	github/leveldb-1.18/db/db_bench.cc	/^  int heap_counter_;$/;"	m	class:leveldb::Benchmark	file:
height	study/CppPrimer/chap07/class2/Screen.h	/^		pos height		= 0,	width	= 0;$/;"	m	class:Screen
hex	test_getline.cpp	/^            static const fmtflags hex = _S_hex;$/;"	m	class:std::ios_base	file:
hex	test_getline.cpp	/^        hex(ios_base& __base)$/;"	f	namespace:std
hist_	github/leveldb-1.18/db/db_bench.cc	/^  Histogram hist_;$/;"	m	class:leveldb::__anon7::Stats	file:
hist_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
hist_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
hour	study/Impala/runtime/timestamp-parse-util.cpp	/^  int hour;$/;"	m	struct:impala::DateTimeParseResult	file:
hour	study/dada/clock_struct/clock.h	/^	int hour;$/;"	m	struct:Time
i_num	work/test_job/day12/data_packet/include/BakPacket.h	/^	int 	i_num;$/;"	m	struct:BakPacket
i_num	work/test_job/day16/data_packet/include/BakPacket.h	/^		int 	i_num;$/;"	m	class:BakPacket
i_num	work/test_job/day17/data_packet/include/BakPacket.h	/^	int 	i_num;$/;"	m	struct:BakPacket_
i_vec	work/test_job/day16/data_packet/include/DataPacket.h	/^		vector<int> 		i_vec;$/;"	m	class:DataPacket
icmp_	github/leveldb-1.18/db/repair.cc	/^  InternalKeyComparator const icmp_;$/;"	m	class:leveldb::__anon5::Repairer	file:
icmp_	github/leveldb-1.18/db/version_set.cc	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
icmp_	github/leveldb-1.18/db/version_set.h	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::VersionSet
id	github/leveldb-1.18/db/db_test.cc	/^  int id;$/;"	m	struct:leveldb::__anon15::MTThread	file:
id	test_getline.cpp	/^                static locale::id id;$/;"	m	class:std::ctype	file:
id	test_getline.cpp	/^            id() { }$/;"	f	class:std::locale::id
id	test_getline.cpp	/^            static locale::id id;$/;"	m	class:std::collate	file:
id	test_getline.cpp	/^            static locale::id id;$/;"	m	class:std::ctype	file:
id	test_getline.cpp	/^            static locale::id id;$/;"	m	class:std::num_get	file:
id	test_getline.cpp	/^            static locale::id id;$/;"	m	class:std::num_put	file:
id	test_getline.cpp	/^            static locale::id id;$/;"	m	class:std::numpunct	file:
id	test_getline.cpp	/^        locale::id collate<_CharT>::id;$/;"	m	class:std::collate	file:
id	test_getline.cpp	/^        locale::id ctype<_CharT>::id;$/;"	m	class:std::ctype	file:
id	test_getline.cpp	/^        locale::id num_get<_CharT, _InIter>::id;$/;"	m	class:std::num_get	file:
id	test_getline.cpp	/^        locale::id num_put<_CharT, _OutIter>::id;$/;"	m	class:std::num_put	file:
id	test_getline.cpp	/^        locale::id numpunct<_CharT>::id;$/;"	m	class:std::numpunct	file:
id	test_getline.cpp	/^    class locale::id$/;"	c	class:std::locale	file:
id_mutex_	github/leveldb-1.18/util/cache.cc	/^  port::Mutex id_mutex_;$/;"	m	class:leveldb::__anon27::ShardedLRUCache	file:
id_num	test_base_child.cpp	/^        string id_num;$/;"	m	class:Staff	file:
ifstream	test_getline.cpp	/^    typedef basic_ifstream<char> ifstream;$/;"	t	namespace:std	file:
ignore	test_getline.cpp	/^        ignore(streamsize __n)$/;"	f	class:std::basic_istream
ignore	test_getline.cpp	/^        ignore(streamsize __n, int_type __delim)$/;"	f	class:std::basic_istream
ignore	test_getline.cpp	/^        ignore(void)$/;"	f	class:std::basic_istream
imbue	test_getline.cpp	/^                    imbue(const locale&)$/;"	f	class:std::basic_streambuf
imbue	test_getline.cpp	/^        basic_ios<_CharT, _Traits>::imbue(const locale& __loc)$/;"	f	class:std::basic_ios
imbue_event	test_getline.cpp	/^                imbue_event,$/;"	e	enum:std::ios_base::event	file:
imm	github/leveldb-1.18/db/db_impl.cc	/^  MemTable* imm;$/;"	m	struct:leveldb::__anon8::IterState	file:
imm_	github/leveldb-1.18/db/db_impl.h	/^  MemTable* imm_;                \/\/ Memtable being compacted$/;"	m	class:leveldb::DBImpl
impala	study/Impala/runtime/timestamp-parse-util.cpp	/^namespace impala {$/;"	n	file:
impala	study/Impala/runtime/timestamp-parse-util.h	/^namespace impala {$/;"	n
impala	study/Impala/runtime/timestamp-test.cpp	/^namespace impala {$/;"	n	file:
impala	study/Impala/runtime/timestamp-value.cpp	/^namespace impala {$/;"	n	file:
impala	study/Impala/runtime/timestamp-value.h	/^namespace impala {$/;"	n
impala	study/Impala/timestamp_src/timestamp-functions-ir.cpp	/^namespace impala {$/;"	n	file:
impala	study/Impala/timestamp_src/timestamp-functions.cpp	/^namespace impala {$/;"	n	file:
impala	study/Impala/timestamp_src/timestamp-functions.h	/^namespace impala {$/;"	n
in	test_getline.cpp	/^            static const openmode in = _S_in;$/;"	m	class:std::ios_base	file:
in_avail	test_getline.cpp	/^                    in_avail()$/;"	f	class:std::basic_streambuf
increment	study/CppDesign/C06/CLib.cpp	/^const int increment = 100;$/;"	v
index_	github/leveldb-1.18/db/version_set.cc	/^  uint32_t index_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
index_block	github/leveldb-1.18/table/table.cc	/^  Block* index_block;$/;"	m	struct:leveldb::Table::Rep	file:
index_block	github/leveldb-1.18/table/table_builder.cc	/^  BlockBuilder index_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_block_options	github/leveldb-1.18/table/table_builder.cc	/^  Options index_block_options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_handle	github/leveldb-1.18/table/format.h	/^  const BlockHandle& index_handle() const {$/;"	f	class:leveldb::Footer
index_handle_	github/leveldb-1.18/table/format.h	/^  BlockHandle index_handle_;$/;"	m	class:leveldb::Footer
index_iter_	github/leveldb-1.18/table/two_level_iterator.cc	/^  IteratorWrapper index_iter_;$/;"	m	class:leveldb::__anon19::TwoLevelIterator	file:
info	study/List/single-linked/int_s_l_l_node.h	/^        int info;$/;"	m	class:IntSLLNode
info_log	github/leveldb-1.18/include/leveldb/options.h	/^  Logger* info_log;$/;"	m	struct:leveldb::Options
init	test_getline.cpp	/^        basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios
initial_offset_	github/leveldb-1.18/db/log_reader.h	/^  uint64_t const initial_offset_;$/;"	m	class:leveldb::log::Reader
initial_offset_last_record_offsets_	github/leveldb-1.18/db/log_test.cc	/^  static uint64_t initial_offset_last_record_offsets_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_last_record_offsets_	github/leveldb-1.18/db/log_test.cc	/^uint64_t LogTest::initial_offset_last_record_offsets_[] =$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	github/leveldb-1.18/db/log_test.cc	/^  static size_t initial_offset_record_sizes_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	github/leveldb-1.18/db/log_test.cc	/^size_t LogTest::initial_offset_record_sizes_[] =$/;"	m	class:leveldb::log::LogTest	file:
initialize	study/CppDesign/C06/CLib.cpp	/^void initialize(CStash* s, int sz) {$/;"	f
initialized_	study/Impala/runtime/timestamp-parse-util.cpp	/^bool TimestampParser::initialized_ = false;$/;"	m	class:impala::TimestampParser	file:
initialized_	study/Impala/runtime/timestamp-parse-util.h	/^            static bool initialized_;$/;"	m	class:impala::TimestampParser
input	github/leveldb-1.18/db/version_set.h	/^  FileMetaData* input(int which, int i) const { return inputs_[which][i]; }$/;"	f	class:leveldb::Compaction
input_iterator_tag	test_getline.cpp	/^    struct input_iterator_tag { };$/;"	s	namespace:std	file:
input_version_	github/leveldb-1.18/db/version_set.h	/^  Version* input_version_;$/;"	m	class:leveldb::Compaction
inputs_	github/leveldb-1.18/db/version_set.h	/^  std::vector<FileMetaData*> inputs_[2];      \/\/ The two sets of inputs$/;"	m	class:leveldb::Compaction
insert	test_getline.cpp	/^                insert(iterator __p, _CharT __c)$/;"	f	class:std::basic_string
insert	test_getline.cpp	/^                insert(iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string
insert	test_getline.cpp	/^                insert(iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string
insert	test_getline.cpp	/^                insert(size_type __pos, const _CharT* __s)$/;"	f	class:std::basic_string
insert	test_getline.cpp	/^                insert(size_type __pos, size_type __n, _CharT __c)$/;"	f	class:std::basic_string
insert	test_getline.cpp	/^                insert(size_type __pos1, const basic_string& __str)$/;"	f	class:std::basic_string
insert	test_getline.cpp	/^                insert(size_type __pos1, const basic_string& __str,$/;"	f	class:std::basic_string
insert	test_getline.cpp	/^        insert(size_type __pos, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string
insert_iterator	test_getline.cpp	/^                insert_iterator(_Container& __x, typename _Container::iterator __i)$/;"	f	class:std::insert_iterator
insert_iterator	test_getline.cpp	/^        class insert_iterator$/;"	c	namespace:std	file:
inserter	test_getline.cpp	/^        inserter(_Container& __x, _Iterator __i)$/;"	f	namespace:std
int16_t	github/leveldb-1.18/port/win/stdint.h	/^typedef signed short          int16_t;$/;"	t
int32_t	github/leveldb-1.18/port/win/stdint.h	/^typedef signed int            int32_t;$/;"	t
int64_t	github/leveldb-1.18/port/win/stdint.h	/^typedef signed long long      int64_t;$/;"	t
int8_t	github/leveldb-1.18/port/win/stdint.h	/^typedef signed char           int8_t;$/;"	t
int_curr_symbol	test_getline.cpp	/^        char *int_curr_symbol;$/;"	m	struct:lconv	file:
int_frac_digits	test_getline.cpp	/^        char int_frac_digits;$/;"	m	struct:lconv	file:
int_n_cs_precedes	test_getline.cpp	/^        char int_n_cs_precedes;$/;"	m	struct:lconv	file:
int_n_sep_by_space	test_getline.cpp	/^        char int_n_sep_by_space;$/;"	m	struct:lconv	file:
int_n_sign_posn	test_getline.cpp	/^        char int_n_sign_posn;$/;"	m	struct:lconv	file:
int_p_cs_precedes	test_getline.cpp	/^        char int_p_cs_precedes;$/;"	m	struct:lconv	file:
int_p_sep_by_space	test_getline.cpp	/^        char int_p_sep_by_space;$/;"	m	struct:lconv	file:
int_p_sign_posn	test_getline.cpp	/^        char int_p_sign_posn;$/;"	m	struct:lconv	file:
int_type	test_getline.cpp	/^                typedef typename traits_type::int_type int_type;$/;"	t	class:std::basic_streambuf	file:
int_type	test_getline.cpp	/^            typedef int int_type;$/;"	t	struct:std::char_traits	file:
int_type	test_getline.cpp	/^            typedef typename _Char_types<_CharT>::int_type int_type;$/;"	t	struct:__gnu_cxx::char_traits	file:
int_type	test_getline.cpp	/^            typedef typename _Traits::int_type int_type;$/;"	t	class:std::basic_ios	file:
int_type	test_getline.cpp	/^            typedef typename _Traits::int_type int_type;$/;"	t	class:std::basic_iostream	file:
int_type	test_getline.cpp	/^            typedef typename _Traits::int_type int_type;$/;"	t	class:std::basic_istream	file:
int_type	test_getline.cpp	/^            typedef typename _Traits::int_type int_type;$/;"	t	class:std::basic_ostream	file:
int_type	test_getline.cpp	/^            typedef typename _Traits::int_type int_type;$/;"	t	class:std::istreambuf_iterator	file:
int_type	test_getline.cpp	/^            typedef unsigned long int_type;$/;"	t	struct:__gnu_cxx::_Char_types	file:
int_type	test_getline.cpp	/^            typedef wint_t int_type;$/;"	t	struct:std::char_traits	file:
internal	test_getline.cpp	/^            static const fmtflags internal = _S_internal;$/;"	m	class:std::ios_base	file:
internal	test_getline.cpp	/^        internal(ios_base& __base)$/;"	f	namespace:std
internal_comparator	github/leveldb-1.18/db/version_set.cc	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::Builder::BySmallestKey	file:
internal_comparator_	github/leveldb-1.18/db/db_impl.h	/^  const InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::DBImpl
internal_comparator_	github/leveldb-1.18/table/table_test.cc	/^  InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::MemTableConstructor	file:
internal_filter_policy_	github/leveldb-1.18/db/db_impl.h	/^  const InternalFilterPolicy internal_filter_policy_;$/;"	m	class:leveldb::DBImpl
internal_key	github/leveldb-1.18/db/dbformat.h	/^  Slice internal_key() const { return Slice(kstart_, end_ - kstart_); }$/;"	f	class:leveldb::LookupKey
intptr_t	test_getline.cpp	/^    typedef __intptr_t intptr_t;$/;"	t	file:
io_state	test_getline.cpp	/^            typedef int io_state;$/;"	t	class:std::ios_base	file:
ios	test_getline.cpp	/^    typedef basic_ios<char> ios;$/;"	t	namespace:std	file:
ios_base	test_getline.cpp	/^    class ios_base$/;"	c	namespace:std	file:
iostate	test_getline.cpp	/^            typedef _Ios_Iostate iostate;$/;"	t	class:std::ios_base	file:
iostream	test_getline.cpp	/^    typedef basic_iostream<char> iostream;$/;"	t	namespace:std	file:
ipolicy_	github/leveldb-1.18/db/repair.cc	/^  InternalFilterPolicy const ipolicy_;$/;"	m	class:leveldb::__anon5::Repairer	file:
is	test_getline.cpp	/^                is(const char_type *__lo, const char_type *__hi, mask *__vec) const$/;"	f	class:std::__ctype_abstract_base
is	test_getline.cpp	/^                is(mask __m, char_type __c) const$/;"	f	class:std::__ctype_abstract_base
is	test_getline.cpp	/^        is(const char* __low, const char* __high, mask* __vec) const$/;"	f	class:std::ctype
is	test_getline.cpp	/^        is(mask __m, char __c) const$/;"	f	class:std::ctype
is_default	github/leveldb-1.18/db/c.cc	/^  bool is_default;$/;"	m	struct:leveldb_env_t	file:
isalnum	test_getline.cpp	/^        isalnum(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isalpha	test_getline.cpp	/^        isalpha(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isbn	study/CppPrimer/chap07/class1/Sales_data.h	/^		string isbn() const { return bookNo; }$/;"	f	class:Sales_data
iscntrl	test_getline.cpp	/^        iscntrl(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isdigit	test_getline.cpp	/^        isdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isgraph	test_getline.cpp	/^        isgraph(_CharT __c, const locale& __loc)$/;"	f	namespace:std
islower	test_getline.cpp	/^        islower(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isprint	test_getline.cpp	/^        isprint(_CharT __c, const locale& __loc)$/;"	f	namespace:std
ispunct	test_getline.cpp	/^        ispunct(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isspace	test_getline.cpp	/^        isspace(_CharT __c, const locale& __loc)$/;"	f	namespace:std
istream	test_getline.cpp	/^    typedef basic_istream<char> istream;$/;"	t	namespace:std	file:
istream_type	test_getline.cpp	/^            typedef basic_istream<_CharT, _Traits> istream_type;$/;"	t	class:std::istreambuf_iterator	file:
istreambuf_iterator	test_getline.cpp	/^            istreambuf_iterator() throw()$/;"	f	class:std::istreambuf_iterator
istreambuf_iterator	test_getline.cpp	/^            istreambuf_iterator(istream_type& __s) throw()$/;"	f	class:std::istreambuf_iterator
istreambuf_iterator	test_getline.cpp	/^            istreambuf_iterator(streambuf_type* __s) throw()$/;"	f	class:std::istreambuf_iterator
istreambuf_iterator	test_getline.cpp	/^        class istreambuf_iterator$/;"	c	namespace:std	file:
istringstream	test_getline.cpp	/^    typedef basic_istringstream<char> istringstream;$/;"	t	namespace:std	file:
isupper	test_getline.cpp	/^        isupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std
isxdigit	test_getline.cpp	/^        isxdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std
it_interval	test_getline.cpp	/^        struct timespec it_interval;$/;"	m	struct:itimerspec	typeref:struct:itimerspec::timespec	file:
it_value	test_getline.cpp	/^        struct timespec it_value;$/;"	m	struct:itimerspec	typeref:struct:itimerspec::timespec	file:
iter	github/leveldb-1.18/table/iterator_wrapper.h	/^  Iterator* iter() const { return iter_; }$/;"	f	class:leveldb::IteratorWrapper
iter	test_getline.cpp	/^                typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	file:
iter_	github/leveldb-1.18/db/db_iter.cc	/^  Iterator* const iter_;$/;"	m	class:leveldb::__anon10::DBIter	file:
iter_	github/leveldb-1.18/db/db_test.cc	/^    KVMap::const_iterator iter_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
iter_	github/leveldb-1.18/db/memtable.cc	/^  MemTable::Table::Iterator iter_;$/;"	m	class:leveldb::MemTableIterator	file:
iter_	github/leveldb-1.18/table/iterator_wrapper.h	/^  Iterator* iter_;$/;"	m	class:leveldb::IteratorWrapper
iter_	github/leveldb-1.18/table/table_test.cc	/^  Iterator* iter_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
iter_swap	test_getline.cpp	/^                iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	struct:std::__iter_swap
iter_swap	test_getline.cpp	/^        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	namespace:std
iter_type	test_getline.cpp	/^            typedef _InIter iter_type;$/;"	t	class:std::num_get	file:
iter_type	test_getline.cpp	/^            typedef _OutIter iter_type;$/;"	t	class:std::num_put	file:
iterator	test_getline.cpp	/^            struct iterator$/;"	s	namespace:std	file:
iterator	test_getline.cpp	/^            typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;$/;"	t	class:std::basic_string	file:
iterator_category	test_getline.cpp	/^                    iterator_category;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
iterator_category	test_getline.cpp	/^                typedef _Category iterator_category;$/;"	t	struct:std::iterator	file:
iterator_category	test_getline.cpp	/^            typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	file:
iterator_category	test_getline.cpp	/^            typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::iterator_traits	file:
iterator_traits	test_getline.cpp	/^        struct iterator_traits$/;"	s	namespace:std	file:
iterator_traits	test_getline.cpp	/^        struct iterator_traits<_Tp*>$/;"	s	namespace:std	file:
iterator_traits	test_getline.cpp	/^        struct iterator_traits<const _Tp*>$/;"	s	namespace:std	file:
iterator_type	test_getline.cpp	/^                typedef _Iterator iterator_type;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
iterator_type	test_getline.cpp	/^            typedef _Iterator iterator_type;$/;"	t	class:std::reverse_iterator	file:
itimerspec	test_getline.cpp	/^    struct itimerspec$/;"	s	file:
itsAge	study/dada/static/statics.cpp	/^		int itsAge;$/;"	m	class:Cat	file:
iword	test_getline.cpp	/^                iword(int __ix)$/;"	f	class:std::ios_base
job_num	test_base_child.cpp	/^        string job_num;$/;"	m	class:Staff	file:
judge	study/test/test.cpp	/^union judge {$/;"	u	file:
judgeString	work/person_design/src/judge_string.cpp	/^void judgeString(string temp_str) {$/;"	f
kBadRecord	github/leveldb-1.18/db/log_reader.h	/^    kBadRecord = kMaxRecordType + 2$/;"	e	enum:leveldb::log::Reader::__anon9
kBlockSize	github/leveldb-1.18/db/log_format.h	/^static const int kBlockSize = 32768;$/;"	m	namespace:leveldb::log
kBlockSize	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  enum { kBlockSize = 8 * 1024 };$/;"	e	enum:leveldb::__anon25::FileState::__anon26	file:
kBlockSize	github/leveldb-1.18/util/arena.cc	/^static const int kBlockSize = 4096;$/;"	m	namespace:leveldb	file:
kBlockTrailerSize	github/leveldb-1.18/table/format.h	/^static const size_t kBlockTrailerSize = 5;$/;"	m	namespace:leveldb
kBucketLimit	github/leveldb-1.18/util/histogram.cc	/^const double Histogram::kBucketLimit[kNumBuckets] = {$/;"	m	class:leveldb::Histogram	file:
kBucketLimit	github/leveldb-1.18/util/histogram.h	/^  static const double kBucketLimit[kNumBuckets];$/;"	m	class:leveldb::Histogram
kCacheSize	github/leveldb-1.18/util/cache_test.cc	/^  static const int kCacheSize = 1000;$/;"	m	class:leveldb::CacheTest	file:
kCompactPointer	github/leveldb-1.18/db/version_edit.cc	/^  kCompactPointer       = 5,$/;"	e	enum:leveldb::Tag	file:
kComparator	github/leveldb-1.18/db/version_edit.cc	/^  kComparator           = 1,$/;"	e	enum:leveldb::Tag	file:
kCorrupt	github/leveldb-1.18/db/version_set.cc	/^  kCorrupt,$/;"	e	enum:leveldb::__anon11::SaverState	file:
kCorruption	github/leveldb-1.18/include/leveldb/status.h	/^    kCorruption = 2,$/;"	e	enum:leveldb::Status::Code
kCount	github/leveldb-1.18/db/autocompact_test.cc	/^static const int kCount = kTotalSize \/ kValueSize;$/;"	m	namespace:leveldb	file:
kCurrentFile	github/leveldb-1.18/db/filename.h	/^  kCurrentFile,$/;"	e	enum:leveldb::FileType
kDBLockFile	github/leveldb-1.18/db/filename.h	/^  kDBLockFile,$/;"	e	enum:leveldb::FileType
kDefault	github/leveldb-1.18/db/db_test.cc	/^    kDefault,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kDelayMicros	github/leveldb-1.18/util/env_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb	file:
kDeleted	github/leveldb-1.18/db/version_set.cc	/^  kDeleted,$/;"	e	enum:leveldb::__anon11::SaverState	file:
kDeletedFile	github/leveldb-1.18/db/version_edit.cc	/^  kDeletedFile          = 6,$/;"	e	enum:leveldb::Tag	file:
kDescriptorFile	github/leveldb-1.18/db/filename.h	/^  kDescriptorFile,$/;"	e	enum:leveldb::FileType
kEncodedLength	github/leveldb-1.18/table/format.h	/^    kEncodedLength = 2*BlockHandle::kMaxEncodedLength + 8$/;"	e	enum:leveldb::Footer::__anon24
kEnd	github/leveldb-1.18/db/db_test.cc	/^    kEnd$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kEof	github/leveldb-1.18/db/log_reader.h	/^    kEof = kMaxRecordType + 1,$/;"	e	enum:leveldb::log::Reader::__anon9
kExpandedCompactionByteSizeLimit	github/leveldb-1.18/db/version_set.cc	/^static const int64_t kExpandedCompactionByteSizeLimit = 25 * kTargetFileSize;$/;"	m	namespace:leveldb	file:
kFilter	github/leveldb-1.18/db/db_test.cc	/^    kFilter,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kFilterBase	github/leveldb-1.18/table/filter_block.cc	/^static const size_t kFilterBase = 1 << kFilterBaseLg;$/;"	m	namespace:leveldb	file:
kFilterBaseLg	github/leveldb-1.18/table/filter_block.cc	/^static const size_t kFilterBaseLg = 11;$/;"	m	namespace:leveldb	file:
kFirstType	github/leveldb-1.18/db/log_format.h	/^  kFirstType = 2,$/;"	e	enum:leveldb::log::RecordType
kForward	github/leveldb-1.18/db/db_iter.cc	/^    kForward,$/;"	e	enum:leveldb::__anon10::DBIter::Direction	file:
kForward	github/leveldb-1.18/table/merger.cc	/^    kForward,$/;"	e	enum:leveldb::__anon20::MergingIterator::Direction	file:
kFound	github/leveldb-1.18/db/version_set.cc	/^  kFound,$/;"	e	enum:leveldb::__anon11::SaverState	file:
kFullType	github/leveldb-1.18/db/log_format.h	/^  kFullType = 1,$/;"	e	enum:leveldb::log::RecordType
kHeader	github/leveldb-1.18/db/write_batch.cc	/^static const size_t kHeader = 12;$/;"	m	namespace:leveldb	file:
kHeaderSize	github/leveldb-1.18/db/log_format.h	/^static const int kHeaderSize = 4 + 2 + 1;$/;"	m	namespace:leveldb::log
kIOError	github/leveldb-1.18/include/leveldb/status.h	/^    kIOError = 5$/;"	e	enum:leveldb::Status::Code
kInfoLogFile	github/leveldb-1.18/db/filename.h	/^  kInfoLogFile  \/\/ Either the current one, or an old one$/;"	e	enum:leveldb::FileType
kInvalidArgument	github/leveldb-1.18/include/leveldb/status.h	/^    kInvalidArgument = 4,$/;"	e	enum:leveldb::Status::Code
kL0_CompactionTrigger	github/leveldb-1.18/db/dbformat.h	/^static const int kL0_CompactionTrigger = 4;$/;"	m	namespace:leveldb::config
kL0_SlowdownWritesTrigger	github/leveldb-1.18/db/dbformat.h	/^static const int kL0_SlowdownWritesTrigger = 8;$/;"	m	namespace:leveldb::config
kL0_StopWritesTrigger	github/leveldb-1.18/db/dbformat.h	/^static const int kL0_StopWritesTrigger = 12;$/;"	m	namespace:leveldb::config
kLastSequence	github/leveldb-1.18/db/version_edit.cc	/^  kLastSequence         = 4,$/;"	e	enum:leveldb::Tag	file:
kLastType	github/leveldb-1.18/db/log_format.h	/^  kLastType = 4$/;"	e	enum:leveldb::log::RecordType
kLittleEndian	github/leveldb-1.18/port/port_example.h	/^static const bool kLittleEndian = true \/* or some other expression *\/;$/;"	m	namespace:leveldb::port
kLittleEndian	github/leveldb-1.18/port/port_posix.h	/^static const bool kLittleEndian = PLATFORM_IS_LITTLE_ENDIAN;$/;"	m	namespace:leveldb::port
kLogFile	github/leveldb-1.18/db/filename.h	/^  kLogFile,$/;"	e	enum:leveldb::FileType
kLogNumber	github/leveldb-1.18/db/version_edit.cc	/^  kLogNumber            = 2,$/;"	e	enum:leveldb::Tag	file:
kMajorVersion	github/leveldb-1.18/include/leveldb/db.h	/^static const int kMajorVersion = 1;$/;"	m	namespace:leveldb
kMaskDelta	github/leveldb-1.18/util/crc32c.h	/^static const uint32_t kMaskDelta = 0xa282ead8ul;$/;"	m	namespace:leveldb::crc32c
kMaxEncodedLength	github/leveldb-1.18/table/format.h	/^  enum { kMaxEncodedLength = 10 + 10 };$/;"	e	enum:leveldb::BlockHandle::__anon23
kMaxGrandParentOverlapBytes	github/leveldb-1.18/db/version_set.cc	/^static const int64_t kMaxGrandParentOverlapBytes = 10 * kTargetFileSize;$/;"	m	namespace:leveldb	file:
kMaxHeight	github/leveldb-1.18/db/skiplist.h	/^  enum { kMaxHeight = 12 };$/;"	e	enum:leveldb::SkipList::__anon6
kMaxMemCompactLevel	github/leveldb-1.18/db/dbformat.h	/^static const int kMaxMemCompactLevel = 2;$/;"	m	namespace:leveldb::config
kMaxRecordType	github/leveldb-1.18/db/log_format.h	/^static const int kMaxRecordType = kLastType;$/;"	m	namespace:leveldb::log
kMaxSequenceNumber	github/leveldb-1.18/db/dbformat.h	/^static const SequenceNumber kMaxSequenceNumber =$/;"	m	namespace:leveldb
kMiddleType	github/leveldb-1.18/db/log_format.h	/^  kMiddleType = 3,$/;"	e	enum:leveldb::log::RecordType
kMinorVersion	github/leveldb-1.18/include/leveldb/db.h	/^static const int kMinorVersion = 18;$/;"	m	namespace:leveldb
kNewFile	github/leveldb-1.18/db/version_edit.cc	/^  kNewFile              = 7,$/;"	e	enum:leveldb::Tag	file:
kNextFileNumber	github/leveldb-1.18/db/version_edit.cc	/^  kNextFileNumber       = 3,$/;"	e	enum:leveldb::Tag	file:
kNoCompression	github/leveldb-1.18/include/leveldb/options.h	/^  kNoCompression     = 0x0,$/;"	e	enum:leveldb::CompressionType
kNotFound	github/leveldb-1.18/db/version_set.cc	/^  kNotFound,$/;"	e	enum:leveldb::__anon11::SaverState	file:
kNotFound	github/leveldb-1.18/include/leveldb/status.h	/^    kNotFound = 1,$/;"	e	enum:leveldb::Status::Code
kNotSupported	github/leveldb-1.18/include/leveldb/status.h	/^    kNotSupported = 3,$/;"	e	enum:leveldb::Status::Code
kNumBuckets	github/leveldb-1.18/util/histogram.h	/^  enum { kNumBuckets = 154 };$/;"	e	enum:leveldb::Histogram::__anon28
kNumKeys	github/leveldb-1.18/db/db_test.cc	/^static const int kNumKeys = 1000;$/;"	m	namespace:leveldb::__anon15	file:
kNumKeys	github/leveldb-1.18/issues/issue178_test.cc	/^const int kNumKeys = 1100000;$/;"	m	namespace:__anon4	file:
kNumLevels	github/leveldb-1.18/db/dbformat.h	/^static const int kNumLevels = 7;$/;"	m	namespace:leveldb::config
kNumNonTableCacheFiles	github/leveldb-1.18/db/db_impl.cc	/^const int kNumNonTableCacheFiles = 10;$/;"	m	namespace:leveldb	file:
kNumShardBits	github/leveldb-1.18/util/cache.cc	/^static const int kNumShardBits = 4;$/;"	m	namespace:leveldb::__anon27	file:
kNumShards	github/leveldb-1.18/util/cache.cc	/^static const int kNumShards = 1 << kNumShardBits;$/;"	m	namespace:leveldb::__anon27	file:
kNumTestArgs	github/leveldb-1.18/table/table_test.cc	/^static const int kNumTestArgs = sizeof(kTestArgList) \/ sizeof(kTestArgList[0]);$/;"	m	namespace:leveldb	file:
kNumThreads	github/leveldb-1.18/db/db_test.cc	/^static const int kNumThreads = 4;$/;"	m	namespace:leveldb::__anon15	file:
kOk	github/leveldb-1.18/include/leveldb/status.h	/^    kOk = 0,$/;"	e	enum:leveldb::Status::Code
kPrevLogNumber	github/leveldb-1.18/db/version_edit.cc	/^  kPrevLogNumber        = 9$/;"	e	enum:leveldb::Tag	file:
kReadBytesPeriod	github/leveldb-1.18/db/dbformat.h	/^static const int kReadBytesPeriod = 1048576;$/;"	m	namespace:leveldb::config
kReverse	github/leveldb-1.18/db/db_iter.cc	/^    kReverse$/;"	e	enum:leveldb::__anon10::DBIter::Direction	file:
kReverse	github/leveldb-1.18/table/merger.cc	/^    kReverse$/;"	e	enum:leveldb::__anon20::MergingIterator::Direction	file:
kSnappyCompression	github/leveldb-1.18/include/leveldb/options.h	/^  kSnappyCompression = 0x1$/;"	e	enum:leveldb::CompressionType
kTableFile	github/leveldb-1.18/db/filename.h	/^  kTableFile,$/;"	e	enum:leveldb::FileType
kTableMagicNumber	github/leveldb-1.18/table/format.h	/^static const uint64_t kTableMagicNumber = 0xdb4775248b80fb57ull;$/;"	m	namespace:leveldb
kTargetFileSize	github/leveldb-1.18/db/version_set.cc	/^static const int kTargetFileSize = 2 * 1048576;$/;"	m	namespace:leveldb	file:
kTempFile	github/leveldb-1.18/db/filename.h	/^  kTempFile,$/;"	e	enum:leveldb::FileType
kTestArgList	github/leveldb-1.18/table/table_test.cc	/^static const TestArgs kTestArgList[] = {$/;"	m	namespace:leveldb	file:
kTestSeconds	github/leveldb-1.18/db/db_test.cc	/^static const int kTestSeconds = 10;$/;"	m	namespace:leveldb::__anon15	file:
kTotalSize	github/leveldb-1.18/db/autocompact_test.cc	/^static const int kTotalSize = 100 * 1024 * 1024;$/;"	m	namespace:leveldb	file:
kTypeDeletion	github/leveldb-1.18/db/dbformat.h	/^  kTypeDeletion = 0x0,$/;"	e	enum:leveldb::ValueType
kTypeValue	github/leveldb-1.18/db/dbformat.h	/^  kTypeValue = 0x1$/;"	e	enum:leveldb::ValueType
kUncompressed	github/leveldb-1.18/db/db_test.cc	/^    kUncompressed,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kValueSize	github/leveldb-1.18/db/autocompact_test.cc	/^static const int kValueSize = 200 * 1024;$/;"	m	namespace:leveldb	file:
kValueSize	github/leveldb-1.18/db/corruption_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueTypeForSeek	github/leveldb-1.18/db/dbformat.h	/^static const ValueType kValueTypeForSeek = kTypeValue;$/;"	m	namespace:leveldb
kVerbose	github/leveldb-1.18/util/bloom_test.cc	/^static const int kVerbose = 1;$/;"	m	namespace:leveldb	file:
kZeroType	github/leveldb-1.18/db/log_format.h	/^  kZeroType = 0,$/;"	e	enum:leveldb::log::RecordType
k_	github/leveldb-1.18/util/bloom.cc	/^  size_t k_;$/;"	m	class:leveldb::__anon31::BloomFilterPolicy	file:
key	github/leveldb-1.18/db/db_iter.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon10::DBIter
key	github/leveldb-1.18/db/db_test.cc	/^    virtual Slice key() const { return iter_->first; }$/;"	f	class:leveldb::ModelDB::ModelIter
key	github/leveldb-1.18/db/memtable.cc	/^  virtual Slice key() const { return GetLengthPrefixedSlice(iter_.key()); }$/;"	f	class:leveldb::MemTableIterator
key	github/leveldb-1.18/db/skiplist.h	/^  Key const key;$/;"	m	struct:leveldb::SkipList::Node
key	github/leveldb-1.18/db/skiplist.h	/^inline const Key& SkipList<Key,Comparator>::Iterator::key() const {$/;"	f	class:leveldb::SkipList::Iterator
key	github/leveldb-1.18/db/skiplist_test.cc	/^  static uint64_t key(Key key) { return (key >> 40); }$/;"	f	class:leveldb::ConcurrentTest	file:
key	github/leveldb-1.18/db/version_set.cc	/^  Slice key() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
key	github/leveldb-1.18/table/block.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::Block::Iter
key	github/leveldb-1.18/table/iterator.cc	/^                Slice key() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon18::EmptyIterator
key	github/leveldb-1.18/table/iterator_wrapper.h	/^  Slice key() const         { assert(Valid()); return key_; }$/;"	f	class:leveldb::IteratorWrapper
key	github/leveldb-1.18/table/merger.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon20::MergingIterator
key	github/leveldb-1.18/table/table_test.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::KeyConvertingIterator
key	github/leveldb-1.18/table/two_level_iterator.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
key	github/leveldb-1.18/util/cache.cc	/^  Slice key() const {$/;"	f	struct:leveldb::__anon27::LRUHandle
key_	github/leveldb-1.18/table/block.cc	/^  std::string key_;$/;"	m	class:leveldb::Block::Iter	file:
key_	github/leveldb-1.18/table/iterator_wrapper.h	/^  Slice key_;$/;"	m	class:leveldb::IteratorWrapper
key_data	github/leveldb-1.18/util/cache.cc	/^  char key_data[1];   \/\/ Beginning of key$/;"	m	struct:leveldb::__anon27::LRUHandle	file:
key_length	github/leveldb-1.18/util/cache.cc	/^  size_t key_length;$/;"	m	struct:leveldb::__anon27::LRUHandle	file:
key_match_	github/leveldb-1.18/db/c.cc	/^  unsigned char (*key_match_)($/;"	m	struct:leveldb_filterpolicy_t	file:
keys_	github/leveldb-1.18/table/filter_block.h	/^  std::string keys_;              \/\/ Flattened key contents$/;"	m	class:leveldb::FilterBlockBuilder
keys_	github/leveldb-1.18/util/bloom_test.cc	/^  std::vector<std::string> keys_;$/;"	m	class:leveldb::BloomTest	file:
kstart_	github/leveldb-1.18/db/dbformat.h	/^  const char* kstart_;$/;"	m	class:leveldb::LookupKey
l_num	work/test_job/day12/data_packet/include/BakPacket.h	/^	long 	l_num;$/;"	m	struct:BakPacket
l_num	work/test_job/day16/data_packet/include/BakPacket.h	/^		long 	l_num;$/;"	m	class:BakPacket
l_num	work/test_job/day17/data_packet/include/BakPacket.h	/^	long 	l_num;$/;"	m	struct:BakPacket_
l_vec	work/test_job/day12/data_packet/include/DataPacket.h	/^		vector<long>  	l_vec;$/;"	m	class:DataPacket
l_vec	work/test_job/day16/data_packet/include/DataPacket.h	/^		vector<long>		l_vec; 		$/;"	m	class:DataPacket
l_vec	work/test_job/day17/data_packet/include/DataPacket.h	/^		vector<long>  	l_vec;$/;"	m	class:DataPacket
largest	github/leveldb-1.18/db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
largest	github/leveldb-1.18/db/version_edit.h	/^  InternalKey largest;        \/\/ Largest internal key served by table$/;"	m	struct:leveldb::FileMetaData
last_id_	github/leveldb-1.18/util/cache.cc	/^  uint64_t last_id_;$/;"	m	class:leveldb::__anon27::ShardedLRUCache	file:
last_key	github/leveldb-1.18/table/table_builder.cc	/^  std::string last_key;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
last_key_	github/leveldb-1.18/table/block_builder.h	/^  std::string           last_key_;$/;"	m	class:leveldb::BlockBuilder
last_op_finish_	github/leveldb-1.18/db/db_bench.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::__anon7::Stats	file:
last_op_finish_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_op_finish_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_options_	github/leveldb-1.18/db/db_test.cc	/^  Options last_options_;$/;"	m	class:leveldb::DBTest	file:
last_record_offset_	github/leveldb-1.18/db/log_reader.h	/^  uint64_t last_record_offset_;$/;"	m	class:leveldb::log::Reader
last_sequence_	github/leveldb-1.18/db/version_edit.h	/^  SequenceNumber last_sequence_;$/;"	m	class:leveldb::VersionEdit
last_sequence_	github/leveldb-1.18/db/version_set.h	/^  uint64_t last_sequence_;$/;"	m	class:leveldb::VersionSet
lconv	test_getline.cpp	/^    struct lconv$/;"	s	file:
left	test_getline.cpp	/^            static const fmtflags left = _S_left;$/;"	m	class:std::ios_base	file:
left	test_getline.cpp	/^        left(ios_base& __base)$/;"	f	namespace:std
len	study/Impala/runtime/timestamp-parse-util.h	/^        int len;$/;"	m	struct:impala::DateTimeFormatToken
len	study/dada/overload/array.cpp	/^		int len;$/;"	m	class:Array	file:
len	study/dada/overload/array_another.cpp	/^		int len;$/;"	m	class:Array	file:
length	test_getline.cpp	/^                length() const$/;"	f	class:std::basic_string
length	test_getline.cpp	/^                length(const char_type* __s)$/;"	f	struct:std::char_traits
length	test_getline.cpp	/^        length(const char_type* __p)$/;"	f	class:__gnu_cxx::char_traits
length_	github/leveldb-1.18/util/cache.cc	/^  uint32_t length_;$/;"	m	class:leveldb::__anon27::HandleTable	file:
length_	github/leveldb-1.18/util/env_posix.cc	/^  size_t length_;$/;"	m	class:leveldb::__anon32::PosixMmapReadableFile	file:
less	test_getline.cpp	/^        struct less : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
less_equal	test_getline.cpp	/^        struct less_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
level	github/leveldb-1.18/db/db_impl.h	/^    int level;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
level	github/leveldb-1.18/db/version_set.h	/^  int level() const { return level_; }$/;"	f	class:leveldb::Compaction
level_	github/leveldb-1.18/db/version_set.h	/^  int level_;$/;"	m	class:leveldb::Compaction
level_ptrs_	github/leveldb-1.18/db/version_set.h	/^  size_t level_ptrs_[config::kNumLevels];$/;"	m	class:leveldb::Compaction
leveldb	github/leveldb-1.18/db/autocompact_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/builder.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/corruption_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/db_bench.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/db_impl.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/db_impl.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/db_iter.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/db_iter.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/db_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/dbformat.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/dbformat.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/dbformat_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/dumpfile.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/filename.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/filename.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/filename_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/leveldb_main.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/log_format.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/log_reader.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/log_reader.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/log_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/log_writer.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/log_writer.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/memtable.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/memtable.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/repair.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/skiplist.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/skiplist_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/snapshot.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/table_cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/table_cache.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/version_edit.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/version_edit.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/version_edit_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/version_set.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/version_set.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/version_set_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/write_batch.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/db/write_batch_internal.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/db/write_batch_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/helpers/memenv/memenv.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/helpers/memenv/memenv.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/include/leveldb/cache.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/comparator.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/db.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/dumpfile.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/env.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/filter_policy.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/iterator.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/options.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/slice.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/status.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/table.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/table_builder.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/include/leveldb/write_batch.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/issues/issue200_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/port/atomic_pointer.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/port/port_example.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/port/port_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/port/port_posix.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/table/block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/table/block.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/table/block_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/table/block_builder.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/table/filter_block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/table/filter_block.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/table/filter_block_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/table/format.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/table/format.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/table/iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/table/iterator_wrapper.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/table/merger.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/table/merger.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/table/table.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/table/table_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/table/table_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/table/two_level_iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/table/two_level_iterator.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/util/arena.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/arena.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/util/arena_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/bloom.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/bloom_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/cache_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/coding.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/coding.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/util/coding_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/comparator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/crc32c.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/crc32c.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/util/crc32c_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/env.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/env_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/env_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/filter_policy.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/hash.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/hash.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/util/hash_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/histogram.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/histogram.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/util/logging.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/logging.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/util/mutexlock.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/util/options.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/posix_logger.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/util/random.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/util/status.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/testharness.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/testharness.h	/^namespace leveldb {$/;"	n
leveldb	github/leveldb-1.18/util/testutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	github/leveldb-1.18/util/testutil.h	/^namespace leveldb {$/;"	n
leveldb_approximate_sizes	github/leveldb-1.18/db/c.cc	/^void leveldb_approximate_sizes($/;"	f
leveldb_cache_create_lru	github/leveldb-1.18/db/c.cc	/^leveldb_cache_t* leveldb_cache_create_lru(size_t capacity) {$/;"	f
leveldb_cache_destroy	github/leveldb-1.18/db/c.cc	/^void leveldb_cache_destroy(leveldb_cache_t* cache) {$/;"	f
leveldb_cache_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	s	file:
leveldb_cache_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_cache_t         leveldb_cache_t;$/;"	t	typeref:struct:leveldb_cache_t
leveldb_close	github/leveldb-1.18/db/c.cc	/^void leveldb_close(leveldb_t* db) {$/;"	f
leveldb_compact_range	github/leveldb-1.18/db/c.cc	/^void leveldb_compact_range($/;"	f
leveldb_comparator_create	github/leveldb-1.18/db/c.cc	/^leveldb_comparator_t* leveldb_comparator_create($/;"	f
leveldb_comparator_destroy	github/leveldb-1.18/db/c.cc	/^void leveldb_comparator_destroy(leveldb_comparator_t* cmp) {$/;"	f
leveldb_comparator_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_comparator_t : public Comparator {$/;"	s	file:
leveldb_comparator_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_comparator_t    leveldb_comparator_t;$/;"	t	typeref:struct:leveldb_comparator_t
leveldb_create_default_env	github/leveldb-1.18/db/c.cc	/^leveldb_env_t* leveldb_create_default_env() {$/;"	f
leveldb_create_iterator	github/leveldb-1.18/db/c.cc	/^leveldb_iterator_t* leveldb_create_iterator($/;"	f
leveldb_create_snapshot	github/leveldb-1.18/db/c.cc	/^const leveldb_snapshot_t* leveldb_create_snapshot($/;"	f
leveldb_delete	github/leveldb-1.18/db/c.cc	/^void leveldb_delete($/;"	f
leveldb_destroy_db	github/leveldb-1.18/db/c.cc	/^void leveldb_destroy_db($/;"	f
leveldb_env_destroy	github/leveldb-1.18/db/c.cc	/^void leveldb_env_destroy(leveldb_env_t* env) {$/;"	f
leveldb_env_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_env_t {$/;"	s	file:
leveldb_env_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_env_t           leveldb_env_t;$/;"	t	typeref:struct:leveldb_env_t
leveldb_filelock_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	s	file:
leveldb_filelock_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_filelock_t      leveldb_filelock_t;$/;"	t	typeref:struct:leveldb_filelock_t
leveldb_filterpolicy_create	github/leveldb-1.18/db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create($/;"	f
leveldb_filterpolicy_create_bloom	github/leveldb-1.18/db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int bits_per_key) {$/;"	f
leveldb_filterpolicy_destroy	github/leveldb-1.18/db/c.cc	/^void leveldb_filterpolicy_destroy(leveldb_filterpolicy_t* filter) {$/;"	f
leveldb_filterpolicy_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_filterpolicy_t : public FilterPolicy {$/;"	s	file:
leveldb_filterpolicy_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_filterpolicy_t  leveldb_filterpolicy_t;$/;"	t	typeref:struct:leveldb_filterpolicy_t
leveldb_free	github/leveldb-1.18/db/c.cc	/^void leveldb_free(void* ptr) {$/;"	f
leveldb_get	github/leveldb-1.18/db/c.cc	/^char* leveldb_get($/;"	f
leveldb_iter_destroy	github/leveldb-1.18/db/c.cc	/^void leveldb_iter_destroy(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_get_error	github/leveldb-1.18/db/c.cc	/^void leveldb_iter_get_error(const leveldb_iterator_t* iter, char** errptr) {$/;"	f
leveldb_iter_key	github/leveldb-1.18/db/c.cc	/^const char* leveldb_iter_key(const leveldb_iterator_t* iter, size_t* klen) {$/;"	f
leveldb_iter_next	github/leveldb-1.18/db/c.cc	/^void leveldb_iter_next(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_prev	github/leveldb-1.18/db/c.cc	/^void leveldb_iter_prev(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek	github/leveldb-1.18/db/c.cc	/^void leveldb_iter_seek(leveldb_iterator_t* iter, const char* k, size_t klen) {$/;"	f
leveldb_iter_seek_to_first	github/leveldb-1.18/db/c.cc	/^void leveldb_iter_seek_to_first(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek_to_last	github/leveldb-1.18/db/c.cc	/^void leveldb_iter_seek_to_last(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_valid	github/leveldb-1.18/db/c.cc	/^unsigned char leveldb_iter_valid(const leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_value	github/leveldb-1.18/db/c.cc	/^const char* leveldb_iter_value(const leveldb_iterator_t* iter, size_t* vlen) {$/;"	f
leveldb_iterator_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	s	file:
leveldb_iterator_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_iterator_t      leveldb_iterator_t;$/;"	t	typeref:struct:leveldb_iterator_t
leveldb_logger_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	s	file:
leveldb_logger_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_logger_t        leveldb_logger_t;$/;"	t	typeref:struct:leveldb_logger_t
leveldb_major_version	github/leveldb-1.18/db/c.cc	/^int leveldb_major_version() {$/;"	f
leveldb_minor_version	github/leveldb-1.18/db/c.cc	/^int leveldb_minor_version() {$/;"	f
leveldb_no_compression	github/leveldb-1.18/include/leveldb/c.h	/^  leveldb_no_compression = 0,$/;"	e	enum:__anon1
leveldb_open	github/leveldb-1.18/db/c.cc	/^leveldb_t* leveldb_open($/;"	f
leveldb_options_create	github/leveldb-1.18/db/c.cc	/^leveldb_options_t* leveldb_options_create() {$/;"	f
leveldb_options_destroy	github/leveldb-1.18/db/c.cc	/^void leveldb_options_destroy(leveldb_options_t* options) {$/;"	f
leveldb_options_set_block_restart_interval	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_block_restart_interval(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_block_size	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_block_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_set_cache	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_cache(leveldb_options_t* opt, leveldb_cache_t* c) {$/;"	f
leveldb_options_set_comparator	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_comparator($/;"	f
leveldb_options_set_compression	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_compression(leveldb_options_t* opt, int t) {$/;"	f
leveldb_options_set_create_if_missing	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_create_if_missing($/;"	f
leveldb_options_set_env	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_env(leveldb_options_t* opt, leveldb_env_t* env) {$/;"	f
leveldb_options_set_error_if_exists	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_error_if_exists($/;"	f
leveldb_options_set_filter_policy	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_filter_policy($/;"	f
leveldb_options_set_info_log	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_info_log(leveldb_options_t* opt, leveldb_logger_t* l) {$/;"	f
leveldb_options_set_max_open_files	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_max_open_files(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_paranoid_checks	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_paranoid_checks($/;"	f
leveldb_options_set_write_buffer_size	github/leveldb-1.18/db/c.cc	/^void leveldb_options_set_write_buffer_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	s	file:
leveldb_options_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_options_t       leveldb_options_t;$/;"	t	typeref:struct:leveldb_options_t
leveldb_property_value	github/leveldb-1.18/db/c.cc	/^char* leveldb_property_value($/;"	f
leveldb_put	github/leveldb-1.18/db/c.cc	/^void leveldb_put($/;"	f
leveldb_randomfile_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	s	file:
leveldb_randomfile_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_randomfile_t    leveldb_randomfile_t;$/;"	t	typeref:struct:leveldb_randomfile_t
leveldb_readoptions_create	github/leveldb-1.18/db/c.cc	/^leveldb_readoptions_t* leveldb_readoptions_create() {$/;"	f
leveldb_readoptions_destroy	github/leveldb-1.18/db/c.cc	/^void leveldb_readoptions_destroy(leveldb_readoptions_t* opt) {$/;"	f
leveldb_readoptions_set_fill_cache	github/leveldb-1.18/db/c.cc	/^void leveldb_readoptions_set_fill_cache($/;"	f
leveldb_readoptions_set_snapshot	github/leveldb-1.18/db/c.cc	/^void leveldb_readoptions_set_snapshot($/;"	f
leveldb_readoptions_set_verify_checksums	github/leveldb-1.18/db/c.cc	/^void leveldb_readoptions_set_verify_checksums($/;"	f
leveldb_readoptions_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	s	file:
leveldb_readoptions_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_readoptions_t   leveldb_readoptions_t;$/;"	t	typeref:struct:leveldb_readoptions_t
leveldb_release_snapshot	github/leveldb-1.18/db/c.cc	/^void leveldb_release_snapshot($/;"	f
leveldb_repair_db	github/leveldb-1.18/db/c.cc	/^void leveldb_repair_db($/;"	f
leveldb_seqfile_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	s	file:
leveldb_seqfile_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_seqfile_t       leveldb_seqfile_t;$/;"	t	typeref:struct:leveldb_seqfile_t
leveldb_snappy_compression	github/leveldb-1.18/include/leveldb/c.h	/^  leveldb_snappy_compression = 1$/;"	e	enum:__anon1
leveldb_snapshot_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	s	file:
leveldb_snapshot_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_snapshot_t      leveldb_snapshot_t;$/;"	t	typeref:struct:leveldb_snapshot_t
leveldb_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	s	file:
leveldb_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_t               leveldb_t;$/;"	t	typeref:struct:leveldb_t
leveldb_writablefile_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	s	file:
leveldb_writablefile_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_writablefile_t  leveldb_writablefile_t;$/;"	t	typeref:struct:leveldb_writablefile_t
leveldb_write	github/leveldb-1.18/db/c.cc	/^void leveldb_write($/;"	f
leveldb_writebatch_clear	github/leveldb-1.18/db/c.cc	/^void leveldb_writebatch_clear(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_create	github/leveldb-1.18/db/c.cc	/^leveldb_writebatch_t* leveldb_writebatch_create() {$/;"	f
leveldb_writebatch_delete	github/leveldb-1.18/db/c.cc	/^void leveldb_writebatch_delete($/;"	f
leveldb_writebatch_destroy	github/leveldb-1.18/db/c.cc	/^void leveldb_writebatch_destroy(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_iterate	github/leveldb-1.18/db/c.cc	/^void leveldb_writebatch_iterate($/;"	f
leveldb_writebatch_put	github/leveldb-1.18/db/c.cc	/^void leveldb_writebatch_put($/;"	f
leveldb_writebatch_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	s	file:
leveldb_writebatch_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_writebatch_t    leveldb_writebatch_t;$/;"	t	typeref:struct:leveldb_writebatch_t
leveldb_writeoptions_create	github/leveldb-1.18/db/c.cc	/^leveldb_writeoptions_t* leveldb_writeoptions_create() {$/;"	f
leveldb_writeoptions_destroy	github/leveldb-1.18/db/c.cc	/^void leveldb_writeoptions_destroy(leveldb_writeoptions_t* opt) {$/;"	f
leveldb_writeoptions_set_sync	github/leveldb-1.18/db/c.cc	/^void leveldb_writeoptions_set_sync($/;"	f
leveldb_writeoptions_t	github/leveldb-1.18/db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	s	file:
leveldb_writeoptions_t	github/leveldb-1.18/include/leveldb/c.h	/^typedef struct leveldb_writeoptions_t  leveldb_writeoptions_t;$/;"	t	typeref:struct:leveldb_writeoptions_t
levels_	github/leveldb-1.18/db/version_set.cc	/^  LevelState levels_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet::Builder	file:
lexicographical_compare	test_getline.cpp	/^        lexicographical_compare(_II1 __first1, _II1 __last1,$/;"	f	namespace:std
limit	github/leveldb-1.18/include/leveldb/db.h	/^  Slice limit;          \/\/ Not included in the range$/;"	m	struct:leveldb::Range
limiter_	github/leveldb-1.18/util/env_posix.cc	/^  MmapLimiter* limiter_;$/;"	m	class:leveldb::__anon32::PosixMmapReadableFile	file:
line_	github/leveldb-1.18/util/testharness.h	/^  int line_;$/;"	m	class:leveldb::test::Tester
list_	github/leveldb-1.18/db/skiplist.h	/^    const SkipList* list_;$/;"	m	class:leveldb::SkipList::Iterator
list_	github/leveldb-1.18/db/skiplist_test.cc	/^  SkipList<Key, Comparator> list_;$/;"	m	class:leveldb::ConcurrentTest	file:
list_	github/leveldb-1.18/db/snapshot.h	/^  SnapshotImpl list_;$/;"	m	class:leveldb::SnapshotList
list_	github/leveldb-1.18/db/snapshot.h	/^  SnapshotList* list_;                 \/\/ just for sanity checks$/;"	m	class:leveldb::SnapshotImpl
list_	github/leveldb-1.18/util/cache.cc	/^  LRUHandle** list_;$/;"	m	class:leveldb::__anon27::HandleTable	file:
locale	test_getline.cpp	/^        locale(const locale& __other, _Facet* __f)$/;"	f	class:std::locale
locale	test_getline.cpp	/^    class locale$/;"	c	namespace:std	file:
locale_t	test_getline.cpp	/^    typedef __locale_t locale_t;$/;"	t	file:
locked_files_	github/leveldb-1.18/util/env_posix.cc	/^  std::set<std::string> locked_files_;$/;"	m	class:leveldb::__anon32::PosixLockTable	file:
locks_	github/leveldb-1.18/util/env_posix.cc	/^  PosixLockTable locks_;$/;"	m	class:leveldb::__anon32::PosixEnv	file:
log	github/leveldb-1.18/db/log_format.h	/^namespace log {$/;"	n	namespace:leveldb
log	github/leveldb-1.18/db/log_reader.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	github/leveldb-1.18/db/log_reader.h	/^namespace log {$/;"	n	namespace:leveldb
log	github/leveldb-1.18/db/log_test.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	github/leveldb-1.18/db/log_writer.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	github/leveldb-1.18/db/log_writer.h	/^namespace log {$/;"	n	namespace:leveldb
log	github/leveldb-1.18/db/version_set.h	/^namespace log { class Writer; }$/;"	n	namespace:leveldb
log_	github/leveldb-1.18/db/db_impl.h	/^  log::Writer* log_;$/;"	m	class:leveldb::DBImpl
log_number_	github/leveldb-1.18/db/version_edit.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionEdit
log_number_	github/leveldb-1.18/db/version_set.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionSet
logfile_	github/leveldb-1.18/db/db_impl.h	/^  WritableFile* logfile_;$/;"	m	class:leveldb::DBImpl
logfile_number_	github/leveldb-1.18/db/db_impl.h	/^  uint64_t logfile_number_;$/;"	m	class:leveldb::DBImpl
logical_and	test_getline.cpp	/^        struct logical_and : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
logical_not	test_getline.cpp	/^        struct logical_not : public unary_function<_Tp, bool>$/;"	s	namespace:std	file:
logical_or	test_getline.cpp	/^        struct logical_or : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
logs_	github/leveldb-1.18/db/repair.cc	/^  std::vector<uint64_t> logs_;$/;"	m	class:leveldb::__anon5::Repairer	file:
lower	test_getline.cpp	/^        static const mask lower = _ISlower;$/;"	m	struct:std::ctype_base	file:
lru_	github/leveldb-1.18/util/cache.cc	/^  LRUHandle lru_;$/;"	m	class:leveldb::__anon27::LRUCache	file:
lt	test_getline.cpp	/^                lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits
lt	test_getline.cpp	/^                lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:std::char_traits
m_ID	work/person_design/include/human.h	/^        string m_ID;$/;"	m	class:Human
m_age	work/person_design/include/human.h	/^        int  m_age;$/;"	m	class:Human
m_airline_comp	work/person_design/include/pilot.h	/^        string m_airline_comp; \/\/ which company belong to$/;"	m	class:Pilot
m_club	work/person_design/include/basketball_player.h	/^		string m_club;$/;"	m	class:BasketballPlayer
m_club	work/person_design/include/football_player.h	/^        string m_club;$/;"	m	class:FootballPlayer
m_data	test_vec.cpp	/^    std::vector<std::string> m_data;$/;"	m	struct:Block	file:
m_fire_station	work/person_design/include/firemen.h	/^        string m_fire_station;$/;"	m	class:Firemen
m_gender	work/person_design/include/human.h	/^        bool m_gender;$/;"	m	class:Human
m_grade	work/person_design/include/student.h	/^        string m_grade;$/;"	m	class:Student
m_model_drived	work/person_design/include/pilot.h	/^        string m_model_drived; \/\/ Aircraft Model drived$/;"	m	class:Pilot
m_name	work/person_design/include/human.h	/^        string m_name;$/;"	m	class:Human
m_name	work/person_design/include/manipulator.h	/^        string m_name;$/;"	m	class:Manipulator
m_p	study/boost/chap03/shared_ptr_2.cpp	/^        shared_ptr<int> m_p;  \/\/ one class member of shared_ptr$/;"	m	class:shared	file:
m_profession	work/person_design/include/human.h	/^        string m_profession;$/;"	m	class:Human
m_salaries	work/person_design/include/athletes.h	/^        double m_salaries;$/;"	m	class:Athlete
m_salaries	work/person_design/include/firemen.h	/^        double m_salaries;$/;"	m	class:Firemen
m_salaries	work/person_design/include/pilot.h	/^        double m_salaries;$/;"	m	class:Pilot
m_school	work/person_design/include/student.h	/^        string m_school;$/;"	m	class:Student
m_size	test_vec.cpp	/^    int m_size;$/;"	m	struct:Block	file:
m_student_ID	work/person_design/include/student.h	/^        string m_student_ID;$/;"	m	class:Student
m_training_years	work/person_design/include/athletes.h	/^        int m_training_years;$/;"	m	class:Athlete
m_years_of_service	work/person_design/include/firemen.h	/^        int  m_years_of_service;$/;"	m	class:Firemen
main	github/leveldb-1.18/db/autocompact_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/c_test.c	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/corruption_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/db_bench.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/db_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/dbformat_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/filename_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/leveldb_main.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/log_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/skiplist_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/version_edit_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/version_set_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/db/write_batch_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/issues/issue178_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/issues/issue200_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/table/filter_block_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/table/table_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/util/arena_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/util/bloom_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/util/cache_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/util/coding_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/util/crc32c_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/util/env_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	github/leveldb-1.18/util/hash_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	study/CppDesign/C02/call_hello.cpp	/^int main()$/;"	f
main	study/CppDesign/C02/concat.cpp	/^int main()$/;"	f
main	study/CppDesign/C02/fill_string.cpp	/^int main()$/;"	f
main	study/CppDesign/C02/fill_vector.cpp	/^int main()$/;"	f
main	study/CppDesign/C02/get_words.cpp	/^int main()$/;"	f
main	study/CppDesign/C02/hello.cpp	/^int main()$/;"	f
main	study/CppDesign/C02/hello_string.cpp	/^int main()$/;"	f
main	study/CppDesign/C02/int_vector.cpp	/^int main()$/;"	f
main	study/CppDesign/C02/numconv.cpp	/^int main()$/;"	f
main	study/CppDesign/C02/s_copy.cpp	/^int main()$/;"	f
main	study/CppDesign/C02/stream2.cpp	/^int main()$/;"	f
main	study/CppDesign/C03/pass_address.c	/^int main()$/;"	f
main	study/CppDesign/C03/pass_address.cpp	/^int main()$/;"	f
main	study/CppPrimer/chap12/shared_ptr_1.cpp	/^int main()$/;"	f
main	study/CppPrimer/chap16/template.cpp	/^int main()$/;"	f
main	study/Impala/runtime/timestamp-test.cpp	/^int main(int argc, char **argv) {$/;"	f
main	study/boost/chap03/shared_ptr_1.cpp	/^int main()$/;"	f
main	study/boost/chap03/shared_ptr_2.cpp	/^int main()$/;"	f
main	study/boost/chap03/shared_ptr_3.cpp	/^int main()$/;"	f
main	study/boost/test.cpp	/^int main()$/;"	f
main	study/dada/abstract/destructor.cpp	/^int main()$/;"	f
main	study/dada/animal/animal.cpp	/^int main()$/;"	f
main	study/dada/father_son_cons_destroy/father_son.cpp	/^int main()$/;"	f
main	study/dada/fenshu/virtual.cpp	/^int main()$/;"	f
main	study/dada/noname_obj/const_obj.cpp	/^int main()$/;"	f
main	study/dada/noname_obj/noname_obj.cpp	/^int main()$/;"	f
main	study/dada/overload/array.cpp	/^int main()$/;"	f
main	study/dada/overload/array_another.cpp	/^int main()$/;"	f
main	study/dada/overload/copy_constructor.cpp	/^int main()$/;"	f
main	study/dada/overload/custom_copy.cpp	/^int main()$/;"	f
main	study/dada/overload/friend.cpp	/^int main()$/;"	f
main	study/dada/overload/reference.cpp	/^int main()$/;"	f
main	study/dada/person/person.cpp	/^int main()$/;"	f
main	study/dada/person_job/person.cpp	/^int main()$/;"	f
main	study/dada/static/statics.cpp	/^int main()$/;"	f
main	study/test.cpp	/^int main()$/;"	f
main	study/test/getHostName.cpp	/^int main()$/;"	f
main	study/test/test.cpp	/^int main()$/;"	f
main	study/test/test1.cpp	/^int main()$/;"	f
main	study/test/testPrecision.cpp	/^int main()$/;"	f
main	study/test/testTime.cpp	/^int main()$/;"	f
main	test.c	/^int main()$/;"	f
main	test.cpp	/^int main()$/;"	f
main	test_base_child.cpp	/^int main() {$/;"	f
main	test_getline.cpp	/^int main() {$/;"	f
main	test_host_ip.cpp	/^int main()$/;"	f
main	test_int_to_string.cpp	/^int main()$/;"	f
main	test_map.cpp	/^int main()$/;"	f
main	test_pattern.cpp	/^int main()$/;"	f
main	test_random.cpp	/^int main()$/;"	f
main	test_set.cpp	/^int main()$/;"	f
main	test_string_max_size.cpp	/^int main()$/;"	f
main	test_vec.cpp	/^int main()$/;"	f
main	work/person_design/src/main.cpp	/^int main()$/;"	f
main	work/random/dateRandom.cpp	/^int main()$/;"	f
main	work/test_job/day10/SortMain.cpp	/^int main(   )$/;"	f
main	work/test_job/day12/data_packet/src/DataMain.cpp	/^int main(int argc, char **argv)$/;"	f
main	work/test_job/day12/test.cpp	/^int main()$/;"	f
main	work/test_job/day16/data_packet/src/DataMain.cpp	/^int main(int argc, char **argv)$/;"	f
main	work/test_job/day17/data_packet/src/DataMain.cpp	/^int main(void)$/;"	f
main	work/test_job/sort/src/SortMain.cpp	/^int main()$/;"	f
main	work/test_job/sort_job/SortMain.cpp	/^int main()$/;"	f
main	work/test_job/test.cpp	/^int main() {$/;"	f
main	work/test_job/test_mv.cpp	/^int main() {$/;"	f
make_pair	test_getline.cpp	/^                make_pair(_T1 __x, _T2 __y)$/;"	f	namespace:std
manifest_file_number_	github/leveldb-1.18/db/version_set.h	/^  uint64_t manifest_file_number_;$/;"	m	class:leveldb::VersionSet
manifest_sync_error_	github/leveldb-1.18/db/db_test.cc	/^  port::AtomicPointer manifest_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifest_write_error_	github/leveldb-1.18/db/db_test.cc	/^  port::AtomicPointer manifest_write_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifests_	github/leveldb-1.18/db/repair.cc	/^  std::vector<std::string> manifests_;$/;"	m	class:leveldb::__anon5::Repairer	file:
manual_compaction_	github/leveldb-1.18/db/db_impl.h	/^  ManualCompaction* manual_compaction_;$/;"	m	class:leveldb::DBImpl
map_	github/leveldb-1.18/db/db_test.cc	/^    KVMap map_;$/;"	m	class:leveldb::ModelDB::ModelSnapshot	file:
map_	github/leveldb-1.18/db/db_test.cc	/^    const KVMap* const map_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
map_	github/leveldb-1.18/db/db_test.cc	/^  KVMap map_;$/;"	m	class:leveldb::ModelDB	file:
mask	test_getline.cpp	/^            typedef typename __ctype_abstract_base<_CharT>::mask mask;$/;"	t	class:std::ctype	file:
mask	test_getline.cpp	/^            typedef typename ctype<_CharT>::mask mask;$/;"	t	class:std::ctype_byname	file:
mask	test_getline.cpp	/^        typedef unsigned short mask;$/;"	t	struct:std::ctype_base	file:
max	test_getline.cpp	/^        max(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std
max	test_getline.cpp	/^        max(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std
max_	github/leveldb-1.18/util/histogram.h	/^  double max_;$/;"	m	class:leveldb::Histogram
max_height_	github/leveldb-1.18/db/skiplist.h	/^  port::AtomicPointer max_height_;   \/\/ Height of the entire list$/;"	m	class:leveldb::SkipList
max_open_files	github/leveldb-1.18/include/leveldb/options.h	/^  int max_open_files;$/;"	m	struct:leveldb::Options
max_output_file_size_	github/leveldb-1.18/db/version_set.h	/^  uint64_t max_output_file_size_;$/;"	m	class:leveldb::Compaction
max_sequence	github/leveldb-1.18/db/repair.cc	/^    SequenceNumber max_sequence;$/;"	m	struct:leveldb::__anon5::Repairer::TableInfo	file:
max_size	test_getline.cpp	/^                    max_size() const throw()$/;"	f	class:__gnu_cxx::new_allocator
max_size	test_getline.cpp	/^                max_size() const$/;"	f	class:std::basic_string
mbstate_t	test_getline.cpp	/^typedef __mbstate_t mbstate_t;$/;"	t	file:
mc	study/dada/father_son_cons_destroy/father_son.h	/^		double mc;$/;"	m	class:Child
mem	github/leveldb-1.18/db/db_impl.cc	/^  MemTable* mem;$/;"	m	struct:leveldb::__anon8::IterState	file:
mem_	github/leveldb-1.18/db/db_impl.h	/^  MemTable* mem_;$/;"	m	class:leveldb::DBImpl
mem_	github/leveldb-1.18/db/write_batch.cc	/^  MemTable* mem_;$/;"	m	class:leveldb::__anon13::MemTableInserter	file:
mem_fun1_ref_t	test_getline.cpp	/^        class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	file:
mem_fun1_t	test_getline.cpp	/^        class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>$/;"	c	namespace:std	file:
mem_fun_ref_t	test_getline.cpp	/^        class mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	file:
mem_fun_t	test_getline.cpp	/^        class mem_fun_t : public unary_function<_Tp*, _Ret>$/;"	c	namespace:std	file:
memtable_	github/leveldb-1.18/table/table_test.cc	/^  MemTable* memtable_;$/;"	m	class:leveldb::MemTableConstructor	file:
memtable_key	github/leveldb-1.18/db/dbformat.h	/^  Slice memtable_key() const { return Slice(start_, end_ - start_); }$/;"	f	class:leveldb::LookupKey
merit	test_base_child.cpp	/^        double merit;$/;"	m	class:Staff	file:
merit_pay	test_base_child.cpp	/^        double merit_pay;$/;"	m	class:Staff	file:
message_	github/leveldb-1.18/db/db_bench.cc	/^  std::string message_;$/;"	m	class:leveldb::__anon7::Stats	file:
message_	github/leveldb-1.18/db/log_test.cc	/^    std::string message_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
message_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
message_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
messages	test_getline.cpp	/^            static const category messages = 1L << 5;$/;"	m	class:std::locale	file:
meta	github/leveldb-1.18/db/repair.cc	/^    FileMetaData meta;$/;"	m	struct:leveldb::__anon5::Repairer::TableInfo	file:
metaindex_handle	github/leveldb-1.18/table/format.h	/^  const BlockHandle& metaindex_handle() const { return metaindex_handle_; }$/;"	f	class:leveldb::Footer
metaindex_handle	github/leveldb-1.18/table/table.cc	/^  BlockHandle metaindex_handle;  \/\/ Handle to metaindex_block: saved from footer$/;"	m	struct:leveldb::Table::Rep	file:
metaindex_handle_	github/leveldb-1.18/table/format.h	/^  BlockHandle metaindex_handle_;$/;"	m	class:leveldb::Footer
method	github/leveldb-1.18/db/db_bench.cc	/^    void (Benchmark::*method)(ThreadState*);$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
micros	github/leveldb-1.18/db/db_impl.h	/^    int64_t micros;$/;"	m	struct:leveldb::DBImpl::CompactionStats
min	test_getline.cpp	/^        min(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std
min	test_getline.cpp	/^        min(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std
min_	github/leveldb-1.18/util/histogram.h	/^  double min_;$/;"	m	class:leveldb::Histogram
minus	test_getline.cpp	/^        struct minus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
minute	study/Impala/runtime/timestamp-parse-util.cpp	/^  int minute;$/;"	m	struct:impala::DateTimeParseResult	file:
minute	study/dada/clock_struct/clock.h	/^	int minute;$/;"	m	struct:Time
mismatch	test_getline.cpp	/^            mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std
mismatch	test_getline.cpp	/^        mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std
mmap_limit_	github/leveldb-1.18/util/env_posix.cc	/^  MmapLimiter mmap_limit_;$/;"	m	class:leveldb::__anon32::PosixEnv	file:
mmapped_region_	github/leveldb-1.18/util/env_posix.cc	/^  void* mmapped_region_;$/;"	m	class:leveldb::__anon32::PosixMmapReadableFile	file:
modulus	test_getline.cpp	/^        struct modulus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
mon_decimal_point	test_getline.cpp	/^        char *mon_decimal_point;$/;"	m	struct:lconv	file:
mon_grouping	test_getline.cpp	/^        char *mon_grouping;$/;"	m	struct:lconv	file:
mon_thousands_sep	test_getline.cpp	/^        char *mon_thousands_sep;$/;"	m	struct:lconv	file:
monetary	test_getline.cpp	/^            static const category monetary = 1L << 4;$/;"	m	class:std::locale	file:
month	study/Impala/runtime/timestamp-parse-util.cpp	/^  int month;$/;"	m	struct:impala::DateTimeParseResult	file:
move	study/CppPrimer/chap07/class2/Screen.h	/^Screen &Screen::move(pos r, pos c)$/;"	f	class:Screen
move	test_getline.cpp	/^                move(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits
move	test_getline.cpp	/^        move(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits
mp	study/dada/father_son_cons_destroy/father_son.h	/^		int mp;$/;"	m	class:Parent
mu	github/leveldb-1.18/db/db_bench.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::__anon7::SharedState	file:
mu	github/leveldb-1.18/db/db_impl.cc	/^  port::Mutex* mu;$/;"	m	struct:leveldb::__anon8::IterState	file:
mu	github/leveldb-1.18/util/env_test.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::State	file:
mu_	github/leveldb-1.18/db/db_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon14::AtomicCounter	file:
mu_	github/leveldb-1.18/db/skiplist_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::TestState	file:
mu_	github/leveldb-1.18/port/port_posix.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	github/leveldb-1.18/port/port_posix.h	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::port::Mutex
mu_	github/leveldb-1.18/util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon32::MmapLimiter	file:
mu_	github/leveldb-1.18/util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon32::PosixLockTable	file:
mu_	github/leveldb-1.18/util/env_posix.cc	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::__anon32::PosixEnv	file:
mu_	github/leveldb-1.18/util/env_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::EnvPosixTest	file:
mu_	github/leveldb-1.18/util/mutexlock.h	/^  port::Mutex *const mu_;$/;"	m	class:leveldb::MutexLock::port
multiplies	test_getline.cpp	/^        struct multiplies : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
mutex_	github/leveldb-1.18/db/db_impl.h	/^  port::Mutex mutex_;$/;"	m	class:leveldb::DBImpl
mutex_	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon25::InMemoryEnv	file:
mutex_	github/leveldb-1.18/util/cache.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon27::LRUCache	file:
n_	github/leveldb-1.18/table/merger.cc	/^  int n_;$/;"	m	class:leveldb::__anon20::MergingIterator	file:
n_cs_precedes	test_getline.cpp	/^        char n_cs_precedes;$/;"	m	struct:lconv	file:
n_sep_by_space	test_getline.cpp	/^        char n_sep_by_space;$/;"	m	struct:lconv	file:
n_sign_posn	test_getline.cpp	/^        char n_sign_posn;$/;"	m	struct:lconv	file:
name	github/leveldb-1.18/util/testharness.cc	/^  const char* name;$/;"	m	struct:leveldb::test::__anon29::Test	file:
name	study/dada/abstract/abstract.cpp	/^		string name; \/\/在内存占用默认4个字节$/;"	m	class:Animal	file:
name	study/dada/animal/animal.h	/^		string 	name;$/;"	m	class:Animal
name	study/dada/fenshu/virtual.cpp	/^		string name; \/\/在内存占用默认4个字节$/;"	m	class:Animal	file:
name	study/dada/fenshu/virtual.cpp	/^		string name;$/;"	m	class:Player	file:
name	study/dada/person/person.h	/^		string name;$/;"	m	class:Person
name	study/dada/person_job/person.h	/^		string name;$/;"	m	class:Human
name	test_base_child.cpp	/^        string name;$/;"	m	class:Staff	file:
name_	github/leveldb-1.18/db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
name_	github/leveldb-1.18/db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
name_	github/leveldb-1.18/util/env_posix.cc	/^  std::string name_;$/;"	m	class:leveldb::__anon32::PosixFileLock	file:
narrow	test_getline.cpp	/^                    narrow(char_type __c, char __dfault) const$/;"	f	class:std::ctype
narrow	test_getline.cpp	/^                    narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype
narrow	test_getline.cpp	/^                narrow(char_type __c, char __dfault) const$/;"	f	class:std::__ctype_abstract_base
narrow	test_getline.cpp	/^                narrow(char_type __c, char __dfault) const$/;"	f	class:std::basic_ios
narrow	test_getline.cpp	/^                narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::__ctype_abstract_base
negate	test_getline.cpp	/^        struct negate : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	file:
negative_sign	test_getline.cpp	/^        char *negative_sign;$/;"	m	struct:lconv	file:
new_allocator	test_getline.cpp	/^                    new_allocator(const new_allocator<_Tp1>&) throw() { }$/;"	f	class:__gnu_cxx::new_allocator
new_allocator	test_getline.cpp	/^                new_allocator() throw() { }$/;"	f	class:__gnu_cxx::new_allocator
new_allocator	test_getline.cpp	/^                new_allocator(const new_allocator&) throw() { }$/;"	f	class:__gnu_cxx::new_allocator
new_allocator	test_getline.cpp	/^        class new_allocator$/;"	c	namespace:__gnu_cxx	file:
new_files_	github/leveldb-1.18/db/version_edit.h	/^  std::vector< std::pair<int, FileMetaData> > new_files_;$/;"	m	class:leveldb::VersionEdit
new_handler	test_getline.cpp	/^        typedef void (*new_handler)();$/;"	t	namespace:std	file:
newest	github/leveldb-1.18/db/snapshot.h	/^  SnapshotImpl* newest() const { assert(!empty()); return list_.prev_; }$/;"	f	class:leveldb::SnapshotList
next	github/leveldb-1.18/include/leveldb/iterator.h	/^    Cleanup* next;$/;"	m	struct:leveldb::Iterator::Cleanup
next	github/leveldb-1.18/util/cache.cc	/^  LRUHandle* next;$/;"	m	struct:leveldb::__anon27::LRUHandle	file:
next	study/CppDesign/C06/CLib.h	/^    int next;       \/\/ Next empty space $/;"	m	struct:CStashTag
next	study/List/single-linked/int_s_l_l_node.h	/^        IntSLLNode *next;$/;"	m	class:IntSLLNode
next_	github/leveldb-1.18/db/skiplist.h	/^  port::AtomicPointer next_[1];$/;"	m	struct:leveldb::SkipList::Node
next_	github/leveldb-1.18/db/snapshot.h	/^  SnapshotImpl* next_;$/;"	m	class:leveldb::SnapshotImpl
next_	github/leveldb-1.18/db/version_set.h	/^  Version* next_;               \/\/ Next version in linked list$/;"	m	class:leveldb::Version
next_file_number_	github/leveldb-1.18/db/repair.cc	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::__anon5::Repairer	file:
next_file_number_	github/leveldb-1.18/db/version_edit.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionEdit
next_file_number_	github/leveldb-1.18/db/version_set.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionSet
next_hash	github/leveldb-1.18/util/cache.cc	/^  LRUHandle* next_hash;$/;"	m	struct:leveldb::__anon27::LRUHandle	file:
next_report_	github/leveldb-1.18/db/db_bench.cc	/^  int next_report_;$/;"	m	class:leveldb::__anon7::Stats	file:
next_report_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
next_report_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
no_space_	github/leveldb-1.18/db/db_test.cc	/^  port::AtomicPointer no_space_;$/;"	m	class:leveldb::SpecialEnv	file:
noboolalpha	test_getline.cpp	/^        noboolalpha(ios_base& __base)$/;"	f	namespace:std
node_	github/leveldb-1.18/db/skiplist.h	/^    Node* node_;$/;"	m	class:leveldb::SkipList::Iterator
non_writable_	github/leveldb-1.18/db/db_test.cc	/^  port::AtomicPointer non_writable_;$/;"	m	class:leveldb::SpecialEnv	file:
none	test_getline.cpp	/^            static const category none = 0;$/;"	m	class:std::locale	file:
noshowbase	test_getline.cpp	/^        noshowbase(ios_base& __base)$/;"	f	namespace:std
noshowpoint	test_getline.cpp	/^        noshowpoint(ios_base& __base)$/;"	f	namespace:std
noshowpos	test_getline.cpp	/^        noshowpos(ios_base& __base)$/;"	f	namespace:std
noskipws	test_getline.cpp	/^        noskipws(ios_base& __base)$/;"	f	namespace:std
not1	test_getline.cpp	/^        not1(const _Predicate& __pred)$/;"	f	namespace:std
not2	test_getline.cpp	/^        not2(const _Predicate& __pred)$/;"	f	namespace:std
not_eof	test_getline.cpp	/^                not_eof(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits
not_eof	test_getline.cpp	/^                not_eof(const int_type& __c)$/;"	f	struct:std::char_traits
not_equal_to	test_getline.cpp	/^        struct not_equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	file:
nothrow_t	test_getline.cpp	/^        struct nothrow_t { };$/;"	s	namespace:std	file:
nounitbuf	test_getline.cpp	/^        nounitbuf(ios_base& __base)$/;"	f	namespace:std
nouppercase	test_getline.cpp	/^        nouppercase(ios_base& __base)$/;"	f	namespace:std
npos	test_getline.cpp	/^            static const size_type npos = static_cast<size_type>(-1);$/;"	m	class:std::basic_string	file:
npos	test_getline.cpp	/^        basic_string<_CharT, _Traits, _Alloc>::npos;$/;"	m	class:std::basic_string	file:
num	study/test/test.cpp	/^    short num;$/;"	m	union:judge	file:
num_	github/leveldb-1.18/db/db_bench.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	github/leveldb-1.18/table/filter_block.h	/^  size_t num_;          \/\/ Number of entries in offset array$/;"	m	class:leveldb::FilterBlockReader
num_	github/leveldb-1.18/util/histogram.h	/^  double num_;$/;"	m	class:leveldb::Histogram
num_done	github/leveldb-1.18/db/db_bench.cc	/^  int num_done;$/;"	m	struct:leveldb::__anon7::SharedState	file:
num_entries	github/leveldb-1.18/table/table_builder.cc	/^  int64_t num_entries;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
num_get	test_getline.cpp	/^                num_get(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_get
num_get	test_getline.cpp	/^        class num_get : public locale::facet$/;"	c	namespace:std	file:
num_initialized	github/leveldb-1.18/db/db_bench.cc	/^  int num_initialized;$/;"	m	struct:leveldb::__anon7::SharedState	file:
num_input_files	github/leveldb-1.18/db/version_set.h	/^  int num_input_files(int which) const { return inputs_[which].size(); }$/;"	f	class:leveldb::Compaction
num_put	test_getline.cpp	/^                num_put(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_put
num_put	test_getline.cpp	/^        class num_put : public locale::facet$/;"	c	namespace:std	file:
num_restarts_	github/leveldb-1.18/table/block.cc	/^  uint32_t const num_restarts_; \/\/ Number of uint32_t entries in restart array$/;"	m	class:leveldb::Block::Iter	file:
num_running	github/leveldb-1.18/util/env_test.cc	/^  int num_running;$/;"	m	struct:leveldb::State	file:
num_writable_file_errors_	github/leveldb-1.18/util/testutil.h	/^  int num_writable_file_errors_;$/;"	m	class:leveldb::test::ErrorEnv
number	github/leveldb-1.18/db/db_impl.cc	/^    uint64_t number;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
number	github/leveldb-1.18/db/version_edit.h	/^  uint64_t number;$/;"	m	struct:leveldb::FileMetaData
number_	github/leveldb-1.18/db/snapshot.h	/^  SequenceNumber number_;  \/\/ const after creation$/;"	m	class:leveldb::SnapshotImpl
numeric	test_getline.cpp	/^            static const category numeric = 1L << 1;$/;"	m	class:std::locale	file:
numpunct	test_getline.cpp	/^                numpunct(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::numpunct
numpunct	test_getline.cpp	/^                numpunct(__cache_type* __cache, size_t __refs = 0)$/;"	f	class:std::numpunct
numpunct	test_getline.cpp	/^                numpunct(size_t __refs = 0) : facet(__refs), _M_data(__null)$/;"	f	class:std::numpunct
numpunct	test_getline.cpp	/^        class numpunct : public locale::facet$/;"	c	namespace:std	file:
numpunct_byname	test_getline.cpp	/^                numpunct_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::numpunct_byname
numpunct_byname	test_getline.cpp	/^        class numpunct_byname : public numpunct<_CharT>$/;"	c	namespace:std	file:
obj_count	work/person_design/include/human.h	/^        static int obj_count; $/;"	m	class:Human
obj_count	work/person_design/src/human.cpp	/^int Human::obj_count = 0;$/;"	m	class:Human	file:
oct	test_getline.cpp	/^            static const fmtflags oct = _S_oct;$/;"	m	class:std::ios_base	file:
oct	test_getline.cpp	/^        oct(ios_base& __base)$/;"	f	namespace:std
off64_t	test_getline.cpp	/^    typedef __off64_t off64_t;$/;"	t	file:
off_t	test_getline.cpp	/^    typedef __off_t off_t;$/;"	t	file:
off_type	test_getline.cpp	/^                typedef typename traits_type::off_type off_type;$/;"	t	class:std::basic_streambuf	file:
off_type	test_getline.cpp	/^            typedef std::streamoff off_type;$/;"	t	struct:__gnu_cxx::_Char_types	file:
off_type	test_getline.cpp	/^            typedef streamoff off_type;$/;"	t	struct:std::char_traits	file:
off_type	test_getline.cpp	/^            typedef typename _Char_types<_CharT>::off_type off_type;$/;"	t	struct:__gnu_cxx::char_traits	file:
off_type	test_getline.cpp	/^            typedef typename _Traits::off_type off_type;$/;"	t	class:std::basic_ios	file:
off_type	test_getline.cpp	/^            typedef typename _Traits::off_type off_type;$/;"	t	class:std::basic_iostream	file:
off_type	test_getline.cpp	/^            typedef typename _Traits::off_type off_type;$/;"	t	class:std::basic_istream	file:
off_type	test_getline.cpp	/^            typedef typename _Traits::off_type off_type;$/;"	t	class:std::basic_ostream	file:
offset	github/leveldb-1.18/table/format.h	/^  uint64_t offset() const { return offset_; }$/;"	f	class:leveldb::BlockHandle
offset	github/leveldb-1.18/table/table_builder.cc	/^  uint64_t offset;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
offset_	github/leveldb-1.18/table/filter_block.h	/^  const char* offset_;  \/\/ Pointer to beginning of offset array (at block-end)$/;"	m	class:leveldb::FilterBlockReader
offset_	github/leveldb-1.18/table/format.h	/^  uint64_t offset_;$/;"	m	class:leveldb::BlockHandle
ofstream	test_getline.cpp	/^    typedef basic_ofstream<char> ofstream;$/;"	t	namespace:std	file:
ok	github/leveldb-1.18/include/leveldb/status.h	/^  bool ok() const { return (state_ == NULL); }$/;"	f	class:leveldb::Status
ok	github/leveldb-1.18/include/leveldb/table_builder.h	/^  bool ok() const { return status().ok(); }$/;"	f	class:leveldb::TableBuilder
ok_	github/leveldb-1.18/util/testharness.h	/^  bool ok_;$/;"	m	class:leveldb::test::Tester
oldest	github/leveldb-1.18/db/snapshot.h	/^  SnapshotImpl* oldest() const { assert(!empty()); return list_.next_; }$/;"	f	class:leveldb::SnapshotList
once	github/leveldb-1.18/util/comparator.cc	/^static port::OnceType once = LEVELDB_ONCE_INIT;$/;"	m	namespace:leveldb	file:
once	github/leveldb-1.18/util/env_posix.cc	/^static pthread_once_t once = PTHREAD_ONCE_INIT;$/;"	m	namespace:leveldb	file:
op	test_getline.cpp	/^            _Operation op;$/;"	m	class:std::binder1st	file:
op	test_getline.cpp	/^            _Operation op;$/;"	m	class:std::binder2nd	file:
open_mode	test_getline.cpp	/^            typedef int open_mode;$/;"	t	class:std::ios_base	file:
openmode	test_getline.cpp	/^            typedef _Ios_Openmode openmode;$/;"	t	class:std::ios_base	file:
operator !	test_getline.cpp	/^                operator!() const$/;"	f	class:std::basic_ios
operator !=	github/leveldb-1.18/include/leveldb/slice.h	/^inline bool operator!=(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator !=	study/Impala/runtime/timestamp-value.h	/^            bool operator!=(const TimestampValue& other) const { return !(*this == other); }$/;"	f	class:impala::TimestampValue
operator !=	test_getline.cpp	/^                operator!=(const locale& __other) const throw ()$/;"	f	class:std::locale
operator !=	test_getline.cpp	/^                operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
operator !=	test_getline.cpp	/^        operator!=(const _CharT* __lhs,$/;"	f	namespace:std
operator !=	test_getline.cpp	/^        operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator !=	test_getline.cpp	/^        operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator !=	test_getline.cpp	/^        operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std
operator !=	test_getline.cpp	/^        operator!=(const allocator<_Tp>&, const allocator<_Tp>&)$/;"	f	namespace:std
operator !=	test_getline.cpp	/^        operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator !=	test_getline.cpp	/^        operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std
operator !=	test_getline.cpp	/^        operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std
operator !=	test_getline.cpp	/^        operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)$/;"	f	namespace:__gnu_cxx
operator !=	test_getline.cpp	/^        operator!=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator !=	test_getline.cpp	/^        operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator &	test_getline.cpp	/^        operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
operator &	test_getline.cpp	/^        operator&(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std
operator &	test_getline.cpp	/^        operator&(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std
operator &=	test_getline.cpp	/^        operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
operator &=	test_getline.cpp	/^        operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std
operator &=	test_getline.cpp	/^        operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std
operator ()	github/leveldb-1.18/db/memtable.cc	/^int MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)$/;"	f	class:leveldb::MemTable::KeyComparator
operator ()	github/leveldb-1.18/db/skiplist_test.cc	/^  int operator()(const Key& a, const Key& b) const {$/;"	f	struct:leveldb::Comparator
operator ()	github/leveldb-1.18/db/version_set.cc	/^    bool operator()(FileMetaData* f1, FileMetaData* f2) const {$/;"	f	struct:leveldb::VersionSet::Builder::BySmallestKey
operator ()	github/leveldb-1.18/table/table_test.cc	/^  bool operator()(const std::string& a, const std::string& b) const {$/;"	f	struct:leveldb::__anon22::STLLessThan
operator ()	test_getline.cpp	/^                    operator()(_Arg1 __x, _Arg2 __y) const$/;"	f	class:std::pointer_to_binary_function
operator ()	test_getline.cpp	/^                    operator()(const typename _Predicate::argument_type& __x) const$/;"	f	class:std::unary_negate
operator ()	test_getline.cpp	/^                operator() (const locale& __loc) const$/;"	f	struct:std::__use_cache
operator ()	test_getline.cpp	/^                operator()(_Arg __x) const$/;"	f	class:std::pointer_to_unary_function
operator ()	test_getline.cpp	/^                operator()(_Tp& __r) const$/;"	f	class:std::mem_fun_ref_t
operator ()	test_getline.cpp	/^                operator()(_Tp& __r, _Arg __x) const$/;"	f	class:std::mem_fun1_ref_t
operator ()	test_getline.cpp	/^                operator()(_Tp* __p) const$/;"	f	class:std::mem_fun_t
operator ()	test_getline.cpp	/^                operator()(_Tp* __p, _Arg __x) const$/;"	f	class:std::mem_fun1_t
operator ()	test_getline.cpp	/^                operator()(const _Tp& __r) const$/;"	f	class:std::const_mem_fun_ref_t
operator ()	test_getline.cpp	/^                operator()(const _Tp& __r, _Arg __x) const$/;"	f	class:std::const_mem_fun1_ref_t
operator ()	test_getline.cpp	/^                operator()(const _Tp* __p) const$/;"	f	class:std::const_mem_fun_t
operator ()	test_getline.cpp	/^                operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:std::const_mem_fun1_t
operator ()	test_getline.cpp	/^                operator()(const typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd
operator ()	test_getline.cpp	/^                operator()(const typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st
operator ()	test_getline.cpp	/^                operator()(const typename _Predicate::first_argument_type& __x,$/;"	f	class:std::binary_negate
operator ()	test_getline.cpp	/^                operator()(typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd
operator ()	test_getline.cpp	/^                operator()(typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st
operator ()	test_getline.cpp	/^            operator()(_Pair& __x) const$/;"	f	struct:std::_Select1st
operator ()	test_getline.cpp	/^            operator()(_Pair& __x) const$/;"	f	struct:std::_Select2nd
operator ()	test_getline.cpp	/^            operator()(_Tp& __x) const$/;"	f	struct:std::_Identity
operator ()	test_getline.cpp	/^            operator()(const _Pair& __x) const$/;"	f	struct:std::_Select1st
operator ()	test_getline.cpp	/^            operator()(const _Pair& __x) const$/;"	f	struct:std::_Select2nd
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x) const$/;"	f	struct:std::_Identity
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x) const$/;"	f	struct:std::logical_not
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x) const$/;"	f	struct:std::negate
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_and
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_or
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_xor
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::divides
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::equal_to
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater_equal
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less_equal
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_and
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_or
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::minus
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::modulus
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::multiplies
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::not_equal_to
operator ()	test_getline.cpp	/^            operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::plus
operator ()	test_getline.cpp	/^        operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,$/;"	f	class:std::locale
operator ()	work/test_job/day17/data_packet/include/BakPacket.h	/^		bool operator ()(BakPacket cmp_a, BakPacket cmp_b)$/;"	f	class:compare
operator *	test_getline.cpp	/^                    operator*() const$/;"	f	class:__gnu_cxx::__normal_iterator
operator *	test_getline.cpp	/^                    operator*()$/;"	f	class:std::back_insert_iterator
operator *	test_getline.cpp	/^                    operator*()$/;"	f	class:std::front_insert_iterator
operator *	test_getline.cpp	/^                    operator*()$/;"	f	class:std::insert_iterator
operator *	test_getline.cpp	/^                    operator*()$/;"	f	class:std::ostreambuf_iterator
operator *	test_getline.cpp	/^                operator*() const$/;"	f	class:std::istreambuf_iterator
operator *	test_getline.cpp	/^                operator*() const$/;"	f	class:std::reverse_iterator
operator +	test_getline.cpp	/^                    operator+(const difference_type& __n) const$/;"	f	class:__gnu_cxx::__normal_iterator
operator +	test_getline.cpp	/^                    operator+(streamoff __off) const$/;"	f	class:std::fpos
operator +	test_getline.cpp	/^                operator+(difference_type __n) const$/;"	f	class:std::reverse_iterator
operator +	test_getline.cpp	/^        operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)$/;"	f	namespace:std
operator +	test_getline.cpp	/^        operator+(const _CharT* __lhs,$/;"	f	namespace:std
operator +	test_getline.cpp	/^        operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)$/;"	f	namespace:std
operator +	test_getline.cpp	/^        operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator +	test_getline.cpp	/^        operator+(typename __normal_iterator<_Iterator, _Container>::difference_type$/;"	f	namespace:__gnu_cxx
operator +	test_getline.cpp	/^        operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std
operator ++	test_getline.cpp	/^                    operator++()$/;"	f	class:__gnu_cxx::__normal_iterator
operator ++	test_getline.cpp	/^                    operator++()$/;"	f	class:std::back_insert_iterator
operator ++	test_getline.cpp	/^                    operator++()$/;"	f	class:std::front_insert_iterator
operator ++	test_getline.cpp	/^                    operator++()$/;"	f	class:std::insert_iterator
operator ++	test_getline.cpp	/^                    operator++()$/;"	f	class:std::ostreambuf_iterator
operator ++	test_getline.cpp	/^                    operator++(int)$/;"	f	class:__gnu_cxx::__normal_iterator
operator ++	test_getline.cpp	/^                    operator++(int)$/;"	f	class:std::back_insert_iterator
operator ++	test_getline.cpp	/^                    operator++(int)$/;"	f	class:std::front_insert_iterator
operator ++	test_getline.cpp	/^                    operator++(int)$/;"	f	class:std::insert_iterator
operator ++	test_getline.cpp	/^                    operator++(int)$/;"	f	class:std::ostreambuf_iterator
operator ++	test_getline.cpp	/^                operator++()$/;"	f	class:std::istreambuf_iterator
operator ++	test_getline.cpp	/^                operator++()$/;"	f	class:std::reverse_iterator
operator ++	test_getline.cpp	/^                operator++(int)$/;"	f	class:std::istreambuf_iterator
operator ++	test_getline.cpp	/^                operator++(int)$/;"	f	class:std::reverse_iterator
operator +=	test_getline.cpp	/^                    operator+=(const difference_type& __n)$/;"	f	class:__gnu_cxx::__normal_iterator
operator +=	test_getline.cpp	/^                    operator+=(streamoff __off)$/;"	f	class:std::fpos
operator +=	test_getline.cpp	/^                operator+=(_CharT __c)$/;"	f	class:std::basic_string
operator +=	test_getline.cpp	/^                operator+=(const _CharT* __s)$/;"	f	class:std::basic_string
operator +=	test_getline.cpp	/^                operator+=(const basic_string& __str)$/;"	f	class:std::basic_string
operator +=	test_getline.cpp	/^                operator+=(difference_type __n)$/;"	f	class:std::reverse_iterator
operator -	test_getline.cpp	/^                    operator-(const difference_type& __n) const$/;"	f	class:__gnu_cxx::__normal_iterator
operator -	test_getline.cpp	/^                    operator-(const fpos& __other) const$/;"	f	class:std::fpos
operator -	test_getline.cpp	/^                    operator-(streamoff __off) const$/;"	f	class:std::fpos
operator -	test_getline.cpp	/^                operator-(difference_type __n) const$/;"	f	class:std::reverse_iterator
operator -	test_getline.cpp	/^        operator-(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator -	test_getline.cpp	/^        operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator -	test_getline.cpp	/^        operator-(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator -	test_getline.cpp	/^        operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator --	test_getline.cpp	/^                    operator--()$/;"	f	class:__gnu_cxx::__normal_iterator
operator --	test_getline.cpp	/^                    operator--(int)$/;"	f	class:__gnu_cxx::__normal_iterator
operator --	test_getline.cpp	/^                operator--()$/;"	f	class:std::reverse_iterator
operator --	test_getline.cpp	/^                operator--(int)$/;"	f	class:std::reverse_iterator
operator -=	test_getline.cpp	/^                    operator-=(const difference_type& __n)$/;"	f	class:__gnu_cxx::__normal_iterator
operator -=	test_getline.cpp	/^                    operator-=(streamoff __off)$/;"	f	class:std::fpos
operator -=	test_getline.cpp	/^                operator-=(difference_type __n)$/;"	f	class:std::reverse_iterator
operator ->	test_getline.cpp	/^                    operator->() const$/;"	f	class:__gnu_cxx::__normal_iterator
operator ->	test_getline.cpp	/^                operator->() const$/;"	f	class:std::reverse_iterator
operator <	study/Impala/runtime/timestamp-test.cpp	/^  friend bool operator<(const TimestampToken& lhs, const TimestampToken& rhs) {$/;"	f	struct:impala::TimestampToken
operator <	study/Impala/runtime/timestamp-value.h	/^            bool operator<(const TimestampValue& other) const {$/;"	f	class:impala::TimestampValue
operator <	test_getline.cpp	/^        operator<(const _CharT* __lhs,$/;"	f	namespace:std
operator <	test_getline.cpp	/^        operator<(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator <	test_getline.cpp	/^        operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator <	test_getline.cpp	/^        operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator <	test_getline.cpp	/^        operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
operator <	test_getline.cpp	/^        operator<(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator <	test_getline.cpp	/^        operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator <	work/test_job/day16/data_packet/include/BakPacket.h	/^		bool operator < (const BakPacket &bak_packet)const$/;"	f	class:BakPacket
operator <<	github/leveldb-1.18/util/testharness.h	/^  Tester& operator<<(const V& value) {$/;"	f	class:leveldb::test::Tester
operator <<	study/Impala/runtime/timestamp-value.cpp	/^    ostream& operator<<(ostream& os, const TimestampValue& timestamp_value) {$/;"	f	namespace:impala
operator <<	test_getline.cpp	/^                operator<<(bool __n)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^                operator<<(const void* __p)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^                operator<<(double __f)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^                operator<<(float __f)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^                operator<<(long __n)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^                operator<<(long double __f)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^                operator<<(long long __n)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^                operator<<(unsigned int __n)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^                operator<<(unsigned long __n)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^                operator<<(unsigned long long __n)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^                operator<<(unsigned short __n)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^        operator<<(__streambuf_type* __sbin)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^        operator<<(basic_ostream<_CharT, _Traits>& __os,$/;"	f	namespace:std
operator <<	test_getline.cpp	/^        operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)$/;"	f	namespace:std
operator <<	test_getline.cpp	/^        operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)$/;"	f	namespace:std
operator <<	test_getline.cpp	/^        operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)$/;"	f	namespace:std
operator <<	test_getline.cpp	/^        operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)$/;"	f	namespace:std
operator <<	test_getline.cpp	/^        operator<<(basic_ostream<char, _Traits>& __out, char __c)$/;"	f	namespace:std
operator <<	test_getline.cpp	/^        operator<<(basic_ostream<char, _Traits>& __out, const char* __s)$/;"	f	namespace:std
operator <<	test_getline.cpp	/^        operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)$/;"	f	namespace:std
operator <<	test_getline.cpp	/^        operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)$/;"	f	namespace:std
operator <<	test_getline.cpp	/^        operator<<(basic_ostream<char, _Traits>& __out, signed char __c)$/;"	f	namespace:std
operator <<	test_getline.cpp	/^        operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)$/;"	f	namespace:std
operator <<	test_getline.cpp	/^        operator<<(int __n)$/;"	f	class:std::basic_ostream
operator <<	test_getline.cpp	/^        operator<<(short __n)$/;"	f	class:std::basic_ostream
operator <=	study/Impala/runtime/timestamp-value.h	/^            bool operator<=(const TimestampValue& other) const {$/;"	f	class:impala::TimestampValue
operator <=	test_getline.cpp	/^                operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
operator <=	test_getline.cpp	/^        operator<=(const _CharT* __lhs,$/;"	f	namespace:std
operator <=	test_getline.cpp	/^        operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator <=	test_getline.cpp	/^        operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator <=	test_getline.cpp	/^        operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator <=	test_getline.cpp	/^        operator<=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator <=	test_getline.cpp	/^        operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator =	github/leveldb-1.18/include/leveldb/status.h	/^inline void Status::operator=(const Status& s) {$/;"	f	class:leveldb::Status
operator =	study/Impala/runtime/timestamp-value.h	/^            TimestampValue& operator=(const boost::posix_time::ptime& ptime) {$/;"	f	class:impala::TimestampValue
operator =	test_getline.cpp	/^                    operator=(_CharT __c)$/;"	f	class:std::ostreambuf_iterator
operator =	test_getline.cpp	/^                    operator=(const __streambuf_type&) { return *this; };$/;"	f	class:std::basic_streambuf	file:
operator =	test_getline.cpp	/^                    operator=(typename _Container::const_reference __value)$/;"	f	class:std::back_insert_iterator
operator =	test_getline.cpp	/^                    operator=(typename _Container::const_reference __value)$/;"	f	class:std::front_insert_iterator
operator =	test_getline.cpp	/^                    operator=(typename _Container::const_reference __value)$/;"	f	class:std::insert_iterator
operator =	test_getline.cpp	/^                operator=(_CharT __c)$/;"	f	class:std::basic_string
operator =	test_getline.cpp	/^                operator=(const _CharT* __s)$/;"	f	class:std::basic_string
operator =	test_getline.cpp	/^                operator=(const basic_string& __str)$/;"	f	class:std::basic_string
operator =	work/person_design/include/athletes.h	/^        Athlete& operator=(const Athlete& obj) {$/;"	f	class:Athlete
operator =	work/person_design/include/firemen.h	/^        Firemen& operator=(const Firemen& obj) {$/;"	f	class:Firemen
operator =	work/person_design/include/football_player.h	/^		FootballPlayer& operator=(const FootballPlayer& obj) {$/;"	f	class:FootballPlayer
operator =	work/person_design/include/human.h	/^        Human& operator=(const Human& obj) {$/;"	f	class:Human
operator =	work/person_design/include/mid_school_stu.h	/^		MidSchoolStu& operator=(const MidSchoolStu& obj) {$/;"	f	class:MidSchoolStu
operator =	work/person_design/include/one_hundred_m_runner.h	/^		Runners& operator=(const Runners& obj) {$/;"	f	class:Runners
operator =	work/person_design/include/pilot.h	/^        Pilot& operator=(const Pilot& obj) {$/;"	f	class:Pilot
operator =	work/person_design/include/student.h	/^		Student& operator=(const Student& obj) {$/;"	f	class:Student
operator =	work/person_design/include/university_stu.h	/^		UniversityStu& operator=(const UniversityStu& obj) {$/;"	f	class:UniversityStu
operator ==	github/leveldb-1.18/include/leveldb/slice.h	/^inline bool operator==(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator ==	study/Impala/runtime/timestamp-value.h	/^            bool operator==(const TimestampValue& other) const {$/;"	f	class:impala::TimestampValue
operator ==	test_getline.cpp	/^        operator==(const _CharT* __lhs,$/;"	f	namespace:std
operator ==	test_getline.cpp	/^        operator==(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator ==	test_getline.cpp	/^        operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator ==	test_getline.cpp	/^        operator==(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std
operator ==	test_getline.cpp	/^        operator==(const allocator<_Tp>&, const allocator<_Tp>&)$/;"	f	namespace:std
operator ==	test_getline.cpp	/^        operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator ==	test_getline.cpp	/^        operator==(const basic_string<_CharT>& __lhs,$/;"	f	namespace:std
operator ==	test_getline.cpp	/^        operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std
operator ==	test_getline.cpp	/^        operator==(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std
operator ==	test_getline.cpp	/^        operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)$/;"	f	namespace:__gnu_cxx
operator ==	test_getline.cpp	/^        operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
operator ==	test_getline.cpp	/^        operator==(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator ==	test_getline.cpp	/^        operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator >	study/Impala/runtime/timestamp-value.h	/^            bool operator>(const TimestampValue& other) const {$/;"	f	class:impala::TimestampValue
operator >	test_getline.cpp	/^                operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
operator >	test_getline.cpp	/^        operator>(const _CharT* __lhs,$/;"	f	namespace:std
operator >	test_getline.cpp	/^        operator>(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator >	test_getline.cpp	/^        operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator >	test_getline.cpp	/^        operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator >	test_getline.cpp	/^        operator>(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator >	test_getline.cpp	/^        operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator >	work/test_job/day16/data_packet/include/BakPacket.h	/^		bool operator > (const BakPacket &bak_packet)const$/;"	f	class:BakPacket
operator >=	study/Impala/runtime/timestamp-value.h	/^            bool operator>=(const TimestampValue& other) const {$/;"	f	class:impala::TimestampValue
operator >=	test_getline.cpp	/^                operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std
operator >=	test_getline.cpp	/^        operator>=(const _CharT* __lhs,$/;"	f	namespace:std
operator >=	test_getline.cpp	/^        operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator >=	test_getline.cpp	/^        operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx
operator >=	test_getline.cpp	/^        operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
operator >=	test_getline.cpp	/^        operator>=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std
operator >=	test_getline.cpp	/^        operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std
operator >>	test_getline.cpp	/^                operator>>(bool& __n)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^                operator>>(double& __f)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^                operator>>(float& __f)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^                operator>>(long double& __f)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^                operator>>(long long& __n)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^                operator>>(long& __n)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^                operator>>(unsigned int& __n)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^                operator>>(unsigned long long& __n)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^                operator>>(unsigned long& __n)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^                operator>>(unsigned short& __n)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^                operator>>(void*& __p)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^        operator>>(__streambuf_type* __sbout)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^        operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)$/;"	f	namespace:std
operator >>	test_getline.cpp	/^        operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)$/;"	f	namespace:std
operator >>	test_getline.cpp	/^        operator>>(basic_istream<_CharT, _Traits>& __in,$/;"	f	namespace:std
operator >>	test_getline.cpp	/^        operator>>(basic_istream<char, _Traits>& __in, signed char& __c)$/;"	f	namespace:std
operator >>	test_getline.cpp	/^        operator>>(basic_istream<char, _Traits>& __in, signed char* __s)$/;"	f	namespace:std
operator >>	test_getline.cpp	/^        operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)$/;"	f	namespace:std
operator >>	test_getline.cpp	/^        operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)$/;"	f	namespace:std
operator >>	test_getline.cpp	/^        operator>>(int& __n)$/;"	f	class:std::basic_istream
operator >>	test_getline.cpp	/^        operator>>(short& __n)$/;"	f	class:std::basic_istream
operator []	github/leveldb-1.18/include/leveldb/slice.h	/^  char operator[](size_t n) const {$/;"	f	class:leveldb::Slice
operator []	test_getline.cpp	/^                    operator[](const difference_type& __n) const$/;"	f	class:__gnu_cxx::__normal_iterator
operator []	test_getline.cpp	/^                operator[] (size_type __pos) const$/;"	f	class:std::basic_string
operator []	test_getline.cpp	/^                operator[](difference_type __n) const$/;"	f	class:std::reverse_iterator
operator []	test_getline.cpp	/^                operator[](size_type __pos)$/;"	f	class:std::basic_string
operator ^	test_getline.cpp	/^        operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
operator ^	test_getline.cpp	/^        operator^(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std
operator ^	test_getline.cpp	/^        operator^(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std
operator ^=	test_getline.cpp	/^        operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
operator ^=	test_getline.cpp	/^        operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std
operator ^=	test_getline.cpp	/^        operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std
operator bool	test_getline.cpp	/^                operator bool() const$/;"	f	class:std::basic_istream::sentry
operator bool	test_getline.cpp	/^            operator bool() const$/;"	f	class:std::basic_ostream::sentry
operator delete	test_getline.cpp	/^    inline void operator delete (void*, void*) throw() { }$/;"	f
operator delete[]	test_getline.cpp	/^    inline void operator delete[](void*, void*) throw() { }$/;"	f
operator new	test_getline.cpp	/^    inline void* operator new(std::size_t, void* __p) throw() { return __p; }$/;"	f
operator new[]	test_getline.cpp	/^    inline void* operator new[](std::size_t, void* __p) throw() { return __p; }$/;"	f
operator streamoff	test_getline.cpp	/^                operator streamoff() const { return _M_off; }$/;"	f	class:std::fpos
operator void*	test_getline.cpp	/^            operator void*() const$/;"	f	class:std::basic_ios
operator |	test_getline.cpp	/^        operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
operator |	test_getline.cpp	/^        operator|(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std
operator |	test_getline.cpp	/^        operator|(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std
operator |=	test_getline.cpp	/^        operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std
operator |=	test_getline.cpp	/^        operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std
operator |=	test_getline.cpp	/^        operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std
operator ~	test_getline.cpp	/^        operator~(_Ios_Fmtflags __a)$/;"	f	namespace:std
operator ~	test_getline.cpp	/^        operator~(_Ios_Iostate __a)$/;"	f	namespace:std
operator ~	test_getline.cpp	/^        operator~(_Ios_Openmode __a)$/;"	f	namespace:std
option_config_	github/leveldb-1.18/db/db_test.cc	/^  int option_config_;$/;"	m	class:leveldb::DBTest	file:
options	github/leveldb-1.18/table/table.cc	/^  Options options;$/;"	m	struct:leveldb::Table::Rep	file:
options	github/leveldb-1.18/table/table_builder.cc	/^  Options options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
options_	github/leveldb-1.18/db/autocompact_test.cc	/^  Options options_;$/;"	m	class:leveldb::AutoCompactTest	file:
options_	github/leveldb-1.18/db/corruption_test.cc	/^  Options options_;$/;"	m	class:leveldb::CorruptionTest	file:
options_	github/leveldb-1.18/db/db_impl.h	/^  const Options options_;  \/\/ options_.comparator == &internal_comparator_$/;"	m	class:leveldb::DBImpl
options_	github/leveldb-1.18/db/db_test.cc	/^  const Options options_;$/;"	m	class:leveldb::ModelDB	file:
options_	github/leveldb-1.18/db/repair.cc	/^  Options const options_;$/;"	m	class:leveldb::__anon5::Repairer	file:
options_	github/leveldb-1.18/db/table_cache.h	/^  const Options* options_;$/;"	m	class:leveldb::TableCache
options_	github/leveldb-1.18/db/version_set.h	/^  const Options* const options_;$/;"	m	class:leveldb::VersionSet
options_	github/leveldb-1.18/table/block_builder.h	/^  const Options*        options_;$/;"	m	class:leveldb::BlockBuilder
options_	github/leveldb-1.18/table/table_test.cc	/^  Options options_;$/;"	m	class:leveldb::Harness	file:
options_	github/leveldb-1.18/table/two_level_iterator.cc	/^  const ReadOptions options_;$/;"	m	class:leveldb::__anon19::TwoLevelIterator	file:
ostream	test_getline.cpp	/^    typedef basic_ostream<char> ostream;$/;"	t	namespace:std	file:
ostream_type	test_getline.cpp	/^                typedef basic_ostream<_CharT, _Traits> ostream_type;$/;"	t	class:std::ostreambuf_iterator	file:
ostreambuf_iterator	test_getline.cpp	/^                ostreambuf_iterator(ostream_type& __s) throw ()$/;"	f	class:std::ostreambuf_iterator
ostreambuf_iterator	test_getline.cpp	/^                ostreambuf_iterator(streambuf_type* __s) throw ()$/;"	f	class:std::ostreambuf_iterator
ostreambuf_iterator	test_getline.cpp	/^        class ostreambuf_iterator$/;"	c	namespace:std	file:
ostringstream	test_getline.cpp	/^    typedef basic_ostringstream<char> ostringstream;$/;"	t	namespace:std	file:
other	test_getline.cpp	/^                    { typedef allocator<_Tp1> other; };$/;"	t	struct:std::allocator::rebind	file:
other	test_getline.cpp	/^                    { typedef new_allocator<_Tp1> other; };$/;"	t	struct:__gnu_cxx::new_allocator::rebind	file:
other	test_getline.cpp	/^                { typedef allocator<_Tp1> other; };$/;"	t	struct:std::allocator::rebind	file:
out	test_getline.cpp	/^            static const openmode out = _S_out;$/;"	m	class:std::ios_base	file:
outfile	github/leveldb-1.18/db/db_impl.cc	/^  WritableFile* outfile;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
output_iterator_tag	test_getline.cpp	/^    struct output_iterator_tag { };$/;"	s	namespace:std	file:
outputs	github/leveldb-1.18/db/db_impl.cc	/^  std::vector<Output> outputs;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
overflow	test_getline.cpp	/^                    overflow(int_type = traits_type::eof())$/;"	f	class:std::basic_streambuf
overlapped_bytes_	github/leveldb-1.18/db/version_set.h	/^  int64_t overlapped_bytes_;  \/\/ Bytes of overlap between current output$/;"	m	class:leveldb::Compaction
owned_	github/leveldb-1.18/db/db_test.cc	/^    const bool owned_;  \/\/ Do we own map_$/;"	m	class:leveldb::ModelDB::ModelIter	file:
owned_	github/leveldb-1.18/table/block.h	/^  bool owned_;                  \/\/ Block owns data_[]$/;"	m	class:leveldb::Block
owns_cache_	github/leveldb-1.18/db/db_impl.h	/^  bool owns_cache_;$/;"	m	class:leveldb::DBImpl
owns_cache_	github/leveldb-1.18/db/repair.cc	/^  bool owns_cache_;$/;"	m	class:leveldb::__anon5::Repairer	file:
owns_info_log_	github/leveldb-1.18/db/db_impl.h	/^  bool owns_info_log_;$/;"	m	class:leveldb::DBImpl
owns_info_log_	github/leveldb-1.18/db/repair.cc	/^  bool owns_info_log_;$/;"	m	class:leveldb::__anon5::Repairer	file:
p	study/dada/overload/array.cpp	/^		char *p;$/;"	m	class:Array	file:
p	study/dada/overload/array_another.cpp	/^		char *p;$/;"	m	class:Array	file:
p_cs_precedes	test_getline.cpp	/^        char p_cs_precedes;$/;"	m	struct:lconv	file:
p_sep_by_space	test_getline.cpp	/^        char p_sep_by_space;$/;"	m	struct:lconv	file:
p_sign_posn	test_getline.cpp	/^        char p_sign_posn;$/;"	m	struct:lconv	file:
pair	test_getline.cpp	/^                pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair
pair	test_getline.cpp	/^            pair()$/;"	f	struct:std::pair
pair	test_getline.cpp	/^            pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair
pair	test_getline.cpp	/^        struct pair$/;"	s	namespace:std	file:
paranoid_checks	github/leveldb-1.18/include/leveldb/options.h	/^  bool paranoid_checks;$/;"	m	struct:leveldb::Options
pbackfail	test_getline.cpp	/^                    pbackfail(int_type = traits_type::eof())$/;"	f	class:std::basic_streambuf
pbase	test_getline.cpp	/^                    pbase() const { return _M_out_beg; }$/;"	f	class:std::basic_streambuf
pbump	test_getline.cpp	/^                    pbump(int __n) { _M_out_cur += __n; }$/;"	f	class:std::basic_streambuf
peek	test_getline.cpp	/^        peek(void)$/;"	f	class:std::basic_istream
pending_handle	github/leveldb-1.18/table/table_builder.cc	/^  BlockHandle pending_handle;  \/\/ Handle to add to index block$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_index_entry	github/leveldb-1.18/table/table_builder.cc	/^  bool pending_index_entry;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_outputs_	github/leveldb-1.18/db/db_impl.h	/^  std::set<uint64_t> pending_outputs_;$/;"	m	class:leveldb::DBImpl
phase	github/leveldb-1.18/db/c_test.c	/^const char* phase = "";$/;"	v
pid_t	test_getline.cpp	/^typedef __pid_t pid_t;$/;"	t	file:
play	study/dada/fenshu/virtual.cpp	/^		void play(Animal &p){$/;"	f	class:Player
play	study/dada/fenshu/virtual.cpp	/^		void play(Animal *p){$/;"	f	class:Player
play	work/person_design/src/manipulator.cpp	/^void Manipulator::play(const Human *p) {$/;"	f	class:Manipulator
plus	test_getline.cpp	/^        struct plus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	file:
pointer	test_getline.cpp	/^                typedef _Pointer pointer;$/;"	t	struct:std::iterator	file:
pointer	test_getline.cpp	/^                typedef _Tp* pointer;$/;"	t	class:__gnu_cxx::new_allocator	file:
pointer	test_getline.cpp	/^                typedef typename iterator_traits<_Iterator>::pointer pointer;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
pointer	test_getline.cpp	/^                typedef void* pointer;$/;"	t	class:std::allocator	file:
pointer	test_getline.cpp	/^            typedef _Tp* pointer;$/;"	t	class:std::allocator	file:
pointer	test_getline.cpp	/^            typedef _Tp* pointer;$/;"	t	struct:std::iterator_traits	file:
pointer	test_getline.cpp	/^            typedef const _Tp* pointer;$/;"	t	struct:std::iterator_traits	file:
pointer	test_getline.cpp	/^            typedef typename _CharT_alloc_type::pointer pointer;$/;"	t	class:std::basic_string	file:
pointer	test_getline.cpp	/^            typedef typename _Iterator::pointer pointer;$/;"	t	struct:std::iterator_traits	file:
pointer	test_getline.cpp	/^            typedef typename iterator_traits<_Iterator>::pointer pointer;$/;"	t	class:std::reverse_iterator	file:
pointer_to_binary_function	test_getline.cpp	/^                    pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))$/;"	f	class:std::pointer_to_binary_function
pointer_to_binary_function	test_getline.cpp	/^                pointer_to_binary_function() { }$/;"	f	class:std::pointer_to_binary_function
pointer_to_binary_function	test_getline.cpp	/^        class pointer_to_binary_function$/;"	c	namespace:std	file:
pointer_to_unary_function	test_getline.cpp	/^                pointer_to_unary_function(_Result (*__x)(_Arg))$/;"	f	class:std::pointer_to_unary_function
pointer_to_unary_function	test_getline.cpp	/^            pointer_to_unary_function() { }$/;"	f	class:std::pointer_to_unary_function
pointer_to_unary_function	test_getline.cpp	/^        class pointer_to_unary_function : public unary_function<_Arg, _Result>$/;"	c	namespace:std	file:
policy_	github/leveldb-1.18/table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockBuilder
policy_	github/leveldb-1.18/table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockReader
policy_	github/leveldb-1.18/table/filter_block_test.cc	/^  TestHashFilter policy_;$/;"	m	class:leveldb::FilterBlockTest	file:
policy_	github/leveldb-1.18/util/bloom_test.cc	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::BloomTest	file:
port	github/leveldb-1.18/port/atomic_pointer.h	/^namespace port {$/;"	n	namespace:leveldb
port	github/leveldb-1.18/port/port_example.h	/^namespace port {$/;"	n	namespace:leveldb
port	github/leveldb-1.18/port/port_posix.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	github/leveldb-1.18/port/port_posix.h	/^namespace port {$/;"	n	namespace:leveldb
pos	study/CppPrimer/chap07/class2/Screen.h	/^		typedef std::string::size_type pos;$/;"	t	class:Screen
pos	study/Impala/runtime/timestamp-parse-util.h	/^        int pos;$/;"	m	struct:impala::DateTimeFormatToken
pos_	github/leveldb-1.18/db/db_bench.cc	/^  int pos_;$/;"	m	class:leveldb::__anon7::RandomGenerator	file:
pos_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  int pos_;$/;"	m	class:leveldb::__anon2::RandomGenerator	file:
pos_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  int pos_;$/;"	m	class:leveldb::__anon3::RandomGenerator	file:
pos_	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  uint64_t pos_;$/;"	m	class:leveldb::__anon25::SequentialFileImpl	file:
pos_type	test_getline.cpp	/^                typedef typename traits_type::pos_type pos_type;$/;"	t	class:std::basic_streambuf	file:
pos_type	test_getline.cpp	/^            typedef std::streampos pos_type;$/;"	t	struct:__gnu_cxx::_Char_types	file:
pos_type	test_getline.cpp	/^            typedef streampos pos_type;$/;"	t	struct:std::char_traits	file:
pos_type	test_getline.cpp	/^            typedef typename _Char_types<_CharT>::pos_type pos_type;$/;"	t	struct:__gnu_cxx::char_traits	file:
pos_type	test_getline.cpp	/^            typedef typename _Traits::pos_type pos_type;$/;"	t	class:std::basic_ios	file:
pos_type	test_getline.cpp	/^            typedef typename _Traits::pos_type pos_type;$/;"	t	class:std::basic_iostream	file:
pos_type	test_getline.cpp	/^            typedef typename _Traits::pos_type pos_type;$/;"	t	class:std::basic_istream	file:
pos_type	test_getline.cpp	/^            typedef typename _Traits::pos_type pos_type;$/;"	t	class:std::basic_ostream	file:
pos_type	test_getline.cpp	/^            typedef wstreampos pos_type;$/;"	t	struct:std::char_traits	file:
position	test_base_child.cpp	/^        string position;$/;"	m	class:Staff	file:
positive_sign	test_getline.cpp	/^        char *positive_sign;$/;"	m	struct:lconv	file:
posix_time	study/Impala/runtime/timestamp-parse-util.h	/^    namespace posix_time {$/;"	n	namespace:boost
pptr	test_getline.cpp	/^                    pptr() const { return _M_out_cur; }$/;"	f	class:std::basic_streambuf
precision	study/test/testPrecision.cpp	/^void precision(int prec) {$/;"	f
precision	test_getline.cpp	/^                precision() const$/;"	f	class:std::ios_base
precision	test_getline.cpp	/^                precision(streamsize __prec)$/;"	f	class:std::ios_base
prev	github/leveldb-1.18/util/cache.cc	/^  LRUHandle* prev;$/;"	m	struct:leveldb::__anon27::LRUHandle	file:
prev_	github/leveldb-1.18/db/snapshot.h	/^  SnapshotImpl* prev_;$/;"	m	class:leveldb::SnapshotImpl
prev_	github/leveldb-1.18/db/version_set.h	/^  Version* prev_;               \/\/ Previous version in linked list$/;"	m	class:leveldb::Version
prev_log_number_	github/leveldb-1.18/db/version_edit.h	/^  uint64_t prev_log_number_;$/;"	m	class:leveldb::VersionEdit
prev_log_number_	github/leveldb-1.18/db/version_set.h	/^  uint64_t prev_log_number_;  \/\/ 0 or backing store for memtable being compacted$/;"	m	class:leveldb::VersionSet
print	study/CppPrimer/chap07/class1/Sales_data.cpp	/^ostream& print(ostream &os, const Sales_data &item)$/;"	f
print	study/boost/chap03/shared_ptr_2.cpp	/^        void print() {$/;"	f	class:shared
print	study/test.cpp	/^void print(int*) {$/;"	f
print	test_getline.cpp	/^        static const mask print = _ISprint;$/;"	m	struct:std::ctype_base	file:
print_func	study/boost/chap03/shared_ptr_2.cpp	/^void print_func(shared_ptr<int> p) {$/;"	f
pthread_attr_t	test_getline.cpp	/^} pthread_attr_t;$/;"	t	typeref:union:__anon75	file:
pthread_barrier_t	test_getline.cpp	/^} pthread_barrier_t;$/;"	t	typeref:union:__anon84	file:
pthread_barrierattr_t	test_getline.cpp	/^} pthread_barrierattr_t;$/;"	t	typeref:union:__anon85	file:
pthread_cond_t	test_getline.cpp	/^} pthread_cond_t;$/;"	t	typeref:union:__anon78	file:
pthread_condattr_t	test_getline.cpp	/^} pthread_condattr_t;$/;"	t	typeref:union:__anon80	file:
pthread_key_t	test_getline.cpp	/^typedef unsigned int pthread_key_t;$/;"	t	file:
pthread_mutex_t	test_getline.cpp	/^} pthread_mutex_t;$/;"	t	typeref:union:__anon76	file:
pthread_mutexattr_t	test_getline.cpp	/^} pthread_mutexattr_t;$/;"	t	typeref:union:__anon77	file:
pthread_once_t	test_getline.cpp	/^typedef int pthread_once_t;$/;"	t	file:
pthread_rwlock_t	test_getline.cpp	/^} pthread_rwlock_t;$/;"	t	typeref:union:__anon81	file:
pthread_rwlockattr_t	test_getline.cpp	/^} pthread_rwlockattr_t;$/;"	t	typeref:union:__anon83	file:
pthread_spinlock_t	test_getline.cpp	/^typedef volatile int pthread_spinlock_t;$/;"	t	file:
pthread_t	test_getline.cpp	/^typedef unsigned long int pthread_t;$/;"	t	file:
ptr_fun	test_getline.cpp	/^        ptr_fun(_Result (*__x)(_Arg))$/;"	f	namespace:std
ptr_fun	test_getline.cpp	/^        ptr_fun(_Result (*__x)(_Arg1, _Arg2))$/;"	f	namespace:std
ptrdiff_t	test_getline.cpp	/^typedef long int ptrdiff_t;$/;"	t	file:
pubimbue	test_getline.cpp	/^                    pubimbue(const locale &__loc)$/;"	f	class:std::basic_streambuf
pubseekoff	test_getline.cpp	/^                    pubseekoff(off_type __off, ios_base::seekdir __way,$/;"	f	class:std::basic_streambuf
pubseekpos	test_getline.cpp	/^                    pubseekpos(pos_type __sp,$/;"	f	class:std::basic_streambuf
pubsetbuf	test_getline.cpp	/^                    pubsetbuf(char_type* __s, streamsize __n)$/;"	f	class:std::basic_streambuf
pubsync	test_getline.cpp	/^                    pubsync() { return this->sync(); }$/;"	f	class:std::basic_streambuf
punct	test_getline.cpp	/^        static const mask punct = _ISpunct;$/;"	m	struct:std::ctype_base	file:
push_back	test_getline.cpp	/^                push_back(_CharT __c)$/;"	f	class:std::basic_string
put	test_getline.cpp	/^                put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const$/;"	f	class:std::num_put
put	test_getline.cpp	/^                put(iter_type __s, ios_base& __f, char_type __fill, double __v) const$/;"	f	class:std::num_put
put	test_getline.cpp	/^                put(iter_type __s, ios_base& __f, char_type __fill, long __v) const$/;"	f	class:std::num_put
put	test_getline.cpp	/^                put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const$/;"	f	class:std::num_put
put	test_getline.cpp	/^                put(iter_type __s, ios_base& __f, char_type __fill,$/;"	f	class:std::num_put
put	test_getline.cpp	/^        put(char_type __c)$/;"	f	class:std::basic_ostream
putOutFire	work/person_design/src/firemen.cpp	/^void Firemen::putOutFire() const {$/;"	f	class:Firemen
putback	test_getline.cpp	/^        putback(char_type __c)$/;"	f	class:std::basic_istream
pword	test_getline.cpp	/^                pword(int __ix)$/;"	f	class:std::ios_base
quantity	study/CppDesign/C06/CLib.h	/^    int quantity;   \/\/ Number of storage spaces$/;"	m	struct:CStashTag
queue_	github/leveldb-1.18/util/env_posix.cc	/^  BGQueue queue_;$/;"	m	class:leveldb::__anon32::PosixEnv	file:
quit_flag_	github/leveldb-1.18/db/skiplist_test.cc	/^  port::AtomicPointer quit_flag_;$/;"	m	class:leveldb::TestState	file:
rand	github/leveldb-1.18/db/db_bench.cc	/^  Random rand;         \/\/ Has different seeds for different threads$/;"	m	struct:leveldb::__anon7::ThreadState	file:
rand_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
rand_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
random_access_iterator_tag	test_getline.cpp	/^    struct random_access_iterator_tag : public bidirectional_iterator_tag { };$/;"	s	namespace:std	file:
random_read_counter_	github/leveldb-1.18/db/db_test.cc	/^  AtomicCounter random_read_counter_;$/;"	m	class:leveldb::SpecialEnv	file:
rbegin	test_getline.cpp	/^                rbegin() const$/;"	f	class:std::basic_string
rbegin	test_getline.cpp	/^                rbegin()$/;"	f	class:std::basic_string
rdbuf	test_getline.cpp	/^                rdbuf() const$/;"	f	class:std::basic_ios
rdbuf	test_getline.cpp	/^        basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios
rdstate	test_getline.cpp	/^                rdstate() const$/;"	f	class:std::basic_ios
read	study/CppPrimer/chap07/class1/Sales_data.cpp	/^istream& read(istream &is, Sales_data &item)$/;"	f
read	test_getline.cpp	/^        read(char_type* __s, streamsize __n)$/;"	f	class:std::basic_istream
reader_	github/leveldb-1.18/db/log_test.cc	/^  Reader reader_;$/;"	m	class:leveldb::log::LogTest	file:
reading_	github/leveldb-1.18/db/log_test.cc	/^  bool reading_;$/;"	m	class:leveldb::log::LogTest	file:
reads_	github/leveldb-1.18/db/db_bench.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
readsome	test_getline.cpp	/^        readsome(char_type* __s, streamsize __n)$/;"	f	class:std::basic_istream
rebind	test_getline.cpp	/^                    struct rebind$/;"	s	class:__gnu_cxx::new_allocator	file:
rebind	test_getline.cpp	/^                    struct rebind$/;"	s	class:std::allocator	file:
rebind	test_getline.cpp	/^                struct rebind$/;"	s	class:std::allocator	file:
reference	test_getline.cpp	/^                typedef _Reference reference;$/;"	t	struct:std::iterator	file:
reference	test_getline.cpp	/^                typedef _Tp& reference;$/;"	t	class:__gnu_cxx::new_allocator	file:
reference	test_getline.cpp	/^                typedef typename iterator_traits<_Iterator>::reference reference;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
reference	test_getline.cpp	/^            typedef _Tp& reference;$/;"	t	class:std::allocator	file:
reference	test_getline.cpp	/^            typedef _Tp& reference;$/;"	t	struct:std::iterator_traits	file:
reference	test_getline.cpp	/^            typedef const _Tp& reference;$/;"	t	struct:std::iterator_traits	file:
reference	test_getline.cpp	/^            typedef typename _CharT_alloc_type::reference reference;$/;"	t	class:std::basic_string	file:
reference	test_getline.cpp	/^            typedef typename _Iterator::reference reference;$/;"	t	struct:std::iterator_traits	file:
reference	test_getline.cpp	/^            typedef typename iterator_traits<_Iterator>::reference reference;$/;"	t	class:std::reverse_iterator	file:
refs	github/leveldb-1.18/db/version_edit.h	/^  int refs;$/;"	m	struct:leveldb::FileMetaData
refs	github/leveldb-1.18/util/cache.cc	/^  uint32_t refs;$/;"	m	struct:leveldb::__anon27::LRUHandle	file:
refs_	github/leveldb-1.18/db/memtable.h	/^  int refs_;$/;"	m	class:leveldb::MemTable
refs_	github/leveldb-1.18/db/version_set.h	/^  int refs_;                    \/\/ Number of live refs to this version$/;"	m	class:leveldb::Version
refs_	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  int refs_;  \/\/ Protected by refs_mutex_;$/;"	m	class:leveldb::__anon25::FileState	file:
refs_mutex_	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  port::Mutex refs_mutex_;$/;"	m	class:leveldb::__anon25::FileState	file:
remove_prefix	github/leveldb-1.18/include/leveldb/slice.h	/^  void remove_prefix(size_t n) {$/;"	f	class:leveldb::Slice
rend	test_getline.cpp	/^                rend() const$/;"	f	class:std::basic_string
rend	test_getline.cpp	/^                rend()$/;"	f	class:std::basic_string
rep	github/leveldb-1.18/db/c.cc	/^  Env* rep;$/;"	m	struct:leveldb_env_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	m	struct:leveldb_cache_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	m	struct:leveldb_filelock_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	m	struct:leveldb_iterator_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	m	struct:leveldb_logger_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	m	struct:leveldb_options_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	m	struct:leveldb_randomfile_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	m	struct:leveldb_readoptions_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	m	struct:leveldb_seqfile_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	m	struct:leveldb_snapshot_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	m	struct:leveldb_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	m	struct:leveldb_writablefile_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	m	struct:leveldb_writebatch_t	file:
rep	github/leveldb-1.18/db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	m	struct:leveldb_writeoptions_t	file:
rep_	github/leveldb-1.18/db/dbformat.h	/^  std::string rep_;$/;"	m	class:leveldb::InternalKey
rep_	github/leveldb-1.18/include/leveldb/cache.h	/^  Rep* rep_;$/;"	m	class:leveldb::Cache
rep_	github/leveldb-1.18/include/leveldb/table.h	/^  Rep* rep_;$/;"	m	class:leveldb::Table
rep_	github/leveldb-1.18/include/leveldb/table_builder.h	/^  Rep* rep_;$/;"	m	class:leveldb::TableBuilder
rep_	github/leveldb-1.18/include/leveldb/write_batch.h	/^  std::string rep_;  \/\/ See comment in write_batch.cc for the format of rep_$/;"	m	class:leveldb::WriteBatch
rep_	github/leveldb-1.18/port/atomic_pointer.h	/^  void* rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	github/leveldb-1.18/port/port_example.h	/^  intptr_t rep_;$/;"	m	class:leveldb::port::AtomicPointer
replace	test_getline.cpp	/^                replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)$/;"	f	class:std::basic_string
replace	test_getline.cpp	/^                replace(iterator __i1, iterator __i2, const _CharT* __s)$/;"	f	class:std::basic_string
replace	test_getline.cpp	/^                replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string
replace	test_getline.cpp	/^                replace(iterator __i1, iterator __i2, const basic_string& __str)$/;"	f	class:std::basic_string
replace	test_getline.cpp	/^                replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)$/;"	f	class:std::basic_string
replace	test_getline.cpp	/^                replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)$/;"	f	class:std::basic_string
replace	test_getline.cpp	/^                replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string
replace	test_getline.cpp	/^                replace(size_type __pos, size_type __n, const basic_string& __str)$/;"	f	class:std::basic_string
replace	test_getline.cpp	/^                replace(size_type __pos, size_type __n1, const _CharT* __s)$/;"	f	class:std::basic_string
replace	test_getline.cpp	/^                replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)$/;"	f	class:std::basic_string
replace	test_getline.cpp	/^                replace(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string
replace	test_getline.cpp	/^        replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string
report_	github/leveldb-1.18/db/log_test.cc	/^  ReportCollector report_;$/;"	m	class:leveldb::log::LogTest	file:
reporter_	github/leveldb-1.18/db/log_reader.h	/^  Reporter* const reporter_;$/;"	m	class:leveldb::log::Reader
reserve	test_getline.cpp	/^        reserve(size_type __res)$/;"	f	class:std::basic_string
resize	study/dada/overload/array.cpp	/^		void resize(int n) {$/;"	f	class:Array
resize	test_getline.cpp	/^                resize(size_type __n)$/;"	f	class:std::basic_string
resize	test_getline.cpp	/^        resize(size_type __n, _CharT __c)$/;"	f	class:std::basic_string
restart_index_	github/leveldb-1.18/table/block.cc	/^  uint32_t restart_index_;  \/\/ Index of restart block in which current_ falls$/;"	m	class:leveldb::Block::Iter	file:
restart_interval	github/leveldb-1.18/table/table_test.cc	/^  int restart_interval;$/;"	m	struct:leveldb::TestArgs	file:
restart_offset_	github/leveldb-1.18/table/block.h	/^  uint32_t restart_offset_;     \/\/ Offset in data_ of restart array$/;"	m	class:leveldb::Block
restarts_	github/leveldb-1.18/table/block.cc	/^  uint32_t const restarts_;     \/\/ Offset of restart array (list of fixed32)$/;"	m	class:leveldb::Block::Iter	file:
restarts_	github/leveldb-1.18/table/block_builder.h	/^  std::vector<uint32_t> restarts_;    \/\/ Restart points$/;"	m	class:leveldb::BlockBuilder
result_	github/leveldb-1.18/table/filter_block.h	/^  std::string result_;            \/\/ Filter data computed so far$/;"	m	class:leveldb::FilterBlockBuilder
result_type	test_getline.cpp	/^            typedef _Result result_type;$/;"	t	struct:std::binary_function	file:
result_type	test_getline.cpp	/^            typedef _Result result_type;$/;"	t	struct:std::unary_function	file:
returned_partial_	github/leveldb-1.18/db/log_test.cc	/^    bool returned_partial_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
revenue	study/CppPrimer/chap07/class1/Sales_data.h	/^		double 			revenue;$/;"	m	class:Sales_data
reverse_compare	github/leveldb-1.18/table/table_test.cc	/^  bool reverse_compare;$/;"	m	struct:leveldb::TestArgs	file:
reverse_iterator	test_getline.cpp	/^                reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator
reverse_iterator	test_getline.cpp	/^                reverse_iterator(iterator_type __x) : current(__x) { }$/;"	f	class:std::reverse_iterator
reverse_iterator	test_getline.cpp	/^            reverse_iterator() : current() { }$/;"	f	class:std::reverse_iterator
reverse_iterator	test_getline.cpp	/^            reverse_iterator(const reverse_iterator& __x)$/;"	f	class:std::reverse_iterator
reverse_iterator	test_getline.cpp	/^            typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::basic_string	file:
reverse_iterator	test_getline.cpp	/^        class reverse_iterator$/;"	c	namespace:std	file:
reverse_key_comparator	github/leveldb-1.18/table/table_test.cc	/^static ReverseKeyComparator reverse_key_comparator;$/;"	m	namespace:leveldb	file:
rfind	test_getline.cpp	/^                rfind(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string
rfind	test_getline.cpp	/^                rfind(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string
rfind	test_getline.cpp	/^        rfind(_CharT __c, size_type __pos) const$/;"	f	class:std::basic_string
rfind	test_getline.cpp	/^        rfind(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:std::basic_string
right	test_getline.cpp	/^            static const fmtflags right = _S_right;$/;"	m	class:std::ios_base	file:
right	test_getline.cpp	/^        right(ios_base& __base)$/;"	f	namespace:std
rnd_	github/leveldb-1.18/db/db_iter.cc	/^  Random rnd_;$/;"	m	class:leveldb::__anon10::DBIter	file:
rnd_	github/leveldb-1.18/db/skiplist.h	/^  Random rnd_;$/;"	m	class:leveldb::SkipList
saved_key_	github/leveldb-1.18/db/db_iter.cc	/^  std::string saved_key_;     \/\/ == current key when direction_==kReverse$/;"	m	class:leveldb::__anon10::DBIter	file:
saved_value_	github/leveldb-1.18/db/db_iter.cc	/^  std::string saved_value_;   \/\/ == current raw value when direction_==kReverse$/;"	m	class:leveldb::__anon10::DBIter	file:
sbumpc	test_getline.cpp	/^                    sbumpc()$/;"	f	class:std::basic_streambuf
scan_is	test_getline.cpp	/^                scan_is(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base
scan_is	test_getline.cpp	/^        scan_is(mask __m, const char* __low, const char* __high) const$/;"	f	class:std::ctype
scan_not	test_getline.cpp	/^                scan_not(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base
scan_not	test_getline.cpp	/^        scan_not(mask __m, const char* __low, const char* __high) const$/;"	f	class:std::ctype
sched_param	test_getline.cpp	/^struct sched_param$/;"	s	file:
scientific	test_getline.cpp	/^            static const fmtflags scientific = _S_scientific;$/;"	m	class:std::ios_base	file:
scientific	test_getline.cpp	/^        scientific(ios_base& __base)$/;"	f	namespace:std
score	study/dada/person/person.h	/^		double score;$/;"	m	class:Student
score	study/dada/person_job/person.h	/^		double score;$/;"	m	class:Student
second	study/Impala/runtime/timestamp-parse-util.cpp	/^  int second;$/;"	m	struct:impala::DateTimeParseResult	file:
second	study/dada/clock_struct/clock.h	/^	int second;$/;"	m	struct:Time
second	test_getline.cpp	/^            _T2 second;$/;"	m	struct:std::pair	file:
second_argument_type	test_getline.cpp	/^            typedef _Arg2 second_argument_type;$/;"	t	struct:std::binary_function	file:
second_type	test_getline.cpp	/^            typedef _T2 second_type;$/;"	t	struct:std::pair	file:
seconds_	github/leveldb-1.18/db/db_bench.cc	/^  double seconds_;$/;"	m	class:leveldb::__anon7::Stats	file:
seed_	github/leveldb-1.18/db/db_impl.h	/^  uint32_t seed_;                \/\/ For sampling.$/;"	m	class:leveldb::DBImpl
seed_	github/leveldb-1.18/db/skiplist_test.cc	/^  int seed_;$/;"	m	class:leveldb::TestState	file:
seed_	github/leveldb-1.18/util/random.h	/^  uint32_t seed_;$/;"	m	class:leveldb::Random
seek_dir	test_getline.cpp	/^            typedef int seek_dir;$/;"	t	class:std::ios_base	file:
seek_file	github/leveldb-1.18/db/version_set.h	/^    FileMetaData* seek_file;$/;"	m	struct:leveldb::Version::GetStats
seek_file_level	github/leveldb-1.18/db/version_set.h	/^    int seek_file_level;$/;"	m	struct:leveldb::Version::GetStats
seekdir	test_getline.cpp	/^            typedef _Ios_Seekdir seekdir;$/;"	t	class:std::ios_base	file:
seekg	test_getline.cpp	/^        seekg(off_type __off, ios_base::seekdir __dir)$/;"	f	class:std::basic_istream
seekg	test_getline.cpp	/^        seekg(pos_type __pos)$/;"	f	class:std::basic_istream
seekoff	test_getline.cpp	/^                    seekoff(off_type, ios_base::seekdir,$/;"	f	class:std::basic_streambuf
seekp	test_getline.cpp	/^        seekp(off_type __off, ios_base::seekdir __dir)$/;"	f	class:std::basic_ostream
seekp	test_getline.cpp	/^        seekp(pos_type __pos)$/;"	f	class:std::basic_ostream
seekpos	test_getline.cpp	/^                    seekpos(pos_type,$/;"	f	class:std::basic_streambuf
seen_key_	github/leveldb-1.18/db/version_set.h	/^  bool seen_key_;             \/\/ Some output key has been seen$/;"	m	class:leveldb::Compaction
selfIntroduction	work/person_design/src/basketball_player.cpp	/^void BasketballPlayer::selfIntroduction() const {$/;"	f	class:BasketballPlayer
selfIntroduction	work/person_design/src/firemen.cpp	/^void Firemen::selfIntroduction() const {$/;"	f	class:Firemen
selfIntroduction	work/person_design/src/football_player.cpp	/^void FootballPlayer::selfIntroduction() const {$/;"	f	class:FootballPlayer
selfIntroduction	work/person_design/src/human.cpp	/^void Human::selfIntroduction() const {$/;"	f	class:Human
selfIntroduction	work/person_design/src/mid_school_stu.cpp	/^void MidSchoolStu::selfIntroduction() const {$/;"	f	class:MidSchoolStu
selfIntroduction	work/person_design/src/one_hundred_m_runner.cpp	/^void Runners::selfIntroduction() const {$/;"	f	class:Runners
selfIntroduction	work/person_design/src/pilot.cpp	/^void Pilot::selfIntroduction() const {$/;"	f	class:Pilot
selfIntroduction	work/person_design/src/university_stu.cpp	/^void UniversityStu::selfIntroduction() const {$/;"	f	class:UniversityStu
sentry	test_getline.cpp	/^        class basic_istream<_CharT, _Traits>::sentry$/;"	c	class:std::basic_istream	file:
sentry	test_getline.cpp	/^        class basic_ostream<_CharT, _Traits>::sentry$/;"	c	class:std::basic_ostream	file:
sentry	test_getline.cpp	/^        sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)$/;"	f	class:std::basic_istream::sentry
sentry	test_getline.cpp	/^        sentry(basic_ostream<_CharT, _Traits>& __os)$/;"	f	class:std::basic_ostream::sentry
sequence	github/leveldb-1.18/db/dbformat.h	/^  SequenceNumber sequence;$/;"	m	struct:leveldb::ParsedInternalKey
sequence_	github/leveldb-1.18/db/db_iter.cc	/^  SequenceNumber const sequence_;$/;"	m	class:leveldb::__anon10::DBIter	file:
sequence_	github/leveldb-1.18/db/write_batch.cc	/^  SequenceNumber sequence_;$/;"	m	class:leveldb::__anon13::MemTableInserter	file:
set	study/CppPrimer/chap07/class2/Screen.h	/^Screen &Screen::set(char c)$/;"	f	class:Screen
set	study/CppPrimer/chap07/class2/Screen.h	/^Screen &Screen::set(pos r, pos col, char ch)$/;"	f	class:Screen
set	study/dada/overload/array.cpp	/^		void set(int index, char value) {$/;"	f	class:Array
setAge	study/dada/animal/animal.h	/^		void setAge(int age_t){$/;"	f	class:Animal
setAge	study/dada/static/statics.cpp	/^		virtual void setAge(int age) { itsAge = age; }$/;"	f	class:Cat
setAge	work/person_design/src/firemen.cpp	/^void Firemen::setAge(const int& age_t) {$/;"	f	class:Firemen
setAge	work/person_design/src/human.cpp	/^void Human::setAge(const int& age_t) {$/;"	f	class:Human
setAge	work/person_design/src/pilot.cpp	/^void Pilot::setAge(const int& age_t) {$/;"	f	class:Pilot
setAirlineComp	work/person_design/src/pilot.cpp	/^void Pilot::setAirlineComp(const string& airline_comp_t) {$/;"	f	class:Pilot
setClub	work/person_design/src/basketball_player.cpp	/^void BasketballPlayer::setClub(string club_t) {$/;"	f	class:BasketballPlayer
setClub	work/person_design/src/football_player.cpp	/^void FootballPlayer::setClub(string club_t) {$/;"	f	class:FootballPlayer
setFireStation	work/person_design/src/firemen.cpp	/^void Firemen::setFireStation(const string& fire_station_t) {$/;"	f	class:Firemen
setGender	work/person_design/src/human.cpp	/^void Human::setGender(const bool& gender_t) {$/;"	f	class:Human
setGrade	work/person_design/src/student.cpp	/^void Student::setGrade(string grade_t) {$/;"	f	class:Student
setID	work/person_design/src/human.cpp	/^void Human::setID(const string& ID_t) {$/;"	f	class:Human
setModelDrived	work/person_design/src/pilot.cpp	/^void Pilot::setModelDrived(const string& model_drived_t) {$/;"	f	class:Pilot
setName	study/dada/animal/animal.h	/^		void setName(string name_t){$/;"	f	class:Animal
setName	work/person_design/src/human.cpp	/^void Human::setName(const string& name_t) {$/;"	f	class:Human
setName	work/person_design/src/manipulator.cpp	/^void Manipulator::setName(string name_t) {$/;"	f	class:Manipulator
setSalaries	work/person_design/src/basketball_player.cpp	/^void BasketballPlayer::setSalaries(const int& training_years_t) {$/;"	f	class:BasketballPlayer
setSalaries	work/person_design/src/firemen.cpp	/^void Firemen::setSalaries(const int& m_age) {$/;"	f	class:Firemen
setSalaries	work/person_design/src/football_player.cpp	/^void FootballPlayer::setSalaries(const int& training_years_t) {$/;"	f	class:FootballPlayer
setSalaries	work/person_design/src/one_hundred_m_runner.cpp	/^void Runners::setSalaries(const int& training_years_t) {$/;"	f	class:Runners
setSalaries	work/person_design/src/pilot.cpp	/^void Pilot::setSalaries(const int& age_t) {$/;"	f	class:Pilot
setSchool	work/person_design/src/student.cpp	/^void Student::setSchool(string school_t) {$/;"	f	class:Student
setStudentID	work/person_design/src/student.cpp	/^void Student::setStudentID(string student_ID_t) {$/;"	f	class:Student
setTrainingYears	work/person_design/src/basketball_player.cpp	/^void BasketballPlayer::setTrainingYears(const int& training_years_t) {$/;"	f	class:BasketballPlayer
setTrainingYears	work/person_design/src/football_player.cpp	/^void FootballPlayer::setTrainingYears(const int& training_years_t) {$/;"	f	class:FootballPlayer
setTrainingYears	work/person_design/src/one_hundred_m_runner.cpp	/^void Runners::setTrainingYears(const int& training_years_t) {$/;"	f	class:Runners
setWeight	study/dada/animal/animal.h	/^		void setWeight(double weight_t){$/;"	f	class:Bird
setYearsOfService	work/person_design/src/firemen.cpp	/^void Firemen::setYearsOfService(const int& years_of_service_t) {$/;"	f	class:Firemen
set_ID	study/dada/person_job/person.h	/^		void set_ID(string ID_t){$/;"	f	class:Human
set_age	study/dada/person/person.h	/^		void set_age(int age_){$/;"	f	class:Person
set_age	study/dada/person_job/person.h	/^		void set_age(int age_t){$/;"	f	class:Human
set_date	study/Impala/runtime/timestamp-value.h	/^            void set_date(const boost::gregorian::date d) { date_ = d; }$/;"	f	class:impala::TimestampValue
set_index_handle	github/leveldb-1.18/table/format.h	/^  void set_index_handle(const BlockHandle& h) {$/;"	f	class:leveldb::Footer
set_metaindex_handle	github/leveldb-1.18/table/format.h	/^  void set_metaindex_handle(const BlockHandle& h) { metaindex_handle_ = h; }$/;"	f	class:leveldb::Footer
set_name	study/dada/person_job/person.h	/^		void set_name(string name_t){$/;"	f	class:Human
set_offset	github/leveldb-1.18/table/format.h	/^  void set_offset(uint64_t offset) { offset_ = offset; }$/;"	f	class:leveldb::BlockHandle
set_size	github/leveldb-1.18/table/format.h	/^  void set_size(uint64_t size) { size_ = size; }$/;"	f	class:leveldb::BlockHandle
set_time	study/Impala/runtime/timestamp-value.h	/^            void set_time(const boost::posix_time::time_duration t) { time_ = t; }$/;"	f	class:impala::TimestampValue
setbuf	test_getline.cpp	/^                    setbuf(char_type*, streamsize)$/;"	f	class:std::basic_streambuf
setf	test_getline.cpp	/^                setf(fmtflags __fmtfl)$/;"	f	class:std::ios_base
setf	test_getline.cpp	/^                setf(fmtflags __fmtfl, fmtflags __mask)$/;"	f	class:std::ios_base
setg	test_getline.cpp	/^                    setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)$/;"	f	class:std::basic_streambuf
setp	test_getline.cpp	/^                    setp(char_type* __pbeg, char_type* __pend)$/;"	f	class:std::basic_streambuf
setstate	test_getline.cpp	/^                setstate(iostate __state)$/;"	f	class:std::basic_ios
sgetc	test_getline.cpp	/^                    sgetc()$/;"	f	class:std::basic_streambuf
sgetn	test_getline.cpp	/^                    sgetn(char_type* __s, streamsize __n)$/;"	f	class:std::basic_streambuf
shard_	github/leveldb-1.18/util/cache.cc	/^  LRUCache shard_[kNumShards];$/;"	m	class:leveldb::__anon27::ShardedLRUCache	file:
shared	github/leveldb-1.18/db/db_bench.cc	/^    SharedState* shared;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
shared	github/leveldb-1.18/db/db_bench.cc	/^  SharedState* shared;$/;"	m	struct:leveldb::__anon7::ThreadState	file:
shared	study/boost/chap03/shared_ptr_2.cpp	/^        shared(shared_ptr<int> p_):m_p(p_) { } \/\/ constructor init m_p$/;"	f	class:shared
shared	study/boost/chap03/shared_ptr_2.cpp	/^class shared {$/;"	c	file:
should_fail	study/Impala/runtime/timestamp-test.cpp	/^  bool should_fail;$/;"	m	struct:impala::TimestampFormatTC	file:
should_format	study/Impala/runtime/timestamp-test.cpp	/^  bool should_format;$/;"	m	struct:impala::TimestampTC	file:
shout	study/dada/fenshu/virtual.cpp	/^		virtual void shout() {$/;"	f	class:Dog
shout	study/dada/fenshu/virtual.cpp	/^		virtual void shout(){$/;"	f	class:Animal
shout	study/dada/fenshu/virtual.cpp	/^		virtual void shout(){$/;"	f	class:Cat
shout	study/dada/fenshu/virtual.cpp	/^		virtual void shout(){$/;"	f	class:Jiafeimao
show	study/dada/animal/animal.h	/^		void show(){$/;"	f	class:Animal
show	study/dada/animal/animal.h	/^		void show(){$/;"	f	class:Bird
show	study/dada/noname_obj/const_obj.h	/^		void show() const{$/;"	f	class:A
show	study/dada/noname_obj/const_obj.h	/^		void show() {$/;"	f	class:A
show	study/dada/noname_obj/noname_obj.h	/^		void show(){$/;"	f	class:A
show	study/dada/overload/array_another.cpp	/^		void show() {$/;"	f	class:Array
show	study/dada/overload/copy_constructor.cpp	/^		void show() {$/;"	f	class:A
show	study/dada/overload/copy_constructor.cpp	/^void show(A obj) {$/;"	f
show	study/dada/overload/custom_copy.cpp	/^		void show() const {$/;"	f	class:A
show	study/dada/overload/friend.cpp	/^		void show() {$/;"	f	class:A
show	study/dada/overload/reference.cpp	/^		void show() const {$/;"	f	class:A
show	study/dada/overload/reference.cpp	/^void show(A obj) {$/;"	f
show	study/dada/person/person.h	/^		void show(){$/;"	f	class:Person
show	study/dada/person_job/person.h	/^		void show(){$/;"	f	class:Human
showbase	test_getline.cpp	/^            static const fmtflags showbase = _S_showbase;$/;"	m	class:std::ios_base	file:
showbase	test_getline.cpp	/^        showbase(ios_base& __base)$/;"	f	namespace:std
showmanyc	test_getline.cpp	/^                    showmanyc() { return 0; }$/;"	f	class:std::basic_streambuf
showpoint	test_getline.cpp	/^            static const fmtflags showpoint = _S_showpoint;$/;"	m	class:std::ios_base	file:
showpoint	test_getline.cpp	/^        showpoint(ios_base& __base)$/;"	f	namespace:std
showpos	test_getline.cpp	/^            static const fmtflags showpos = _S_showpos;$/;"	m	class:std::ios_base	file:
showpos	test_getline.cpp	/^        showpos(ios_base& __base)$/;"	f	namespace:std
shutting_down_	github/leveldb-1.18/db/db_impl.h	/^  port::AtomicPointer shutting_down_;$/;"	m	class:leveldb::DBImpl
size	github/leveldb-1.18/include/leveldb/slice.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Slice
size	github/leveldb-1.18/table/block.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Block
size	github/leveldb-1.18/table/format.h	/^  uint64_t size() const { return size_; }$/;"	f	class:leveldb::BlockHandle
size	study/CppDesign/C06/CLib.h	/^    int size;       \/\/ Size of each space$/;"	m	struct:CStashTag
size	study/dada/overload/array.cpp	/^		int size() {$/;"	f	class:Array
size	study/dada/overload/array_another.cpp	/^		int size() {$/;"	f	class:Array
size	test_getline.cpp	/^                size() const$/;"	f	class:std::basic_string
size_	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  uint64_t size_;$/;"	m	class:leveldb::__anon25::FileState	file:
size_	github/leveldb-1.18/include/leveldb/slice.h	/^  size_t size_;$/;"	m	class:leveldb::Slice
size_	github/leveldb-1.18/table/block.h	/^  size_t size_;$/;"	m	class:leveldb::Block
size_	github/leveldb-1.18/table/format.h	/^  uint64_t size_;$/;"	m	class:leveldb::BlockHandle
size_t	test_getline.cpp	/^typedef long unsigned int size_t;$/;"	t	file:
size_type	test_getline.cpp	/^                typedef size_t size_type;$/;"	t	class:__gnu_cxx::new_allocator	file:
size_type	test_getline.cpp	/^                typedef size_t size_type;$/;"	t	class:std::allocator	file:
size_type	test_getline.cpp	/^            typedef size_t size_type;$/;"	t	class:std::allocator	file:
size_type	test_getline.cpp	/^            typedef typename _CharT_alloc_type::size_type size_type;$/;"	t	class:std::basic_string	file:
skipws	test_getline.cpp	/^            static const fmtflags skipws = _S_skipws;$/;"	m	class:std::ios_base	file:
skipws	test_getline.cpp	/^        skipws(ios_base& __base)$/;"	f	namespace:std
sleep	study/dada/fenshu/virtual.cpp	/^		virtual void sleep(){$/;"	f	class:Animal
sleep	study/dada/fenshu/virtual.cpp	/^		void sleep(){$/;"	f	class:Cat
sleep	study/dada/fenshu/virtual.cpp	/^		void sleep(){$/;"	f	class:Dog
sleep	study/dada/fenshu/virtual.cpp	/^		void sleep(){$/;"	f	class:Jiafeimao
sleep	work/person_design/src/basketball_player.cpp	/^void BasketballPlayer::sleep() const {$/;"	f	class:BasketballPlayer
sleep	work/person_design/src/firemen.cpp	/^void Firemen::sleep() const {$/;"	f	class:Firemen
sleep	work/person_design/src/football_player.cpp	/^void FootballPlayer::sleep() const {$/;"	f	class:FootballPlayer
sleep	work/person_design/src/mid_school_stu.cpp	/^void MidSchoolStu::sleep() const {$/;"	f	class:MidSchoolStu
sleep	work/person_design/src/one_hundred_m_runner.cpp	/^void Runners::sleep() const { $/;"	f	class:Runners
sleep	work/person_design/src/pilot.cpp	/^void Pilot::sleep() const {$/;"	f	class:Pilot
sleep	work/person_design/src/university_stu.cpp	/^void UniversityStu::sleep() const {$/;"	f	class:UniversityStu
smallest	github/leveldb-1.18/db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
smallest	github/leveldb-1.18/db/version_edit.h	/^  InternalKey smallest;       \/\/ Smallest internal key served by table$/;"	m	struct:leveldb::FileMetaData
smallest_snapshot	github/leveldb-1.18/db/db_impl.cc	/^  SequenceNumber smallest_snapshot;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
snapshot	github/leveldb-1.18/include/leveldb/options.h	/^  const Snapshot* snapshot;$/;"	m	struct:leveldb::ReadOptions
snapshots_	github/leveldb-1.18/db/db_impl.h	/^  SnapshotList snapshots_;$/;"	m	class:leveldb::DBImpl
snextc	test_getline.cpp	/^                    snextc()$/;"	f	class:std::basic_streambuf
socklen_t	test_getline.cpp	/^    typedef __socklen_t socklen_t;$/;"	t	file:
some_member	study/CppPrimer/chap07/class2/Screen.h	/^void Screen::some_member() const$/;"	f	class:Screen
source_	github/leveldb-1.18/db/log_test.cc	/^  StringSource source_;$/;"	m	class:leveldb::log::LogTest	file:
source_	github/leveldb-1.18/table/table_test.cc	/^  StringSource* source_;$/;"	m	class:leveldb::TableConstructor	file:
space	test_getline.cpp	/^        static const mask space = _ISspace;$/;"	m	struct:std::ctype_base	file:
space_	github/leveldb-1.18/db/dbformat.h	/^  char space_[200];      \/\/ Avoid allocation for short keys$/;"	m	class:leveldb::LookupKey
sputbackc	test_getline.cpp	/^                    sputbackc(char_type __c)$/;"	f	class:std::basic_streambuf
sputc	test_getline.cpp	/^                    sputc(char_type __c)$/;"	f	class:std::basic_streambuf
sputn	test_getline.cpp	/^                    sputn(const char_type* __s, streamsize __n)$/;"	f	class:std::basic_streambuf
ss_	github/leveldb-1.18/util/testharness.h	/^  std::stringstream ss_;$/;"	m	class:leveldb::test::Tester
ssize_t	test_getline.cpp	/^    typedef __ssize_t ssize_t;$/;"	t	file:
start	github/leveldb-1.18/db/db_bench.cc	/^  bool start;$/;"	m	struct:leveldb::__anon7::SharedState	file:
start	github/leveldb-1.18/include/leveldb/db.h	/^  Slice start;          \/\/ Included in the range$/;"	m	struct:leveldb::Range
start_	github/leveldb-1.18/db/db_bench.cc	/^  double start_;$/;"	m	class:leveldb::__anon7::Stats	file:
start_	github/leveldb-1.18/db/dbformat.h	/^  const char* start_;$/;"	m	class:leveldb::LookupKey
start_	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	github/leveldb-1.18/table/filter_block.h	/^  std::vector<size_t> start_;     \/\/ Starting index in keys_ of each key$/;"	m	class:leveldb::FilterBlockBuilder
started_bgthread_	github/leveldb-1.18/util/env_posix.cc	/^  bool started_bgthread_;$/;"	m	class:leveldb::__anon32::PosixEnv	file:
starts_with	github/leveldb-1.18/include/leveldb/slice.h	/^  bool starts_with(const Slice& x) const {$/;"	f	class:leveldb::Slice
state	github/leveldb-1.18/db/db_test.cc	/^  MTState* state;$/;"	m	struct:leveldb::__anon15::MTThread	file:
state	github/leveldb-1.18/db/version_set.cc	/^  SaverState state;$/;"	m	struct:leveldb::__anon11::Saver	file:
state	test_getline.cpp	/^                    state() const$/;"	f	class:std::fpos
state	test_getline.cpp	/^                    state(_StateT __st)$/;"	f	class:std::fpos
state_	github/leveldb-1.18/db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_comparator_t	file:
state_	github/leveldb-1.18/db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_filterpolicy_t	file:
state_	github/leveldb-1.18/db/skiplist_test.cc	/^  ReaderState state_;$/;"	m	class:leveldb::TestState	file:
state_	github/leveldb-1.18/include/leveldb/status.h	/^  const char* state_;$/;"	m	class:leveldb::Status
state_cv_	github/leveldb-1.18/db/skiplist_test.cc	/^  port::CondVar state_cv_;$/;"	m	class:leveldb::TestState	file:
state_type	test_getline.cpp	/^            typedef mbstate_t state_type;$/;"	t	struct:std::char_traits	file:
state_type	test_getline.cpp	/^            typedef std::mbstate_t state_type;$/;"	t	struct:__gnu_cxx::_Char_types	file:
state_type	test_getline.cpp	/^            typedef typename _Char_types<_CharT>::state_type state_type;$/;"	t	struct:__gnu_cxx::char_traits	file:
stats	github/leveldb-1.18/db/db_bench.cc	/^  Stats stats;$/;"	m	struct:leveldb::__anon7::ThreadState	file:
stats_	github/leveldb-1.18/db/db_impl.h	/^  CompactionStats stats_[config::kNumLevels];$/;"	m	class:leveldb::DBImpl
status	github/leveldb-1.18/db/db_impl.cc	/^  Status status;$/;"	m	struct:leveldb::DBImpl::Writer	file:
status	github/leveldb-1.18/db/db_iter.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon10::DBIter
status	github/leveldb-1.18/db/db_test.cc	/^    virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::ModelDB::ModelIter
status	github/leveldb-1.18/db/memtable.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::MemTableIterator
status	github/leveldb-1.18/db/version_set.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::Version::LevelFileNumIterator
status	github/leveldb-1.18/table/block.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::Block::Iter
status	github/leveldb-1.18/table/iterator.cc	/^                virtual Status status() const { return status_; }$/;"	f	class:leveldb::__anon18::EmptyIterator
status	github/leveldb-1.18/table/iterator_wrapper.h	/^  Status status() const     { assert(iter_); return iter_->status(); }$/;"	f	class:leveldb::IteratorWrapper
status	github/leveldb-1.18/table/merger.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon20::MergingIterator
status	github/leveldb-1.18/table/table.cc	/^  Status status;$/;"	m	struct:leveldb::Table::Rep	file:
status	github/leveldb-1.18/table/table_builder.cc	/^  Status status;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
status	github/leveldb-1.18/table/table_builder.cc	/^Status TableBuilder::status() const {$/;"	f	class:leveldb::TableBuilder
status	github/leveldb-1.18/table/table_test.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::KeyConvertingIterator
status	github/leveldb-1.18/table/two_level_iterator.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
status_	github/leveldb-1.18/db/db_iter.cc	/^  Status status_;$/;"	m	class:leveldb::__anon10::DBIter	file:
status_	github/leveldb-1.18/table/block.cc	/^  Status status_;$/;"	m	class:leveldb::Block::Iter	file:
status_	github/leveldb-1.18/table/iterator.cc	/^                Status status_;$/;"	m	class:leveldb::__anon18::EmptyIterator	file:
status_	github/leveldb-1.18/table/table_test.cc	/^  mutable Status status_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
status_	github/leveldb-1.18/table/two_level_iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon19::TwoLevelIterator	file:
std	test_getline.cpp	/^    namespace std$/;"	n	file:
std	test_getline.cpp	/^namespace std __attribute__ ((__visibility__ ("default"))) {$/;"	n	file:
std	test_getline.cpp	/^namespace std$/;"	n	file:
stop	github/leveldb-1.18/db/db_test.cc	/^  port::AtomicPointer stop;$/;"	m	struct:leveldb::__anon15::MTState	file:
storage	study/CppDesign/C06/CLib.h	/^    unsigned char* storage;$/;"	m	struct:CStashTag
stossc	test_getline.cpp	/^                    stossc()$/;"	f	class:std::basic_streambuf
str	study/Impala/runtime/timestamp-test.cpp	/^  const char* str;$/;"	m	struct:impala::TimestampFormatTC	file:
str	study/Impala/runtime/timestamp-test.cpp	/^  const char* str;$/;"	m	struct:impala::TimestampTC	file:
str	study/Impala/runtime/timestamp-test.cpp	/^  const char* str;$/;"	m	struct:impala::TimestampToken	file:
str	work/test_job/day12/data_packet/include/BakPacket.h	/^	const char 	*str;$/;"	m	struct:BakPacket
str	work/test_job/day16/data_packet/include/BakPacket.h	/^		string 	str;$/;"	m	class:BakPacket
str	work/test_job/day17/data_packet/include/BakPacket.h	/^	const char 	*str;$/;"	m	struct:BakPacket_
str_should_fail	study/Impala/runtime/timestamp-test.cpp	/^  bool str_should_fail;$/;"	m	struct:impala::TimestampTC	file:
str_vec	work/test_job/day12/data_packet/include/DataPacket.h	/^		vector<string> 		str_vec;$/;"	m	class:DataPacket
str_vec	work/test_job/day16/data_packet/include/DataPacket.h	/^		vector<string> 		str_vec;$/;"	m	class:DataPacket
str_vec	work/test_job/day17/data_packet/include/DataPacket.h	/^		vector<string> 		str_vec;$/;"	m	class:DataPacket
streambuf	test_getline.cpp	/^    typedef basic_streambuf<char> streambuf;$/;"	t	namespace:std	file:
streambuf_type	test_getline.cpp	/^                typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::ostreambuf_iterator	file:
streambuf_type	test_getline.cpp	/^            typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::istreambuf_iterator	file:
streamoff	test_getline.cpp	/^            typedef std::streamoff streamoff;$/;"	t	class:std::ios_base	file:
streamoff	test_getline.cpp	/^    typedef long streamoff;$/;"	t	namespace:std	file:
streampos	test_getline.cpp	/^            typedef std::streampos streampos;$/;"	t	class:std::ios_base	file:
streampos	test_getline.cpp	/^    typedef fpos<mbstate_t> streampos;$/;"	t	namespace:std	file:
streamsize	test_getline.cpp	/^    typedef ptrdiff_t streamsize;$/;"	t	namespace:std	file:
string	test_getline.cpp	/^    typedef basic_string<char> string;$/;"	t	namespace:std	file:
string_type	test_getline.cpp	/^            typedef basic_string<_CharT> string_type;$/;"	t	class:std::collate	file:
string_type	test_getline.cpp	/^            typedef basic_string<_CharT> string_type;$/;"	t	class:std::collate_byname	file:
string_type	test_getline.cpp	/^            typedef basic_string<_CharT> string_type;$/;"	t	class:std::numpunct	file:
string_type	test_getline.cpp	/^            typedef basic_string<_CharT> string_type;$/;"	t	class:std::numpunct_byname	file:
stringbuf	test_getline.cpp	/^    typedef basic_stringbuf<char> stringbuf;$/;"	t	namespace:std	file:
stringstream	test_getline.cpp	/^    typedef basic_stringstream<char> stringstream;$/;"	t	namespace:std	file:
study	work/person_design/src/mid_school_stu.cpp	/^void MidSchoolStu::study() const {$/;"	f	class:MidSchoolStu
study	work/person_design/src/university_stu.cpp	/^void UniversityStu::study() const {$/;"	f	class:UniversityStu
substr	test_getline.cpp	/^                substr(size_type __pos = 0, size_type __n = npos) const$/;"	f	class:std::basic_string
sum_	github/leveldb-1.18/util/histogram.h	/^  double sum_;$/;"	m	class:leveldb::Histogram
sum_squares_	github/leveldb-1.18/util/histogram.h	/^  double sum_squares_;$/;"	m	class:leveldb::Histogram
sungetc	test_getline.cpp	/^                    sungetc()$/;"	f	class:std::basic_streambuf
swap	test_getline.cpp	/^        swap(_Tp& __a, _Tp& __b)$/;"	f	namespace:std
swap	test_getline.cpp	/^        swap(basic_string& __s)$/;"	f	class:std::basic_string
swap	test_getline.cpp	/^        swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std
swap	work/test_job/day10/SortTime.cpp	/^void swap(int& m, int& n)$/;"	f
swap	work/test_job/sort/src/SortTime.cpp	/^void swap(int& m, int& n)$/;"	f
swap	work/test_job/sort_job/SortTime.cpp	/^void swap(int& m, int& n)$/;"	f
swap_ranges	test_getline.cpp	/^        swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std
sync	github/leveldb-1.18/db/db_impl.cc	/^  bool sync;$/;"	m	struct:leveldb::DBImpl::Writer	file:
sync	github/leveldb-1.18/include/leveldb/options.h	/^  bool sync;$/;"	m	struct:leveldb::WriteOptions
sync	test_getline.cpp	/^                    sync() { return 0; }$/;"	f	class:std::basic_streambuf
sync	test_getline.cpp	/^        sync(void)$/;"	f	class:std::basic_istream
t_	github/leveldb-1.18/db/skiplist_test.cc	/^  ConcurrentTest t_;$/;"	m	class:leveldb::TestState	file:
table	github/leveldb-1.18/db/table_cache.cc	/^  Table* table;$/;"	m	struct:leveldb::TableAndFile	file:
table	test_getline.cpp	/^                    table() const throw()$/;"	f	class:std::ctype
table0_	github/leveldb-1.18/util/crc32c.cc	/^static const uint32_t table0_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table1_	github/leveldb-1.18/util/crc32c.cc	/^static const uint32_t table1_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table2_	github/leveldb-1.18/util/crc32c.cc	/^static const uint32_t table2_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table3_	github/leveldb-1.18/util/crc32c.cc	/^static const uint32_t table3_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table_	github/leveldb-1.18/db/memtable.h	/^  Table table_;$/;"	m	class:leveldb::MemTable
table_	github/leveldb-1.18/table/table_test.cc	/^  Table* table_;$/;"	m	class:leveldb::TableConstructor	file:
table_	github/leveldb-1.18/util/cache.cc	/^  HandleTable table_;$/;"	m	class:leveldb::__anon27::LRUCache	file:
table_cache_	github/leveldb-1.18/db/db_impl.h	/^  TableCache* table_cache_;$/;"	m	class:leveldb::DBImpl
table_cache_	github/leveldb-1.18/db/repair.cc	/^  TableCache* table_cache_;$/;"	m	class:leveldb::__anon5::Repairer	file:
table_cache_	github/leveldb-1.18/db/version_set.h	/^  TableCache* const table_cache_;$/;"	m	class:leveldb::VersionSet
table_numbers_	github/leveldb-1.18/db/repair.cc	/^  std::vector<uint64_t> table_numbers_;$/;"	m	class:leveldb::__anon5::Repairer	file:
table_size	test_getline.cpp	/^                static const size_t table_size = 1 + static_cast<unsigned char>(-1);$/;"	m	class:std::ctype	file:
tables_	github/leveldb-1.18/db/repair.cc	/^  std::vector<TableInfo> tables_;$/;"	m	class:leveldb::__anon5::Repairer	file:
target	github/leveldb-1.18/include/leveldb/env.h	/^  Env* target() const { return target_; }$/;"	f	class:leveldb::EnvWrapper
target_	github/leveldb-1.18/include/leveldb/env.h	/^  Env* target_;$/;"	m	class:leveldb::EnvWrapper
tel	test_base_child.cpp	/^        string tel;$/;"	m	class:Staff	file:
telepathicFunction	work/person_design/src/human.cpp	/^void Human::telepathicFunction() {$/;"	f	class:Human
tellg	test_getline.cpp	/^        tellg(void)$/;"	f	class:std::basic_istream
tellp	test_getline.cpp	/^        tellp()$/;"	f	class:std::basic_ostream
terminate_handler	test_getline.cpp	/^        typedef void (*terminate_handler) ();$/;"	t	namespace:std	file:
test	github/leveldb-1.18/db/db_test.cc	/^  DBTest* test;$/;"	m	struct:leveldb::__anon15::MTState	file:
test	github/leveldb-1.18/util/testharness.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	github/leveldb-1.18/util/testharness.h	/^namespace test {$/;"	n	namespace:leveldb
test	github/leveldb-1.18/util/testutil.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	github/leveldb-1.18/util/testutil.h	/^namespace test {$/;"	n	namespace:leveldb
tests	github/leveldb-1.18/util/testharness.cc	/^std::vector<Test>* tests;$/;"	m	namespace:leveldb::test::__anon29	file:
thousands_sep	test_getline.cpp	/^                thousands_sep() const$/;"	f	class:std::numpunct
thousands_sep	test_getline.cpp	/^        char *thousands_sep;$/;"	m	struct:lconv	file:
thread	github/leveldb-1.18/db/db_bench.cc	/^    ThreadState* thread;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
thread_done	github/leveldb-1.18/db/db_test.cc	/^  port::AtomicPointer thread_done[kNumThreads];$/;"	m	struct:leveldb::__anon15::MTState	file:
tid	github/leveldb-1.18/db/db_bench.cc	/^  int tid;             \/\/ 0..n-1 when running in n threads$/;"	m	struct:leveldb::__anon7::ThreadState	file:
tie	test_getline.cpp	/^                tie() const$/;"	f	class:std::basic_ios
tie	test_getline.cpp	/^                tie(basic_ostream<_CharT, _Traits>* __tiestr)$/;"	f	class:std::basic_ios
time	study/Impala/runtime/timestamp-value.h	/^            const boost::posix_time::time_duration& time() const { return time_; }$/;"	f	class:impala::TimestampValue
time	test_getline.cpp	/^            static const category time = 1L << 3;$/;"	m	class:std::locale	file:
time_	study/Impala/runtime/timestamp-value.h	/^            boost::posix_time::time_duration time_;$/;"	m	class:impala::TimestampValue
time_t	test_getline.cpp	/^typedef __time_t time_t;$/;"	t	file:
timer_t	test_getline.cpp	/^    typedef __timer_t timer_t;$/;"	t	file:
timespec	test_getline.cpp	/^struct timespec$/;"	s	file:
tiny_cache_	github/leveldb-1.18/db/autocompact_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::AutoCompactTest	file:
tiny_cache_	github/leveldb-1.18/db/corruption_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::CorruptionTest	file:
tm	test_getline.cpp	/^    struct tm$/;"	s	file:
tm_end	work/test_job/day10/SortTime.h	/^		struct timeval tm_end;$/;"	m	class:SortTime	typeref:struct:SortTime::timeval
tm_end	work/test_job/day16/data_packet/src/Time.cpp	/^static struct timeval tm_end;$/;"	v	typeref:struct:timeval	file:
tm_end	work/test_job/sort/include/SortTime.h	/^		struct timeval tm_end;$/;"	m	class:SortTime	typeref:struct:SortTime::timeval
tm_end	work/test_job/sort_job/SortTime.h	/^		struct timeval tm_end;$/;"	m	class:SortTime	typeref:struct:SortTime::timeval
tm_gmtoff	test_getline.cpp	/^        long int tm_gmtoff;$/;"	m	struct:tm	file:
tm_hour	test_getline.cpp	/^        int tm_hour;$/;"	m	struct:tm	file:
tm_isdst	test_getline.cpp	/^        int tm_isdst;$/;"	m	struct:tm	file:
tm_mday	test_getline.cpp	/^        int tm_mday;$/;"	m	struct:tm	file:
tm_min	test_getline.cpp	/^        int tm_min;$/;"	m	struct:tm	file:
tm_mon	test_getline.cpp	/^        int tm_mon;$/;"	m	struct:tm	file:
tm_sec	test_getline.cpp	/^        int tm_sec;$/;"	m	struct:tm	file:
tm_start	work/test_job/day10/SortTime.h	/^		struct timeval tm_start;$/;"	m	class:SortTime	typeref:struct:SortTime::timeval
tm_start	work/test_job/day16/data_packet/src/Time.cpp	/^static struct timeval tm_start;$/;"	v	typeref:struct:timeval	file:
tm_start	work/test_job/sort/include/SortTime.h	/^		struct timeval tm_start;$/;"	m	class:SortTime	typeref:struct:SortTime::timeval
tm_start	work/test_job/sort_job/SortTime.h	/^		struct timeval tm_start;$/;"	m	class:SortTime	typeref:struct:SortTime::timeval
tm_wday	test_getline.cpp	/^        int tm_wday;$/;"	m	struct:tm	file:
tm_yday	test_getline.cpp	/^        int tm_yday;$/;"	m	struct:tm	file:
tm_year	test_getline.cpp	/^        int tm_year;$/;"	m	struct:tm	file:
tm_zone	test_getline.cpp	/^        __const char *tm_zone;$/;"	m	struct:tm	file:
tmp_	github/leveldb-1.18/db/memtable.cc	/^  std::string tmp_;       \/\/ For passing to EncodeKey$/;"	m	class:leveldb::MemTableIterator	file:
tmp_batch_	github/leveldb-1.18/db/db_impl.h	/^  WriteBatch* tmp_batch_;$/;"	m	class:leveldb::DBImpl
tmp_keys_	github/leveldb-1.18/table/filter_block.h	/^  std::vector<Slice> tmp_keys_;   \/\/ policy_->CreateFilter() argument$/;"	m	class:leveldb::FilterBlockBuilder
tmp_storage	github/leveldb-1.18/db/db_impl.h	/^    InternalKey tmp_storage;    \/\/ Used to keep track of compaction progress$/;"	m	struct:leveldb::DBImpl::ManualCompaction
to_char_type	test_getline.cpp	/^                to_char_type(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits
to_char_type	test_getline.cpp	/^                to_char_type(const int_type& __c)$/;"	f	struct:std::char_traits
to_int_type	test_getline.cpp	/^                to_int_type(const char_type& __c)$/;"	f	struct:__gnu_cxx::char_traits
to_int_type	test_getline.cpp	/^                to_int_type(const char_type& __c)$/;"	f	struct:std::char_traits
toks	study/Impala/runtime/timestamp-parse-util.h	/^        std::vector<DateTimeFormatToken> toks;$/;"	m	struct:impala::DateTimeFormatContext
tolower	test_getline.cpp	/^                    tolower(char_type __c) const$/;"	f	class:std::ctype
tolower	test_getline.cpp	/^                    tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::ctype
tolower	test_getline.cpp	/^                tolower(char_type __c) const$/;"	f	class:std::__ctype_abstract_base
tolower	test_getline.cpp	/^                tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base
tolower	test_getline.cpp	/^        tolower(_CharT __c, const locale& __loc)$/;"	f	namespace:std
total	github/leveldb-1.18/db/db_bench.cc	/^  int total;$/;"	m	struct:leveldb::__anon7::SharedState	file:
total_bytes	github/leveldb-1.18/db/db_impl.cc	/^  uint64_t total_bytes;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
toupper	test_getline.cpp	/^                    toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::ctype
toupper	test_getline.cpp	/^                    toupper(char_type __c) const$/;"	f	class:std::ctype
toupper	test_getline.cpp	/^                toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base
toupper	test_getline.cpp	/^                toupper(char_type __c) const$/;"	f	class:std::__ctype_abstract_base
toupper	test_getline.cpp	/^        toupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std
train	work/person_design/src/basketball_player.cpp	/^void BasketballPlayer::train() const {$/;"	f	class:BasketballPlayer
train	work/person_design/src/football_player.cpp	/^void FootballPlayer::train() const {$/;"	f	class:FootballPlayer
train	work/person_design/src/one_hundred_m_runner.cpp	/^void Runners::train() const {$/;"	f	class:Runners
traits_type	test_getline.cpp	/^                typedef _Traits traits_type;$/;"	t	class:std::basic_istream::sentry	file:
traits_type	test_getline.cpp	/^                typedef _Traits traits_type;$/;"	t	class:std::basic_streambuf	file:
traits_type	test_getline.cpp	/^                typedef _Traits traits_type;$/;"	t	class:std::ostreambuf_iterator	file:
traits_type	test_getline.cpp	/^            typedef _Traits traits_type;$/;"	t	class:std::basic_ios	file:
traits_type	test_getline.cpp	/^            typedef _Traits traits_type;$/;"	t	class:std::basic_iostream	file:
traits_type	test_getline.cpp	/^            typedef _Traits traits_type;$/;"	t	class:std::basic_istream	file:
traits_type	test_getline.cpp	/^            typedef _Traits traits_type;$/;"	t	class:std::basic_ostream	file:
traits_type	test_getline.cpp	/^            typedef _Traits traits_type;$/;"	t	class:std::basic_string	file:
traits_type	test_getline.cpp	/^            typedef _Traits traits_type;$/;"	t	class:std::istreambuf_iterator	file:
transform	test_getline.cpp	/^                transform(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate
truename	test_getline.cpp	/^                truename() const$/;"	f	class:std::numpunct
trunc	test_getline.cpp	/^            static const openmode trunc = _S_trunc;$/;"	m	class:std::ios_base	file:
ts	study/Impala/runtime/timestamp-test.cpp	/^  const long ts;$/;"	m	struct:impala::TimestampFormatTC	file:
tv_nsec	test_getline.cpp	/^    long int tv_nsec;$/;"	m	struct:timespec	file:
tv_sec	test_getline.cpp	/^    __time_t tv_sec;$/;"	m	struct:timespec	file:
type	github/leveldb-1.18/db/dbformat.h	/^  ValueType type;$/;"	m	struct:leveldb::ParsedInternalKey
type	github/leveldb-1.18/table/table_test.cc	/^  TestType type;$/;"	m	struct:leveldb::TestArgs	file:
type	study/Impala/runtime/timestamp-parse-util.h	/^        DateTimeFormatTokenType type;$/;"	m	struct:impala::DateTimeFormatToken
type_crc_	github/leveldb-1.18/db/log_writer.h	/^  uint32_t type_crc_[kMaxRecordType + 1];$/;"	m	class:leveldb::log::Writer
tz_offset	study/Impala/runtime/timestamp-parse-util.cpp	/^  boost::posix_time::time_duration tz_offset;$/;"	m	struct:impala::DateTimeParseResult	file:
ucmp	github/leveldb-1.18/db/version_set.cc	/^  const Comparator* ucmp;$/;"	m	struct:leveldb::__anon11::Saver	file:
uflow	test_getline.cpp	/^                    uflow()$/;"	f	class:std::basic_streambuf
uid_t	test_getline.cpp	/^    typedef __uid_t uid_t;$/;"	t	file:
uint16_t	github/leveldb-1.18/port/win/stdint.h	/^typedef unsigned short        uint16_t;$/;"	t
uint32_t	github/leveldb-1.18/port/win/stdint.h	/^typedef unsigned int          uint32_t;$/;"	t
uint64_t	github/leveldb-1.18/port/win/stdint.h	/^typedef unsigned long long    uint64_t;$/;"	t
uint8_t	github/leveldb-1.18/port/win/stdint.h	/^typedef unsigned char         uint8_t;$/;"	t
unary_function	test_getline.cpp	/^        struct unary_function$/;"	s	namespace:std	file:
unary_negate	test_getline.cpp	/^                    unary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::unary_negate
unary_negate	test_getline.cpp	/^        class unary_negate$/;"	c	namespace:std	file:
underflow	test_getline.cpp	/^                    underflow()$/;"	f	class:std::basic_streambuf
unexpected_handler	test_getline.cpp	/^        typedef void (*unexpected_handler) ();$/;"	t	namespace:std	file:
unget	test_getline.cpp	/^        unget(void)$/;"	f	class:std::basic_istream
unitbuf	test_getline.cpp	/^            static const fmtflags unitbuf = _S_unitbuf;$/;"	m	class:std::ios_base	file:
unitbuf	test_getline.cpp	/^        unitbuf(ios_base& __base)$/;"	f	namespace:std
units_sold	study/CppPrimer/chap07/class1/Sales_data.h	/^		unsigned 		units_sold;$/;"	m	class:Sales_data
unsetf	test_getline.cpp	/^                unsetf(fmtflags __mask)$/;"	f	class:std::ios_base
upper	test_getline.cpp	/^        static const mask upper = _ISupper;$/;"	m	struct:std::ctype_base	file:
uppercase	test_getline.cpp	/^            static const fmtflags uppercase = _S_uppercase;$/;"	m	class:std::ios_base	file:
uppercase	test_getline.cpp	/^        uppercase(ios_base& __base)$/;"	f	namespace:std
usage_	github/leveldb-1.18/util/cache.cc	/^  size_t usage_;$/;"	m	class:leveldb::__anon27::LRUCache	file:
use_facet	test_getline.cpp	/^        use_facet(const locale& __loc)$/;"	f	namespace:std
use_local_tz_for_unix_timestamp_conversions	study/Impala/runtime/timestamp-value.h	/^DECLARE_bool(use_local_tz_for_unix_timestamp_conversions);$/;"	v
useconds_t	test_getline.cpp	/^    typedef __useconds_t useconds_t;$/;"	t	file:
user_comparator	github/leveldb-1.18/db/db_impl.h	/^  const Comparator* user_comparator() const {$/;"	f	class:leveldb::DBImpl
user_comparator	github/leveldb-1.18/db/dbformat.h	/^  const Comparator* user_comparator() const { return user_comparator_; }$/;"	f	class:leveldb::InternalKeyComparator
user_comparator_	github/leveldb-1.18/db/db_iter.cc	/^  const Comparator* const user_comparator_;$/;"	m	class:leveldb::__anon10::DBIter	file:
user_comparator_	github/leveldb-1.18/db/dbformat.h	/^  const Comparator* user_comparator_;$/;"	m	class:leveldb::InternalKeyComparator
user_function	github/leveldb-1.18/util/env_posix.cc	/^  void (*user_function)(void*);$/;"	m	struct:leveldb::__anon32::__anon33::StartThreadState	file:
user_key	github/leveldb-1.18/db/dbformat.h	/^  Slice user_key() const { return ExtractUserKey(rep_); }$/;"	f	class:leveldb::InternalKey
user_key	github/leveldb-1.18/db/dbformat.h	/^  Slice user_key() const { return Slice(kstart_, end_ - kstart_ - 8); }$/;"	f	class:leveldb::LookupKey
user_key	github/leveldb-1.18/db/dbformat.h	/^  Slice user_key;$/;"	m	struct:leveldb::ParsedInternalKey
user_key	github/leveldb-1.18/db/version_set.cc	/^  Slice user_key;$/;"	m	struct:leveldb::__anon11::Saver	file:
user_policy_	github/leveldb-1.18/db/dbformat.h	/^  const FilterPolicy* const user_policy_;$/;"	m	class:leveldb::InternalFilterPolicy
val	github/leveldb-1.18/util/env_test.cc	/^  int val;$/;"	m	struct:leveldb::State	file:
val	study/Impala/runtime/timestamp-parse-util.h	/^        const char* val;$/;"	m	struct:impala::DateTimeFormatToken
val	study/Impala/runtime/timestamp-test.cpp	/^  int val;$/;"	m	struct:impala::TimestampToken	file:
valid_	github/leveldb-1.18/db/db_iter.cc	/^  bool valid_;$/;"	m	class:leveldb::__anon10::DBIter	file:
valid_	github/leveldb-1.18/table/iterator_wrapper.h	/^  bool valid_;$/;"	m	class:leveldb::IteratorWrapper
value	github/leveldb-1.18/db/db_iter.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon10::DBIter
value	github/leveldb-1.18/db/db_test.cc	/^    virtual Slice value() const { return iter_->second; }$/;"	f	class:leveldb::ModelDB::ModelIter
value	github/leveldb-1.18/db/memtable.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::MemTableIterator
value	github/leveldb-1.18/db/version_set.cc	/^  Slice value() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
value	github/leveldb-1.18/db/version_set.cc	/^  std::string* value;$/;"	m	struct:leveldb::__anon11::Saver	file:
value	github/leveldb-1.18/table/block.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::Block::Iter
value	github/leveldb-1.18/table/iterator.cc	/^                Slice value() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon18::EmptyIterator
value	github/leveldb-1.18/table/iterator_wrapper.h	/^  Slice value() const       { assert(Valid()); return iter_->value(); }$/;"	f	class:leveldb::IteratorWrapper
value	github/leveldb-1.18/table/merger.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon20::MergingIterator
value	github/leveldb-1.18/table/table_test.cc	/^  virtual Slice value() const { return iter_->value(); }$/;"	f	class:leveldb::KeyConvertingIterator
value	github/leveldb-1.18/table/two_level_iterator.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
value	github/leveldb-1.18/util/cache.cc	/^  void* value;$/;"	m	struct:leveldb::__anon27::LRUHandle	file:
value	test_getline.cpp	/^            typename _Operation::first_argument_type value;$/;"	m	class:std::binder1st	file:
value	test_getline.cpp	/^            typename _Operation::second_argument_type value;$/;"	m	class:std::binder2nd	file:
value_	github/leveldb-1.18/table/block.cc	/^  Slice value_;$/;"	m	class:leveldb::Block::Iter	file:
value_buf_	github/leveldb-1.18/db/version_set.cc	/^  mutable char value_buf_[16];$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
value_size_	github/leveldb-1.18/db/db_bench.cc	/^  int value_size_;$/;"	m	class:leveldb::Benchmark	file:
value_type	test_getline.cpp	/^                typedef _Tp value_type;$/;"	t	class:__gnu_cxx::new_allocator	file:
value_type	test_getline.cpp	/^                typedef _Tp value_type;$/;"	t	struct:std::iterator	file:
value_type	test_getline.cpp	/^                typedef typename iterator_traits<_Iterator>::value_type value_type;$/;"	t	class:__gnu_cxx::__normal_iterator	file:
value_type	test_getline.cpp	/^                typedef void value_type;$/;"	t	class:std::allocator	file:
value_type	test_getline.cpp	/^            typedef _Tp value_type;$/;"	t	class:std::allocator	file:
value_type	test_getline.cpp	/^            typedef _Tp value_type;$/;"	t	struct:std::iterator_traits	file:
value_type	test_getline.cpp	/^            typedef typename _Iterator::value_type value_type;$/;"	t	struct:std::iterator_traits	file:
value_type	test_getline.cpp	/^            typedef typename _Traits::char_type value_type;$/;"	t	class:std::basic_string	file:
verify_checksums	github/leveldb-1.18/include/leveldb/options.h	/^  bool verify_checksums;$/;"	m	struct:leveldb::ReadOptions
version	github/leveldb-1.18/db/db_impl.cc	/^  Version* version;$/;"	m	struct:leveldb::__anon8::IterState	file:
versions_	github/leveldb-1.18/db/db_impl.h	/^  VersionSet* versions_;$/;"	m	class:leveldb::DBImpl
vset_	github/leveldb-1.18/db/version_set.cc	/^  VersionSet* vset_;$/;"	m	class:leveldb::VersionSet::Builder	file:
vset_	github/leveldb-1.18/db/version_set.h	/^  VersionSet* vset_;            \/\/ VersionSet to which this Version belongs$/;"	m	class:leveldb::Version
wctrans_t	test_getline.cpp	/^    typedef __const __int32_t *wctrans_t;$/;"	t	file:
wctype_t	test_getline.cpp	/^typedef unsigned long int wctype_t;$/;"	t	file:
weight	study/dada/animal/animal.h	/^		double weight;$/;"	m	class:Bird
wfilebuf	test_getline.cpp	/^    typedef basic_filebuf<wchar_t> wfilebuf;$/;"	t	namespace:std	file:
wfstream	test_getline.cpp	/^    typedef basic_fstream<wchar_t> wfstream;$/;"	t	namespace:std	file:
widen	test_getline.cpp	/^                    widen(char __c) const$/;"	f	class:std::ctype
widen	test_getline.cpp	/^                    widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype
widen	test_getline.cpp	/^                widen(char __c) const$/;"	f	class:std::__ctype_abstract_base
widen	test_getline.cpp	/^                widen(char __c) const$/;"	f	class:std::basic_ios
widen	test_getline.cpp	/^                widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::__ctype_abstract_base
width	study/CppPrimer/chap07/class2/Screen.h	/^		pos height		= 0,	width	= 0;$/;"	m	class:Screen
width	test_getline.cpp	/^                width() const$/;"	f	class:std::ios_base
width	test_getline.cpp	/^                width(streamsize __wide)$/;"	f	class:std::ios_base
wifstream	test_getline.cpp	/^    typedef basic_ifstream<wchar_t> wifstream;$/;"	t	namespace:std	file:
wint_t	test_getline.cpp	/^typedef unsigned int wint_t;$/;"	t	file:
wios	test_getline.cpp	/^    typedef basic_ios<wchar_t> wios;$/;"	t	namespace:std	file:
wiostream	test_getline.cpp	/^    typedef basic_iostream<wchar_t> wiostream;$/;"	t	namespace:std	file:
wistream	test_getline.cpp	/^    typedef basic_istream<wchar_t> wistream;$/;"	t	namespace:std	file:
wistringstream	test_getline.cpp	/^    typedef basic_istringstream<wchar_t> wistringstream;$/;"	t	namespace:std	file:
wofstream	test_getline.cpp	/^    typedef basic_ofstream<wchar_t> wofstream;$/;"	t	namespace:std	file:
wostream	test_getline.cpp	/^    typedef basic_ostream<wchar_t> wostream;$/;"	t	namespace:std	file:
wostringstream	test_getline.cpp	/^    typedef basic_ostringstream<wchar_t> wostringstream;$/;"	t	namespace:std	file:
writable_file_error_	github/leveldb-1.18/util/testutil.h	/^  bool writable_file_error_;$/;"	m	class:leveldb::test::ErrorEnv
write	test_getline.cpp	/^        write(const _CharT* __s, streamsize __n)$/;"	f	class:std::basic_ostream
write_buffer_size	github/leveldb-1.18/include/leveldb/options.h	/^  size_t write_buffer_size;$/;"	m	struct:leveldb::Options
write_options_	github/leveldb-1.18/db/db_bench.cc	/^  WriteOptions write_options_;$/;"	m	class:leveldb::Benchmark	file:
writer_	github/leveldb-1.18/db/log_test.cc	/^  Writer writer_;$/;"	m	class:leveldb::log::LogTest	file:
writers_	github/leveldb-1.18/db/db_impl.h	/^  std::deque<Writer*> writers_;$/;"	m	class:leveldb::DBImpl
ws	test_getline.cpp	/^        ws(basic_istream<_CharT, _Traits>& __in)$/;"	f	namespace:std
wstreambuf	test_getline.cpp	/^    typedef basic_streambuf<wchar_t> wstreambuf;$/;"	t	namespace:std	file:
wstreampos	test_getline.cpp	/^    typedef fpos<mbstate_t> wstreampos;$/;"	t	namespace:std	file:
wstring	test_getline.cpp	/^    typedef basic_string<wchar_t> wstring;$/;"	t	namespace:std	file:
wstringbuf	test_getline.cpp	/^    typedef basic_stringbuf<wchar_t> wstringbuf;$/;"	t	namespace:std	file:
wstringstream	test_getline.cpp	/^    typedef basic_stringstream<wchar_t> wstringstream;$/;"	t	namespace:std	file:
xdigit	test_getline.cpp	/^        static const mask xdigit = _ISxdigit;$/;"	m	struct:std::ctype_base	file:
xsgetn	test_getline.cpp	/^        xsgetn(char_type* __s, streamsize __n)$/;"	f	class:std::basic_streambuf
xsputn	test_getline.cpp	/^        xsputn(const char_type* __s, streamsize __n)$/;"	f	class:std::basic_streambuf
year	study/Impala/runtime/timestamp-parse-util.cpp	/^  int year;$/;"	m	struct:impala::DateTimeParseResult	file:
~A	study/dada/abstract/destructor.cpp	/^		virtual ~A() { cout << "~A()" << endl; } \/\/ 根据对象的真实类型执行相应的析构函数$/;"	f	class:A
~A	study/dada/noname_obj/const_obj.h	/^		~A(){$/;"	f	class:A
~A	study/dada/noname_obj/noname_obj.h	/^		~A(){$/;"	f	class:A
~A	study/dada/overload/copy_constructor.cpp	/^		virtual ~A() {$/;"	f	class:A
~A	study/dada/overload/custom_copy.cpp	/^		virtual ~A() {$/;"	f	class:A
~A	study/dada/overload/friend.cpp	/^		~A() {$/;"	f	class:A
~A	study/dada/overload/reference.cpp	/^		virtual ~A() {$/;"	f	class:A
~Arena	github/leveldb-1.18/util/arena.cc	/^Arena::~Arena() {$/;"	f	class:leveldb::Arena
~Array	study/dada/overload/array.cpp	/^		~Array() {$/;"	f	class:Array
~Array	study/dada/overload/array_another.cpp	/^		~Array() {$/;"	f	class:Array
~Athlete	work/person_design/include/athletes.h	/^        ~Athlete() {}$/;"	f	class:Athlete
~AutoCompactTest	github/leveldb-1.18/db/autocompact_test.cc	/^  ~AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
~B	study/dada/abstract/destructor.cpp	/^		~B() { cout << "~B()" << endl; }$/;"	f	class:B
~BakPacket	work/test_job/day16/data_packet/include/BakPacket.h	/^		~BakPacket(){}$/;"	f	class:BakPacket
~BasketballPlayer	work/person_design/include/basketball_player.h	/^		~BasketballPlayer() {}$/;"	f	class:BasketballPlayer
~Benchmark	github/leveldb-1.18/db/db_bench.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	github/leveldb-1.18/doc/bench/db_bench_sqlite3.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	github/leveldb-1.18/doc/bench/db_bench_tree_db.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Block	github/leveldb-1.18/table/block.cc	/^Block::~Block() {$/;"	f	class:leveldb::Block
~BlockConstructor	github/leveldb-1.18/table/table_test.cc	/^  ~BlockConstructor() {$/;"	f	class:leveldb::BlockConstructor
~BloomTest	github/leveldb-1.18/util/bloom_test.cc	/^  ~BloomTest() {$/;"	f	class:leveldb::BloomTest
~Builder	github/leveldb-1.18/db/version_set.cc	/^  ~Builder() {$/;"	f	class:leveldb::VersionSet::Builder
~Cache	github/leveldb-1.18/util/cache.cc	/^Cache::~Cache() {$/;"	f	class:leveldb::Cache
~CacheTest	github/leveldb-1.18/util/cache_test.cc	/^  ~CacheTest() {$/;"	f	class:leveldb::CacheTest
~Cat	study/dada/static/statics.cpp	/^		virtual ~Cat() { HowManyCats--; }$/;"	f	class:Cat
~Child	study/dada/father_son_cons_destroy/father_son.h	/^		~Child(){$/;"	f	class:Child
~Compaction	github/leveldb-1.18/db/version_set.cc	/^Compaction::~Compaction() {$/;"	f	class:leveldb::Compaction
~Comparator	github/leveldb-1.18/util/comparator.cc	/^Comparator::~Comparator() { }$/;"	f	class:leveldb::Comparator
~CondVar	github/leveldb-1.18/port/port_posix.cc	/^CondVar::~CondVar() { PthreadCall("destroy cv", pthread_cond_destroy(&cv_)); }$/;"	f	class:leveldb::port::CondVar
~Constructor	github/leveldb-1.18/table/table_test.cc	/^  virtual ~Constructor() { }$/;"	f	class:leveldb::Constructor
~CorruptionTest	github/leveldb-1.18/db/corruption_test.cc	/^  ~CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
~DB	github/leveldb-1.18/db/db_impl.cc	/^DB::~DB() { }$/;"	f	class:leveldb::DB
~DBConstructor	github/leveldb-1.18/table/table_test.cc	/^  ~DBConstructor() {$/;"	f	class:leveldb::DBConstructor
~DBImpl	github/leveldb-1.18/db/db_impl.cc	/^DBImpl::~DBImpl() {$/;"	f	class:leveldb::DBImpl
~DBIter	github/leveldb-1.18/db/db_iter.cc	/^  virtual ~DBIter() {$/;"	f	class:leveldb::__anon10::DBIter
~DBTest	github/leveldb-1.18/db/db_test.cc	/^  ~DBTest() {$/;"	f	class:leveldb::DBTest
~DataPacket	work/test_job/day12/data_packet/include/DataPacket.h	/^		~DataPacket(){}$/;"	f	class:DataPacket
~DataPacket	work/test_job/day16/data_packet/include/DataPacket.h	/^		~DataPacket(){}$/;"	f	class:DataPacket
~DataPacket	work/test_job/day17/data_packet/include/DataPacket.h	/^		~DataPacket(){}$/;"	f	class:DataPacket
~Env	github/leveldb-1.18/util/env.cc	/^Env::~Env() {$/;"	f	class:leveldb::Env
~EnvWrapper	github/leveldb-1.18/util/env.cc	/^EnvWrapper::~EnvWrapper() {$/;"	f	class:leveldb::EnvWrapper
~FileLock	github/leveldb-1.18/util/env.cc	/^FileLock::~FileLock() {$/;"	f	class:leveldb::FileLock
~FileState	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  ~FileState() {$/;"	f	class:leveldb::__anon25::FileState	file:
~FilterPolicy	github/leveldb-1.18/util/filter_policy.cc	/^FilterPolicy::~FilterPolicy() { }$/;"	f	class:leveldb::FilterPolicy
~FindFileTest	github/leveldb-1.18/db/version_set_test.cc	/^  ~FindFileTest() {$/;"	f	class:leveldb::FindFileTest
~Firemen	work/person_design/include/firemen.h	/^        ~Firemen() {}$/;"	f	class:Firemen
~FootballPlayer	work/person_design/include/football_player.h	/^        ~FootballPlayer() {}$/;"	f	class:FootballPlayer
~HandleTable	github/leveldb-1.18/util/cache.cc	/^  ~HandleTable() { delete[] list_; }$/;"	f	class:leveldb::__anon27::HandleTable
~Handler	github/leveldb-1.18/db/write_batch.cc	/^WriteBatch::Handler::~Handler() { }$/;"	f	class:leveldb::WriteBatch::Handler
~Harness	github/leveldb-1.18/table/table_test.cc	/^  ~Harness() {$/;"	f	class:leveldb::Harness
~Histogram	github/leveldb-1.18/util/histogram.h	/^  ~Histogram() { }$/;"	f	class:leveldb::Histogram
~Human	study/dada/person_job/person.h	/^		~Human(){}$/;"	f	class:Human
~Human	work/person_design/include/human.h	/^        virtual ~Human() { obj_count--; }$/;"	f	class:Human
~InMemoryEnv	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  virtual ~InMemoryEnv() {$/;"	f	class:leveldb::__anon25::InMemoryEnv
~Iterator	github/leveldb-1.18/table/iterator.cc	/^    Iterator::~Iterator() {$/;"	f	class:leveldb::Iterator
~IteratorWrapper	github/leveldb-1.18/table/iterator_wrapper.h	/^  ~IteratorWrapper() { delete iter_; }$/;"	f	class:leveldb::IteratorWrapper
~KeyConvertingIterator	github/leveldb-1.18/table/table_test.cc	/^  virtual ~KeyConvertingIterator() { delete iter_; }$/;"	f	class:leveldb::KeyConvertingIterator
~LRUCache	github/leveldb-1.18/util/cache.cc	/^LRUCache::~LRUCache() {$/;"	f	class:leveldb::__anon27::LRUCache
~Logger	github/leveldb-1.18/util/env.cc	/^Logger::~Logger() {$/;"	f	class:leveldb::Logger
~LookupKey	github/leveldb-1.18/db/dbformat.h	/^inline LookupKey::~LookupKey() {$/;"	f	class:leveldb::LookupKey
~Manipulator	work/person_design/include/manipulator.h	/^        ~Manipulator() {}$/;"	f	class:Manipulator
~MemEnvTest	github/leveldb-1.18/helpers/memenv/memenv_test.cc	/^  ~MemEnvTest() {$/;"	f	class:leveldb::MemEnvTest
~MemTable	github/leveldb-1.18/db/memtable.cc	/^MemTable::~MemTable() {$/;"	f	class:leveldb::MemTable
~MemTableConstructor	github/leveldb-1.18/table/table_test.cc	/^  ~MemTableConstructor() {$/;"	f	class:leveldb::MemTableConstructor
~MergingIterator	github/leveldb-1.18/table/merger.cc	/^  virtual ~MergingIterator() {$/;"	f	class:leveldb::__anon20::MergingIterator
~ModelDB	github/leveldb-1.18/db/db_test.cc	/^  ~ModelDB() { }$/;"	f	class:leveldb::ModelDB
~ModelIter	github/leveldb-1.18/db/db_test.cc	/^    ~ModelIter() {$/;"	f	class:leveldb::ModelDB::ModelIter
~Mutex	github/leveldb-1.18/port/port_posix.cc	/^Mutex::~Mutex() { PthreadCall("destroy mutex", pthread_mutex_destroy(&mu_)); }$/;"	f	class:leveldb::port::Mutex
~Parent	study/dada/father_son_cons_destroy/father_son.h	/^		~Parent(){$/;"	f	class:Parent
~Person	study/dada/person/person.h	/^		~Person(){}$/;"	f	class:Person
~Pilot	work/person_design/include/pilot.h	/^        ~Pilot() {}$/;"	f	class:Pilot
~PosixEnv	github/leveldb-1.18/util/env_posix.cc	/^  virtual ~PosixEnv() {$/;"	f	class:leveldb::__anon32::PosixEnv
~PosixLogger	github/leveldb-1.18/util/posix_logger.h	/^  virtual ~PosixLogger() {$/;"	f	class:leveldb::PosixLogger
~PosixMmapReadableFile	github/leveldb-1.18/util/env_posix.cc	/^  virtual ~PosixMmapReadableFile() {$/;"	f	class:leveldb::__anon32::PosixMmapReadableFile
~PosixRandomAccessFile	github/leveldb-1.18/util/env_posix.cc	/^  virtual ~PosixRandomAccessFile() { close(fd_); }$/;"	f	class:leveldb::__anon32::PosixRandomAccessFile
~PosixSequentialFile	github/leveldb-1.18/util/env_posix.cc	/^  virtual ~PosixSequentialFile() { fclose(file_); }$/;"	f	class:leveldb::__anon32::PosixSequentialFile
~PosixWritableFile	github/leveldb-1.18/util/env_posix.cc	/^  ~PosixWritableFile() {$/;"	f	class:leveldb::__anon32::PosixWritableFile
~RandomAccessFile	github/leveldb-1.18/util/env.cc	/^RandomAccessFile::~RandomAccessFile() {$/;"	f	class:leveldb::RandomAccessFile
~RandomAccessFileImpl	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  ~RandomAccessFileImpl() {$/;"	f	class:leveldb::__anon25::RandomAccessFileImpl
~Reader	github/leveldb-1.18/db/log_reader.cc	/^Reader::~Reader() {$/;"	f	class:leveldb::log::Reader
~Rep	github/leveldb-1.18/table/table.cc	/^  ~Rep() {$/;"	f	struct:leveldb::Table::Rep
~Repairer	github/leveldb-1.18/db/repair.cc	/^  ~Repairer() {$/;"	f	class:leveldb::__anon5::Repairer
~Reporter	github/leveldb-1.18/db/log_reader.cc	/^Reader::Reporter::~Reporter() {$/;"	f	class:leveldb::log::Reader::Reporter
~Runners	work/person_design/include/one_hundred_m_runner.h	/^        ~Runners() {}$/;"	f	class:Runners
~SequentialFile	github/leveldb-1.18/util/env.cc	/^SequentialFile::~SequentialFile() {$/;"	f	class:leveldb::SequentialFile
~SequentialFileImpl	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  ~SequentialFileImpl() {$/;"	f	class:leveldb::__anon25::SequentialFileImpl
~ShardedLRUCache	github/leveldb-1.18/util/cache.cc	/^  virtual ~ShardedLRUCache() { }$/;"	f	class:leveldb::__anon27::ShardedLRUCache
~Snapshot	github/leveldb-1.18/db/db_impl.cc	/^Snapshot::~Snapshot() {$/;"	f	class:leveldb::Snapshot
~SortTime	work/test_job/day10/SortTime.h	/^		~SortTime()$/;"	f	class:SortTime
~SortTime	work/test_job/sort/include/SortTime.h	/^		~SortTime()$/;"	f	class:SortTime
~SortTime	work/test_job/sort_job/SortTime.h	/^		~SortTime()$/;"	f	class:SortTime
~Status	github/leveldb-1.18/include/leveldb/status.h	/^  ~Status() { delete[] state_; }$/;"	f	class:leveldb::Status
~StringSink	github/leveldb-1.18/table/table_test.cc	/^  ~StringSink() { }$/;"	f	class:leveldb::StringSink
~StringSource	github/leveldb-1.18/table/table_test.cc	/^  virtual ~StringSource() { }$/;"	f	class:leveldb::StringSource
~Student	work/person_design/include/student.h	/^        ~Student() {}$/;"	f	class:Student
~Table	github/leveldb-1.18/table/table.cc	/^Table::~Table() {$/;"	f	class:leveldb::Table
~TableBuilder	github/leveldb-1.18/table/table_builder.cc	/^TableBuilder::~TableBuilder() {$/;"	f	class:leveldb::TableBuilder
~TableCache	github/leveldb-1.18/db/table_cache.cc	/^TableCache::~TableCache() {$/;"	f	class:leveldb::TableCache
~TableConstructor	github/leveldb-1.18/table/table_test.cc	/^  ~TableConstructor() {$/;"	f	class:leveldb::TableConstructor
~Tester	github/leveldb-1.18/util/testharness.h	/^  ~Tester() {$/;"	f	class:leveldb::test::Tester
~TwoLevelIterator	github/leveldb-1.18/table/two_level_iterator.cc	/^TwoLevelIterator::~TwoLevelIterator() {$/;"	f	class:leveldb::__anon19::TwoLevelIterator
~Version	github/leveldb-1.18/db/version_set.cc	/^Version::~Version() {$/;"	f	class:leveldb::Version
~VersionEdit	github/leveldb-1.18/db/version_edit.h	/^  ~VersionEdit() { }$/;"	f	class:leveldb::VersionEdit
~VersionSet	github/leveldb-1.18/db/version_set.cc	/^VersionSet::~VersionSet() {$/;"	f	class:leveldb::VersionSet
~WritableFile	github/leveldb-1.18/util/env.cc	/^WritableFile::~WritableFile() {$/;"	f	class:leveldb::WritableFile
~WritableFileImpl	github/leveldb-1.18/helpers/memenv/memenv.cc	/^  ~WritableFileImpl() {$/;"	f	class:leveldb::__anon25::WritableFileImpl
~WriteBatch	github/leveldb-1.18/db/write_batch.cc	/^WriteBatch::~WriteBatch() { }$/;"	f	class:leveldb::WriteBatch
~Writer	github/leveldb-1.18/db/log_writer.cc	/^Writer::~Writer() {$/;"	f	class:leveldb::log::Writer
~__ctype_abstract_base	test_getline.cpp	/^                ~__ctype_abstract_base() { }$/;"	f	class:std::__ctype_abstract_base
~__numpunct_cache	test_getline.cpp	/^        __numpunct_cache<_CharT>::~__numpunct_cache()$/;"	f	class:std::__numpunct_cache
~__pthread_cleanup_class	test_getline.cpp	/^        ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }$/;"	f	class:__pthread_cleanup_class
~allocator	test_getline.cpp	/^            ~allocator() throw() { }$/;"	f	class:std::allocator
~basic_ios	test_getline.cpp	/^                ~basic_ios() { }$/;"	f	class:std::basic_ios
~basic_iostream	test_getline.cpp	/^                ~basic_iostream() { }$/;"	f	class:std::basic_iostream
~basic_istream	test_getline.cpp	/^                ~basic_istream()$/;"	f	class:std::basic_istream
~basic_ostream	test_getline.cpp	/^                ~basic_ostream() { }$/;"	f	class:std::basic_ostream
~basic_streambuf	test_getline.cpp	/^                    ~basic_streambuf()$/;"	f	class:std::basic_streambuf
~basic_string	test_getline.cpp	/^            ~basic_string()$/;"	f	class:std::basic_string
~collate	test_getline.cpp	/^                ~collate()$/;"	f	class:std::collate
~collate_byname	test_getline.cpp	/^                ~collate_byname() { }$/;"	f	class:std::collate_byname
~ctype_byname	test_getline.cpp	/^                ~ctype_byname() { };$/;"	f	class:std::ctype_byname
~leveldb_comparator_t	github/leveldb-1.18/db/c.cc	/^  virtual ~leveldb_comparator_t() {$/;"	f	struct:leveldb_comparator_t
~leveldb_filterpolicy_t	github/leveldb-1.18/db/c.cc	/^  virtual ~leveldb_filterpolicy_t() {$/;"	f	struct:leveldb_filterpolicy_t
~new_allocator	test_getline.cpp	/^                ~new_allocator() throw() { }$/;"	f	class:__gnu_cxx::new_allocator
~num_get	test_getline.cpp	/^            virtual ~num_get() { }$/;"	f	class:std::num_get
~num_put	test_getline.cpp	/^                ~num_put() { };$/;"	f	class:std::num_put
~numpunct_byname	test_getline.cpp	/^                ~numpunct_byname() { }$/;"	f	class:std::numpunct_byname
~sentry	test_getline.cpp	/^            ~sentry()$/;"	f	class:std::basic_ostream::sentry
