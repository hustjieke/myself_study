!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ASC	include/BakPacket.h	/^enum Enumcmp{ ASC, DESC };$/;"	e	enum:Enumcmp
BAKPACKET_H_	include/BakPacket.h	12;"	d
BakPacket	include/BakPacket.h	/^} BakPacket;$/;"	t	typeref:struct:BakPacket_
BakPacket_	include/BakPacket.h	/^typedef struct BakPacket_$/;"	s
CXX	makefile	/^CXX=g++$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS=-O0 -g -Wall -fmessage-length=0 $/;"	m
DATAPACKET_H_	include/DataPacket.h	12;"	d
DATA_SIZE	include/DataPacket.h	16;"	d
DESC	include/BakPacket.h	/^enum Enumcmp{ ASC, DESC };$/;"	e	enum:Enumcmp
DataPacket	include/DataPacket.h	/^class DataPacket$/;"	c
DataPacket	src/DataPacket.cpp	/^DataPacket::DataPacket()$/;"	f	class:DataPacket
DataPacket	src/DataPacket.cpp	/^DataPacket::DataPacket(int num)$/;"	f	class:DataPacket
EXEC	makefile	/^EXEC=app$/;"	m
Enumcmp	include/BakPacket.h	/^enum Enumcmp{ ASC, DESC };$/;"	g
GetRandomStr	src/DataPacket.cpp	/^string DataPacket::GetRandomStr()$/;"	f	class:DataPacket
LENGTH	include/DataPacket.h	17;"	d
OBJS	makefile	/^OBJS=$(patsubst %.cpp,%.o,$(SRCS))$/;"	m
PrintTest	src/DataMain.cpp	/^void PrintTest(const DataPacket &new_packet)$/;"	f
RandInit	src/DataPacket.cpp	/^void DataPacket::RandInit(int upper_limit)$/;"	f	class:DataPacket
SRCS	makefile	/^SRCS=$(wildcard .\/src\/*.cpp) $/;"	m
ShowCurTime	src/DataPacket.cpp	/^int ShowCurTime()$/;"	f
TimeCost	src/DataPacket.cpp	/^void TimeCost(struct timeval &tm_start, struct timeval &tm_end)$/;"	f
TimeEnd	src/DataPacket.cpp	/^int TimeEnd(struct timeval &tm_end)$/;"	f
TimeStart	src/DataPacket.cpp	/^int TimeStart(struct timeval &tm_start)$/;"	f
arr	include/DataPacket.h	/^		int  arr[DATA_SIZE];$/;"	m	class:DataPacket
cmp	include/BakPacket.h	/^		Enumcmp cmp;$/;"	m	class:compare
compare	include/BakPacket.h	/^		compare(Enumcmp c):cmp(c) {};$/;"	f	class:compare
compare	include/BakPacket.h	/^class compare$/;"	c
d_num	include/BakPacket.h	/^	double 	d_num;$/;"	m	struct:BakPacket_
d_vec	include/DataPacket.h	/^		vector<double>  	d_vec;$/;"	m	class:DataPacket
element_cpy	src/BakPacket.cpp	/^void element_cpy(BakPacket b_stru[], $/;"	f
element_cpy_new	src/BakPacket.cpp	/^void element_cpy_new(BakPacket b_stru[], $/;"	f
i_num	include/BakPacket.h	/^	int 	i_num;$/;"	m	struct:BakPacket_
l_num	include/BakPacket.h	/^	long 	l_num;$/;"	m	struct:BakPacket_
l_vec	include/DataPacket.h	/^		vector<long>  	l_vec;$/;"	m	class:DataPacket
main	src/DataMain.cpp	/^int main(int argc, char **argv)$/;"	f
operator ()	include/BakPacket.h	/^		bool operator ()(BakPacket cmp_a, BakPacket cmp_b)$/;"	f	class:compare
str	include/BakPacket.h	/^	const char 	*str;$/;"	m	struct:BakPacket_
str_vec	include/DataPacket.h	/^		vector<string> 		str_vec;$/;"	m	class:DataPacket
~DataPacket	include/DataPacket.h	/^		~DataPacket(){}$/;"	f	class:DataPacket
